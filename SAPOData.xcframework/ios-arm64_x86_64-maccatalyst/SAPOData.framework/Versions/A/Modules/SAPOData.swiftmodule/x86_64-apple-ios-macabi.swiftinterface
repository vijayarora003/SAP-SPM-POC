// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios16.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=unchecked -O -module-name SAPOData
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Darwin.C
import Compression
import Darwin
import Foundation
import SAPCommon
import SAPFoundation
@_exported import SAPOData
import SQLite3
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers open class CSDLDocument : SAPOData.ObjectBase {
  public static let csdlInfoKey: Swift.CodingUserInfoKey
  public static let builtinVocabularyNamespaces: SAPOData.StringMap
  final public var logger: Swift.AnyObject?
  final public var canChangeAnything: Swift.Bool
  final public var canRemoveAnything: Swift.Bool
  final public var hasGeneratedProxies: Swift.Bool
  final public var hasOpenEnumerations: Swift.Bool
  final public var loadedFromCache: Swift.Bool
  final public var modifiedInCache: Swift.Bool
  final public var proxyVersion: Swift.String?
  final public var versionCode: (Swift.Int)
  final public var versionText: Swift.String
  final public var compactXML: Swift.String?
  final public var originalText: Swift.String?
  final public var resolvedText: Swift.String?
  final public var mainSchema: SAPOData.DataSchema?
  final public var defaultContainer: SAPOData.EntityContainer?
  final public var sourceFile: Swift.String?
  override public init()
  open func addNavigationPartners()
  open func addOwner(_ owner: Swift.AnyObject)
  open func addVocabularyReference(ns: Swift.String, uri: Swift.String? = nil, alias: Swift.String? = nil) throws
  @inline(__always) final public var annotationTerms: SAPOData.AnnotationTermMap {
    get
  }
  open func applyAnnotations()
  @inline(__always) final public var associationSets: SAPOData.MapOfLegacyAssociationSet {
    get
  }
  @inline(__always) final public var associations: SAPOData.LegacyAssociationMap {
    get
  }
  @inline(__always) final public var builtinTypes: SAPOData.DataTypeMap {
    get
  }
  open func complexType(withName name: Swift.String) -> SAPOData.ComplexType
  @inline(__always) final public var complexTypes: SAPOData.ComplexTypeMap {
    get
  }
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  @inline(__always) final public var dataMethods: SAPOData.DataMethodMap {
    get
  }
  open func dataSchema(withName name: Swift.String) -> SAPOData.DataSchema
  @inline(__always) final public var dataSchemas: SAPOData.DataSchemaMap {
    get
  }
  open var databaseTables: SAPOData.EntitySetMap {
    get
  }
  @inline(__always) final public var entityContainers: SAPOData.EntityContainerMap {
    get
  }
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  @inline(__always) final public var entitySets: SAPOData.EntitySetMap {
    get
  }
  open func entityType(withName name: Swift.String) -> SAPOData.EntityType
  @inline(__always) final public var entityTypes: SAPOData.EntityTypeMap {
    get
  }
  open func enumType(withName name: Swift.String) -> SAPOData.EnumType
  @inline(__always) final public var enumTypes: SAPOData.EnumTypeMap {
    get
  }
  open func hasTopReference(ns: Swift.String) -> Swift.Bool
  open func hasTopSchema(ns: Swift.String) -> Swift.Bool
  open func immortalize() -> SAPOData.CSDLDocument
  open func inheritAnnotations()
  @inline(__always) final public var lookupMethods: SAPOData.DataMethodMap {
    get
  }
  @inline(__always) final public var lookupSets: SAPOData.EntitySetMap {
    get
  }
  @inline(__always) final public var lookupSingletons: SAPOData.EntitySetMap {
    get
  }
  open func owners() -> SAPOData.ObjectList
  @inline(__always) final public var pathAnnotations: SAPOData.PathAnnotationsMap {
    get
  }
  open func removeOwner(_ owner: Swift.AnyObject)
  open func resolveEntity(_ entity: SAPOData.EntityValue) throws
  open func simpleType(withName name: Swift.String) -> SAPOData.SimpleType
  @inline(__always) final public var simpleTypes: SAPOData.SimpleTypeMap {
    get
  }
  open func singleton(withName name: Swift.String) -> SAPOData.EntitySet
  @inline(__always) final public var singletons: SAPOData.EntitySetMap {
    get
  }
  @inline(__always) final public var topAliases: SAPOData.StringMap {
    get
  }
  @inline(__always) final public var topReferences: SAPOData.CsdlReferenceList {
    get
  }
  @inline(__always) final public var topSchemas: SAPOData.DataSchemaList {
    get
  }
  @inline(__always) final public var xmlNamespaces: SAPOData.StringMap {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CSDLError : SAPOData.DataSchemaError {
  final public var element: SAPOData.XmlElement?
  override public init()
  open class func cannotFetch(url: Swift.String) -> SAPOData.CSDLError
  open class func unknownSchema(ns: Swift.String) -> SAPOData.CSDLError
  open class func withCause(_ cause: (any Swift.Error)?) -> SAPOData.CSDLError
  open class func withCauseAndMessage(cause: (any Swift.Error)?, message: Swift.String?) -> SAPOData.CSDLError
  open class func withElement(_ element: SAPOData.XmlElement, message: Swift.String) -> SAPOData.CSDLError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.CSDLError
  @objc deinit
}
@_inheritsConvenienceInitializers open class CSDLFetcher : SAPOData.ObjectBase {
  override public init()
  open func accept(uri: Swift.String, ns: Swift.String) throws -> Swift.Bool
  open func fetch(uri: Swift.String, ns: Swift.String) throws -> Swift.String
  open func ignore(uri: Swift.String, ns: Swift.String) throws -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CSDLOption {
  public static let processMixedVersions: (Swift.Int)
  public static let retainOriginalText: (Swift.Int)
  public static let retainResolvedText: (Swift.Int)
  public static let ignoreExternalReferences: (Swift.Int)
  public static let ignoreInternalReferences: (Swift.Int)
  public static let ignoreStandardReferences: (Swift.Int)
  public static let ignoreAllReferences: (Swift.Int)
  public static let ignoreEdmAnnotations: (Swift.Int)
  public static let ignoreXmlAnnotations: (Swift.Int)
  public static let ignoreAllAnnotations: (Swift.Int)
  public static let ignoreUndefinedTerms: (Swift.Int)
  public static let resolveUndefinedTerms: (Swift.Int)
  public static let warnAboutUndefinedTerms: (Swift.Int)
  public static let traceParsingOfElements: (Swift.Int)
  public static let disableNameValidation: (Swift.Int)
  public static let allowCaseConflicts: (Swift.Int)
  public static let defaultVariableScale: (Swift.Int)
  public static let defaultVariableSrid: (Swift.Int)
  public static let disableFacetWarnings: (Swift.Int)
  public static let strictFacetWarnings: (Swift.Int)
  public static let disableLoggingOfErrors: (Swift.Int)
  public static let disableLoggingOfWarnings: (Swift.Int)
  public static let failIfProviderIncompatible: (Swift.Int)
  public static let warnIfProviderIncompatible: (Swift.Int)
  public static let logWithUnqualifiedFileNames: (Swift.Int)
  public static let excludeServerOnlyElements: (Swift.Int)
  public static let csdlCompatibilityCheck: (Swift.Int)
  public static let allowInconsistentNullability: (Swift.Int)
  public static let synthesizeTargetSets: (Swift.Int)
  public static let allowUnqualifiedMembers: (Swift.Int)
  public static let map: SAPOData.IntMap
  @_hasMissingDesignatedInitializers public class Internal {
    public static let synthesizeNavigationProperties: (Swift.Int)
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CSDLParser : SAPOData.ObjectBase {
  final public var includeElements: SAPOData.XmlElementList
  final public var includeReferences: SAPOData.XmlElementList
  final public var includeSchemas: SAPOData.DataSchemaList
  final public var csdlFetcher: SAPOData.CSDLFetcher?
  final public var csdlOptions: (Swift.Int)
  final public var internalOptions: (Swift.Int)
  final public var logErrors: Swift.Bool
  final public var logWarnings: Swift.Bool
  final public var traceRequests: Swift.Bool
  final public var excludeServerOnly: Swift.Bool
  final public var serviceName: Swift.String?
  override public init()
  open class func addLocalSnapshots(parser: SAPOData.CSDLParser, metadata: SAPOData.CSDLDocument)
  open func includeNamespace(ns: Swift.String, alias: Swift.String? = nil)
  open func includeReference(uri: Swift.String, ns: Swift.String, alias: Swift.String? = nil)
  open func includeSchema(_ schema: SAPOData.DataSchema)
  open func mergeAnnotationsFrom(text: Swift.String, file: Swift.String, tags: SAPOData.StringSet = StringSet.empty) throws
  open func mergeDefinitionsFrom(text: Swift.String, file: Swift.String, tags: SAPOData.StringSet = StringSet.empty) throws
  open func parse(_ text: Swift.String, url: Swift.String) throws -> SAPOData.CSDLDocument
  open func parseInProxy(_ text: Swift.String, url: Swift.String) -> SAPOData.CSDLDocument
  @objc deinit
}
open class CsdlCompatibilityChecker : SAPOData.ObjectBase {
  public init(oldMetadata: SAPOData.CSDLDocument, newMetadata: SAPOData.CSDLDocument)
  open func check() throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CsdlContainment {
  public static func addTargetSets(metadata: SAPOData.CSDLDocument)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CsdlIdentifier {
  public static func fix(name: Swift.String) -> Swift.String
  public static func fixNamespace(name: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class CsdlReference : SAPOData.ObjectBase {
  final public var version: (Swift.Int)
  final public var uri: Swift.String
  final public var includes: SAPOData.CsdlReference.IncludeList
  override public init()
  @_inheritsConvenienceInitializers open class Include : SAPOData.ObjectBase {
    final public var namespace: Swift.String
    final public var alias: Swift.String?
    override public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class IncludeList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.CsdlReference.Include {
      get
      set
    }
    public static let empty: SAPOData.CsdlReference.IncludeList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.CsdlReference.Include)
    final public func append(contentsOf list: SAPOData.CsdlReference.IncludeList)
    final public func appendThis(_ item: SAPOData.CsdlReference.Include) -> SAPOData.CsdlReference.IncludeList
    final public func copy() -> SAPOData.CsdlReference.IncludeList
    final public func filter(_ predicate: @escaping (SAPOData.CsdlReference.Include) -> Swift.Bool) -> SAPOData.CsdlReference.IncludeList
    final public func first() -> SAPOData.CsdlReference.Include
    open class func fromArray(_ array: Swift.Array<SAPOData.CsdlReference.Include>) -> SAPOData.CsdlReference.IncludeList
    final public func includes(item: SAPOData.CsdlReference.Include) -> Swift.Bool
    final public func indexOf(item: SAPOData.CsdlReference.Include, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.CsdlReference.Include)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.CsdlReference.IncludeList)
    final public func item(at index: Swift.Int) -> SAPOData.CsdlReference.Include
    final public func last() -> SAPOData.CsdlReference.Include
    final public func lastIndexOf(item: SAPOData.CsdlReference.Include, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference.Include>>
    open class func of(_ items: SAPOData.CsdlReference.Include...) -> SAPOData.CsdlReference.IncludeList
    open func reversed() -> SAPOData.CsdlReference.IncludeList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.CsdlReference.IncludeList
    final public func single() -> SAPOData.CsdlReference.Include
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CsdlReference.IncludeList
    final public func sort(by increasing: @escaping (SAPOData.CsdlReference.Include, SAPOData.CsdlReference.Include) -> Swift.Bool)
    final public func sorted() -> SAPOData.CsdlReference.IncludeList
    final public func sorted(by increasing: @escaping (SAPOData.CsdlReference.Include, SAPOData.CsdlReference.Include) -> Swift.Bool) -> SAPOData.CsdlReference.IncludeList
    open func toArray() -> Swift.Array<SAPOData.CsdlReference.Include>
    final public func update(at index: Swift.Int, item: SAPOData.CsdlReference.Include)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference.Include>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference.Include>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CsdlReferenceList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.CsdlReference {
    get
    set
  }
  public static let empty: SAPOData.CsdlReferenceList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.CsdlReference)
  final public func append(contentsOf list: SAPOData.CsdlReferenceList)
  final public func appendThis(_ item: SAPOData.CsdlReference) -> SAPOData.CsdlReferenceList
  final public func copy() -> SAPOData.CsdlReferenceList
  final public func filter(_ predicate: @escaping (SAPOData.CsdlReference) -> Swift.Bool) -> SAPOData.CsdlReferenceList
  final public func first() -> SAPOData.CsdlReference
  open class func fromArray(_ array: Swift.Array<SAPOData.CsdlReference>) -> SAPOData.CsdlReferenceList
  final public func includes(item: SAPOData.CsdlReference) -> Swift.Bool
  final public func indexOf(item: SAPOData.CsdlReference, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.CsdlReference)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.CsdlReferenceList)
  final public func item(at index: Swift.Int) -> SAPOData.CsdlReference
  final public func last() -> SAPOData.CsdlReference
  final public func lastIndexOf(item: SAPOData.CsdlReference, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference>>
  open class func of(_ items: SAPOData.CsdlReference...) -> SAPOData.CsdlReferenceList
  open func reversed() -> SAPOData.CsdlReferenceList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.CsdlReferenceList
  final public func single() -> SAPOData.CsdlReference
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CsdlReferenceList
  final public func sort(by increasing: @escaping (SAPOData.CsdlReference, SAPOData.CsdlReference) -> Swift.Bool)
  final public func sorted() -> SAPOData.CsdlReferenceList
  final public func sorted(by increasing: @escaping (SAPOData.CsdlReference, SAPOData.CsdlReference) -> Swift.Bool) -> SAPOData.CsdlReferenceList
  open func toArray() -> Swift.Array<SAPOData.CsdlReference>
  final public func update(at index: Swift.Int, item: SAPOData.CsdlReference)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class LegacyAssociation : SAPOData.ObjectBase {
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var firstProperty: Swift.String?
  final public var firstRole: Swift.String?
  final public var firstType: Swift.String
  final public var firstZero: Swift.Bool
  final public var firstMany: Swift.Bool
  final public var firstDelete: (Swift.Int)
  final public var firstPartner: Swift.String?
  final public var secondProperty: Swift.String?
  final public var secondRole: Swift.String?
  final public var secondType: Swift.String
  final public var secondZero: Swift.Bool
  final public var secondMany: Swift.Bool
  final public var secondDelete: (Swift.Int)
  final public var secondPartner: Swift.String?
  final public var dependentRole: Swift.String?
  final public var principalRole: Swift.String?
  final public var referentialConstraints: SAPOData.StringMap
  override public init()
  open class func addNavigationProperties(metadata: SAPOData.CSDLDocument) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class LegacyAssociationList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LegacyAssociation {
    get
    set
  }
  public static let empty: SAPOData.LegacyAssociationList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.LegacyAssociation)
  final public func append(contentsOf list: SAPOData.LegacyAssociationList)
  final public func appendThis(_ item: SAPOData.LegacyAssociation) -> SAPOData.LegacyAssociationList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.LegacyAssociationList
  final public func filter(_ predicate: @escaping (SAPOData.LegacyAssociation) -> Swift.Bool) -> SAPOData.LegacyAssociationList
  final public func first() -> SAPOData.LegacyAssociation
  open class func fromArray(_ array: Swift.Array<SAPOData.LegacyAssociation>) -> SAPOData.LegacyAssociationList
  final public func includes(item: SAPOData.LegacyAssociation) -> Swift.Bool
  final public func indexOf(item: SAPOData.LegacyAssociation, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.LegacyAssociation)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LegacyAssociationList)
  final public func item(at index: Swift.Int) -> SAPOData.LegacyAssociation
  final public func last() -> SAPOData.LegacyAssociation
  final public func lastIndexOf(item: SAPOData.LegacyAssociation, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LegacyAssociation>>
  open class func of(_ items: SAPOData.LegacyAssociation...) -> SAPOData.LegacyAssociationList
  open func reversed() -> SAPOData.LegacyAssociationList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LegacyAssociationList
  final public func single() -> SAPOData.LegacyAssociation
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LegacyAssociationList
  final public func sort(by increasing: @escaping (SAPOData.LegacyAssociation, SAPOData.LegacyAssociation) -> Swift.Bool)
  final public func sorted() -> SAPOData.LegacyAssociationList
  final public func sorted(by increasing: @escaping (SAPOData.LegacyAssociation, SAPOData.LegacyAssociation) -> Swift.Bool) -> SAPOData.LegacyAssociationList
  open func toArray() -> Swift.Array<SAPOData.LegacyAssociation>
  final public func update(at index: Swift.Int, item: SAPOData.LegacyAssociation)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LegacyAssociation>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LegacyAssociation>>
  @objc deinit
}
open class LegacyAssociationMap : SAPOData.MapBase {
  public static let empty: SAPOData.LegacyAssociationMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.LegacyAssociationMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.LegacyAssociationMap
  open func entries() -> SAPOData.LegacyAssociationMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.LegacyAssociationMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.LegacyAssociation
  open func sortedEntries() throws -> SAPOData.LegacyAssociationMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.LegacyAssociationList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.LegacyAssociation)
  open func updateThis(key: Swift.String, value: SAPOData.LegacyAssociation) -> SAPOData.LegacyAssociationMap
  open func updateValue(_ value: SAPOData.LegacyAssociation, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.LegacyAssociation?
  open func values() -> SAPOData.LegacyAssociationList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.LegacyAssociation {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.LegacyAssociationMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.LegacyAssociationMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.LegacyAssociationMap.Entry)
    final public func append(contentsOf list: SAPOData.LegacyAssociationMap.EntryList)
    final public func appendThis(_ item: SAPOData.LegacyAssociationMap.Entry) -> SAPOData.LegacyAssociationMap.EntryList
    final public func copy() -> SAPOData.LegacyAssociationMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.LegacyAssociationMap.Entry) -> Swift.Bool) -> SAPOData.LegacyAssociationMap.EntryList
    final public func first() -> SAPOData.LegacyAssociationMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.LegacyAssociationMap.Entry>) -> SAPOData.LegacyAssociationMap.EntryList
    final public func includes(item: SAPOData.LegacyAssociationMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.LegacyAssociationMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.LegacyAssociationMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LegacyAssociationMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.LegacyAssociationMap.Entry
    final public func last() -> SAPOData.LegacyAssociationMap.Entry
    final public func lastIndexOf(item: SAPOData.LegacyAssociationMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LegacyAssociationMap.Entry>>
    open class func of(_ items: SAPOData.LegacyAssociationMap.Entry...) -> SAPOData.LegacyAssociationMap.EntryList
    open func reversed() -> SAPOData.LegacyAssociationMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.LegacyAssociationMap.EntryList
    final public func single() -> SAPOData.LegacyAssociationMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LegacyAssociationMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.LegacyAssociationMap.Entry, SAPOData.LegacyAssociationMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.LegacyAssociationMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.LegacyAssociationMap.Entry, SAPOData.LegacyAssociationMap.Entry) -> Swift.Bool) -> SAPOData.LegacyAssociationMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.LegacyAssociationMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.LegacyAssociationMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LegacyAssociationMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LegacyAssociationMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LegacyAssociationSet : SAPOData.ObjectBase {
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var firstRole: Swift.String
  final public var secondRole: Swift.String
  override public init()
  final public var association: SAPOData.LegacyAssociation {
    get
    set(value)
  }
  final public var firstSet: SAPOData.EntitySet {
    get
    set(value)
  }
  final public var secondSet: SAPOData.EntitySet {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LegacyNavigationProperty : SAPOData.NavigationProperty {
  override public init()
  open var fromRole: Swift.String {
    get
    set(value)
  }
  open var relationship: Swift.String {
    get
    set(value)
  }
  open var toRole: Swift.String {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ListOfLegacyAssociationSet : SAPOData.ListBase {
  public static let empty: SAPOData.ListOfLegacyAssociationSet
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.LegacyAssociationSet)
  final public func item(at index: Swift.Int) -> SAPOData.LegacyAssociationSet
  final public func update(at index: Swift.Int, item: SAPOData.LegacyAssociationSet)
  @objc deinit
}
open class MapOfLegacyAssociationSet : SAPOData.MapBase {
  public static let empty: SAPOData.MapOfLegacyAssociationSet
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.MapOfLegacyAssociationSet
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.MapOfLegacyAssociationSet
  open func entries() -> SAPOData.MapOfLegacyAssociationSet.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.MapOfLegacyAssociationSet)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.LegacyAssociationSet
  open func sortedEntries() throws -> SAPOData.MapOfLegacyAssociationSet.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.ListOfLegacyAssociationSet
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.LegacyAssociationSet)
  open func updateThis(key: Swift.String, value: SAPOData.LegacyAssociationSet) -> SAPOData.MapOfLegacyAssociationSet
  open func updateValue(_ value: SAPOData.LegacyAssociationSet, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.LegacyAssociationSet?
  open func values() -> SAPOData.ListOfLegacyAssociationSet
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.LegacyAssociationSet {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.MapOfLegacyAssociationSet.Entry {
      get
      set
    }
    public static let empty: SAPOData.MapOfLegacyAssociationSet.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.MapOfLegacyAssociationSet.Entry)
    final public func append(contentsOf list: SAPOData.MapOfLegacyAssociationSet.EntryList)
    final public func appendThis(_ item: SAPOData.MapOfLegacyAssociationSet.Entry) -> SAPOData.MapOfLegacyAssociationSet.EntryList
    final public func copy() -> SAPOData.MapOfLegacyAssociationSet.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.MapOfLegacyAssociationSet.Entry) -> Swift.Bool) -> SAPOData.MapOfLegacyAssociationSet.EntryList
    final public func first() -> SAPOData.MapOfLegacyAssociationSet.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.MapOfLegacyAssociationSet.Entry>) -> SAPOData.MapOfLegacyAssociationSet.EntryList
    final public func includes(item: SAPOData.MapOfLegacyAssociationSet.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.MapOfLegacyAssociationSet.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.MapOfLegacyAssociationSet.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.MapOfLegacyAssociationSet.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.MapOfLegacyAssociationSet.Entry
    final public func last() -> SAPOData.MapOfLegacyAssociationSet.Entry
    final public func lastIndexOf(item: SAPOData.MapOfLegacyAssociationSet.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.MapOfLegacyAssociationSet.Entry>>
    open class func of(_ items: SAPOData.MapOfLegacyAssociationSet.Entry...) -> SAPOData.MapOfLegacyAssociationSet.EntryList
    open func reversed() -> SAPOData.MapOfLegacyAssociationSet.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.MapOfLegacyAssociationSet.EntryList
    final public func single() -> SAPOData.MapOfLegacyAssociationSet.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.MapOfLegacyAssociationSet.EntryList
    final public func sort(by increasing: @escaping (SAPOData.MapOfLegacyAssociationSet.Entry, SAPOData.MapOfLegacyAssociationSet.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.MapOfLegacyAssociationSet.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.MapOfLegacyAssociationSet.Entry, SAPOData.MapOfLegacyAssociationSet.Entry) -> Swift.Bool) -> SAPOData.MapOfLegacyAssociationSet.EntryList
    open func toArray() -> Swift.Array<SAPOData.MapOfLegacyAssociationSet.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.MapOfLegacyAssociationSet.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.MapOfLegacyAssociationSet.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.MapOfLegacyAssociationSet.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BigInteger : SAPOData.ObjectBase {
  @objc deinit
  convenience public init(_ value: Swift.Int)
  public func decimalValue() -> Foundation.Decimal
  convenience public init(_ value: Foundation.Decimal)
  convenience public init(_ text: Swift.String)
  final public func abs() -> SAPOData.BigInteger
  final public func add(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  final public func byteValue() -> Swift.Int
  final public func compareTo(_ p_y: SAPOData.BigInteger) -> Swift.Int
  final public func divide(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  final public func doubleValue() -> Swift.Double
  final public func equalTo(_ y: SAPOData.BigInteger) -> Swift.Bool
  final public func floatValue() -> Swift.Float
  open class func fromByte(_ value: Swift.Int) -> SAPOData.BigInteger
  open class func fromDouble(_ value: Swift.Double) -> SAPOData.BigInteger
  open class func fromFloat(_ value: Swift.Float) -> SAPOData.BigInteger
  open class func fromInt(_ value: Swift.Int) -> SAPOData.BigInteger
  open class func fromLong(_ value: Swift.Int64) -> SAPOData.BigInteger
  open class func fromShort(_ value: Swift.Int) -> SAPOData.BigInteger
  final public func greaterEqual(_ y: SAPOData.BigInteger) -> Swift.Bool
  final public func greaterThan(_ y: SAPOData.BigInteger) -> Swift.Bool
  final public func intValue() -> Swift.Int
  final public func lessEqual(_ y: SAPOData.BigInteger) -> Swift.Bool
  final public func lessThan(_ y: SAPOData.BigInteger) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.BigInteger
  final public func longValue() -> Swift.Int64
  final public func multiply(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  final public func negate() -> SAPOData.BigInteger
  final public func notEqual(_ y: SAPOData.BigInteger) -> Swift.Bool
  open class func parse(_ text: Swift.String) -> SAPOData.BigInteger?
  final public func remainder(_ y: SAPOData.BigInteger) -> SAPOData.BigInteger
  final public func shortValue() -> Swift.Int
  final public func sign() -> Swift.Int
  final public func subtract(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  override final public func toString() -> Swift.String
}
@_hasMissingDesignatedInitializers public class Single {
  public static func optional<T>(_ array: [T]) throws -> T?
  public static func required<T>(_ array: [T]) throws -> T
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AtomDeltaStream : SAPOData.DeltaStream {
  override open func abort() throws
  override open func close() throws
  open class func fromStream(_ stream: SAPOData.CharStream, context: SAPOData.DataContext) throws -> SAPOData.AtomDeltaStream
  override open func next() throws -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class AtomError : SAPOData.DataFormatError {
  override public init()
  open class func cannotParse(_ value: Swift.String, type: Swift.String) -> SAPOData.AtomError
  open class func withCause(_ cause: any Swift.Error) -> SAPOData.AtomError
  open class func withMessage(_ message: Swift.String) -> SAPOData.AtomError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AtomValue {
  public static func entryDocument(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func errorResponse(element: SAPOData.XmlElement, context: SAPOData.DataContext) -> SAPOData.ErrorResponse
  public static func feedDocument(list: SAPOData.EntityValueList, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func formatCall(_ call: SAPOData.DataMethodCall, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func formatDocument(_ value: SAPOData.DataValue, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func formatLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func fromBasicList(element: SAPOData.XmlElement, list: SAPOData.DataValueList, context: SAPOData.DataContext)
  public static func fromComplexList(element: SAPOData.XmlElement, list: SAPOData.ComplexValueList, context: SAPOData.DataContext)
  public static func fromComplexValue(element: SAPOData.XmlElement, complex: SAPOData.ComplexValue?, context: SAPOData.DataContext)
  public static func fromDataValue(element: SAPOData.XmlElement, value: SAPOData.DataValue?, context: SAPOData.DataContext)
  public static func fromEntityList(feed: SAPOData.XmlElement, list: SAPOData.EntityValueList, context: SAPOData.DataContext)
  public static func fromEntityValue(entry: SAPOData.XmlElement, entity: SAPOData.EntityValue?, context: SAPOData.DataContext)
  public static func parseDocument(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func parseLink(element: SAPOData.XmlElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue
  public static func parseLinks(element: SAPOData.XmlElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func parseReference(uri: Swift.String, entityType: SAPOData.EntityType, entitySet: SAPOData.EntitySet, context: SAPOData.DataContext, binding: Swift.Bool = false) throws -> SAPOData.EntityValue
  public static func toBasicList(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValueList
  public static func toComplexList(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValueList
  public static func toComplexValue(element: SAPOData.XmlElement?, type: SAPOData.ComplexType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValue?
  public static func toDataValue(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func toEntityList(feed: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func toEntityValue(entry: SAPOData.XmlElement?, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GeoAtom {
  public static func format(geo: SAPOData.XmlElement, value: SAPOData.DataValue)
  public static func parse(geo: SAPOData.XmlElement, type: SAPOData.DataType) throws -> SAPOData.DataValue
  public static func parseType(geoNode: SAPOData.XmlNode, type: SAPOData.DataType) throws -> Swift.String
  @objc deinit
}
public class ObjectHashWrapper : Swift.Hashable {
  final public let hash: Swift.Int
  final public let text: Swift.String
  final public let value: Swift.AnyObject?
  public init(_ value: Swift.AnyObject?)
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class StringHashWrapper : Swift.Hashable {
  final public let hash: Swift.Int
  final public let text: Swift.String
  public init(_ text: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: SAPOData.ObjectHashWrapper, rhs: SAPOData.ObjectHashWrapper) -> Swift.Bool
public func == (lhs: SAPOData.StringHashWrapper, rhs: SAPOData.StringHashWrapper) -> Swift.Bool
@_inheritsConvenienceInitializers open class AggregateExpression : SAPOData.ObjectBase {
  override public init()
  @inline(__always) final public var aggregateFromList: SAPOData.AggregateFromList {
    get
  }
  @inline(__always) final public var alias: Swift.String? {
    get
  }
  open class func count(alias: Swift.String) throws -> SAPOData.AggregateExpression
  open class func create(_ value: SAPOData.DataValue?, method: SAPOData.AggregateMethod?, alias: Swift.String?) throws -> SAPOData.AggregateExpression
  open class func createWithNavigationPath(_ value: SAPOData.DataValue?, method: SAPOData.AggregateMethod?, alias: Swift.String?, navigationPath: SAPOData.PropertyPath?) throws -> SAPOData.AggregateExpression
  open func from(_ propertyPath: SAPOData.PropertyPath, method: SAPOData.AggregateMethod?) throws -> SAPOData.AggregateExpression
  @inline(__always) final public var isCount: Swift.Bool {
    get
  }
  @inline(__always) final public var method: SAPOData.AggregateMethod? {
    get
  }
  @inline(__always) final public var navigationPath: SAPOData.PropertyPath? {
    get
  }
  @inline(__always) final public var value: SAPOData.DataValue? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AggregateExpressionList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AggregateExpression {
    get
    set
  }
  public static let empty: SAPOData.AggregateExpressionList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.AggregateExpression)
  final public func append(contentsOf list: SAPOData.AggregateExpressionList)
  final public func appendThis(_ item: SAPOData.AggregateExpression) -> SAPOData.AggregateExpressionList
  final public func copy() -> SAPOData.AggregateExpressionList
  final public func filter(_ predicate: @escaping (SAPOData.AggregateExpression) -> Swift.Bool) -> SAPOData.AggregateExpressionList
  final public func first() -> SAPOData.AggregateExpression
  open class func fromArray(_ array: Swift.Array<SAPOData.AggregateExpression>) -> SAPOData.AggregateExpressionList
  final public func includes(item: SAPOData.AggregateExpression) -> Swift.Bool
  final public func indexOf(item: SAPOData.AggregateExpression, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.AggregateExpression)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AggregateExpressionList)
  final public func item(at index: Swift.Int) -> SAPOData.AggregateExpression
  final public func last() -> SAPOData.AggregateExpression
  final public func lastIndexOf(item: SAPOData.AggregateExpression, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AggregateExpression>>
  open class func of(_ items: SAPOData.AggregateExpression...) -> SAPOData.AggregateExpressionList
  open func reversed() -> SAPOData.AggregateExpressionList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AggregateExpressionList
  final public func single() -> SAPOData.AggregateExpression
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AggregateExpressionList
  final public func sort(by increasing: @escaping (SAPOData.AggregateExpression, SAPOData.AggregateExpression) -> Swift.Bool)
  final public func sorted() -> SAPOData.AggregateExpressionList
  final public func sorted(by increasing: @escaping (SAPOData.AggregateExpression, SAPOData.AggregateExpression) -> Swift.Bool) -> SAPOData.AggregateExpressionList
  open func toArray() -> Swift.Array<SAPOData.AggregateExpression>
  final public func update(at index: Swift.Int, item: SAPOData.AggregateExpression)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateExpression>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateExpression>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AggregateFrom : SAPOData.ObjectBase {
  open class func create(propertyPath: SAPOData.PropertyPath, method: SAPOData.AggregateMethod?) throws -> SAPOData.AggregateFrom
  @inline(__always) final public var method: SAPOData.AggregateMethod? {
    get
  }
  final public var propertyPath: SAPOData.PropertyPath {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AggregateFromList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AggregateFrom {
    get
    set
  }
  public static let empty: SAPOData.AggregateFromList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.AggregateFrom)
  final public func append(contentsOf list: SAPOData.AggregateFromList)
  final public func appendThis(_ item: SAPOData.AggregateFrom) -> SAPOData.AggregateFromList
  final public func copy() -> SAPOData.AggregateFromList
  final public func filter(_ predicate: @escaping (SAPOData.AggregateFrom) -> Swift.Bool) -> SAPOData.AggregateFromList
  final public func first() -> SAPOData.AggregateFrom
  open class func fromArray(_ array: Swift.Array<SAPOData.AggregateFrom>) -> SAPOData.AggregateFromList
  final public func includes(item: SAPOData.AggregateFrom) -> Swift.Bool
  final public func indexOf(item: SAPOData.AggregateFrom, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.AggregateFrom)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AggregateFromList)
  final public func item(at index: Swift.Int) -> SAPOData.AggregateFrom
  final public func last() -> SAPOData.AggregateFrom
  final public func lastIndexOf(item: SAPOData.AggregateFrom, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AggregateFrom>>
  open class func of(_ items: SAPOData.AggregateFrom...) -> SAPOData.AggregateFromList
  open func reversed() -> SAPOData.AggregateFromList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AggregateFromList
  final public func single() -> SAPOData.AggregateFrom
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AggregateFromList
  final public func sort(by increasing: @escaping (SAPOData.AggregateFrom, SAPOData.AggregateFrom) -> Swift.Bool)
  final public func sorted() -> SAPOData.AggregateFromList
  final public func sorted(by increasing: @escaping (SAPOData.AggregateFrom, SAPOData.AggregateFrom) -> Swift.Bool) -> SAPOData.AggregateFromList
  open func toArray() -> Swift.Array<SAPOData.AggregateFrom>
  final public func update(at index: Swift.Int, item: SAPOData.AggregateFrom)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateFrom>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateFrom>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AggregateMethod : SAPOData.ObjectBase {
  public static let sum: SAPOData.AggregateMethod
  public static let average: SAPOData.AggregateMethod
  public static let minimum: SAPOData.AggregateMethod
  public static let maximum: SAPOData.AggregateMethod
  public static let countDistinct: SAPOData.AggregateMethod
  open class func custom(_ name: Swift.String) throws -> SAPOData.AggregateMethod
  @inline(__always) final public var name: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AggregateValue : SAPOData.TransformValue {
  final public var aggregateExpressionList: SAPOData.AggregateExpressionList {
    get
  }
  open class func count(as alias: Swift.String) -> SAPOData.AggregateValue
  open class func create(_ value: SAPOData.DataValue?, method: SAPOData.AggregateMethod?, alias: Swift.String?) -> SAPOData.AggregateValue
  open class func createWithExpressionList(aggregateExpressionList: SAPOData.AggregateExpressionList) -> SAPOData.AggregateValue
  @objc deinit
}
@_inheritsConvenienceInitializers open class AggregateValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AggregateValue {
    get
    set
  }
  public static let empty: SAPOData.AggregateValueList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.AggregateValue)
  final public func append(contentsOf list: SAPOData.AggregateValueList)
  final public func appendThis(_ item: SAPOData.AggregateValue) -> SAPOData.AggregateValueList
  final public func copy() -> SAPOData.AggregateValueList
  final public func filter(_ predicate: @escaping (SAPOData.AggregateValue) -> Swift.Bool) -> SAPOData.AggregateValueList
  final public func first() -> SAPOData.AggregateValue
  open class func fromArray(_ array: Swift.Array<SAPOData.AggregateValue>) -> SAPOData.AggregateValueList
  final public func includes(item: SAPOData.AggregateValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.AggregateValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.AggregateValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AggregateValueList)
  final public func item(at index: Swift.Int) -> SAPOData.AggregateValue
  final public func last() -> SAPOData.AggregateValue
  final public func lastIndexOf(item: SAPOData.AggregateValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AggregateValue>>
  open class func of(_ items: SAPOData.AggregateValue...) -> SAPOData.AggregateValueList
  open func reversed() -> SAPOData.AggregateValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AggregateValueList
  final public func single() -> SAPOData.AggregateValue
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AggregateValueList
  final public func sort(by increasing: @escaping (SAPOData.AggregateValue, SAPOData.AggregateValue) -> Swift.Bool)
  final public func sorted() -> SAPOData.AggregateValueList
  final public func sorted(by increasing: @escaping (SAPOData.AggregateValue, SAPOData.AggregateValue) -> Swift.Bool) -> SAPOData.AggregateValueList
  open func toArray() -> Swift.Array<SAPOData.AggregateValue>
  final public func update(at index: Swift.Int, item: SAPOData.AggregateValue)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateValue>>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AmountTransform : SAPOData.TransformValue {
  open var amount: SAPOData.DataValue {
    get
  }
  open var name: Swift.String {
    get
  }
  open var value: SAPOData.DataValue {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class Annotation : SAPOData.ObjectBase {
  final public var qualifier: Swift.String?
  final public var explicitNull: Swift.Bool
  final public var explicitValue: SAPOData.DataValue?
  final public var propertyName: Swift.String?
  final public var sourceLine: (Swift.Int)
  final public var sourceFile: Swift.String?
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open class func equal(a: SAPOData.Annotation?, b: SAPOData.Annotation?) -> Swift.Bool
  final public var term: SAPOData.AnnotationTerm {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open var value: SAPOData.DataValue? {
    get
  }
  open func valueIsTrue() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class AnnotationList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.Annotation {
    get
    set
  }
  public static let empty: SAPOData.AnnotationList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.Annotation)
  final public func append(contentsOf list: SAPOData.AnnotationList)
  final public func appendThis(_ item: SAPOData.Annotation) -> SAPOData.AnnotationList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.AnnotationList
  final public func filter(_ predicate: @escaping (SAPOData.Annotation) -> Swift.Bool) -> SAPOData.AnnotationList
  final public func first() -> SAPOData.Annotation
  open class func fromArray(_ array: Swift.Array<SAPOData.Annotation>) -> SAPOData.AnnotationList
  final public func includes(item: SAPOData.Annotation) -> Swift.Bool
  final public func indexOf(item: SAPOData.Annotation, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.Annotation)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationList)
  final public func item(at index: Swift.Int) -> SAPOData.Annotation
  final public func last() -> SAPOData.Annotation
  final public func lastIndexOf(item: SAPOData.Annotation, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.Annotation>>
  open class func of(_ items: SAPOData.Annotation...) -> SAPOData.AnnotationList
  open func reversed() -> SAPOData.AnnotationList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationList
  final public func single() -> SAPOData.Annotation
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationList
  final public func sort(by increasing: @escaping (SAPOData.Annotation, SAPOData.Annotation) -> Swift.Bool)
  final public func sorted() -> SAPOData.AnnotationList
  final public func sorted(by increasing: @escaping (SAPOData.Annotation, SAPOData.Annotation) -> Swift.Bool) -> SAPOData.AnnotationList
  open func toArray() -> Swift.Array<SAPOData.Annotation>
  final public func update(at index: Swift.Int, item: SAPOData.Annotation)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.Annotation>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.Annotation>>
  @objc deinit
}
open class AnnotationMap : SAPOData.MapBase {
  public static let empty: SAPOData.AnnotationMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.Annotation)
  open class func concurrent() -> SAPOData.AnnotationMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.AnnotationMap
  open func entries() -> SAPOData.AnnotationMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.AnnotationMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.Annotation
  open func sortedEntries() -> SAPOData.AnnotationMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.AnnotationList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.Annotation)
  open func updateThis(key: Swift.String, value: SAPOData.Annotation) -> SAPOData.AnnotationMap
  open func updateValue(_ value: SAPOData.Annotation, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.Annotation?
  open func values() -> SAPOData.AnnotationList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.Annotation {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.AnnotationMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.AnnotationMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.AnnotationMap.Entry)
    final public func append(contentsOf list: SAPOData.AnnotationMap.EntryList)
    final public func appendThis(_ item: SAPOData.AnnotationMap.Entry) -> SAPOData.AnnotationMap.EntryList
    final public func copy() -> SAPOData.AnnotationMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.AnnotationMap.Entry) -> Swift.Bool) -> SAPOData.AnnotationMap.EntryList
    final public func first() -> SAPOData.AnnotationMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.AnnotationMap.Entry>) -> SAPOData.AnnotationMap.EntryList
    final public func includes(item: SAPOData.AnnotationMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.AnnotationMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.AnnotationMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.AnnotationMap.Entry
    final public func last() -> SAPOData.AnnotationMap.Entry
    final public func lastIndexOf(item: SAPOData.AnnotationMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationMap.Entry>>
    open class func of(_ items: SAPOData.AnnotationMap.Entry...) -> SAPOData.AnnotationMap.EntryList
    open func reversed() -> SAPOData.AnnotationMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationMap.EntryList
    final public func single() -> SAPOData.AnnotationMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.AnnotationMap.Entry, SAPOData.AnnotationMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.AnnotationMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.AnnotationMap.Entry, SAPOData.AnnotationMap.Entry) -> Swift.Bool) -> SAPOData.AnnotationMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.AnnotationMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.AnnotationMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AnnotationTerm : SAPOData.ObjectBase {
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var xmlAttribute: Swift.String?
  final public var baseTerm: SAPOData.AnnotationTerm?
  final public var defaultValue: SAPOData.DataValue?
  final public var appliesTo: SAPOData.StringList
  final public var prettyText: Swift.Bool
  final public var isUnicode: Swift.Bool
  final public var minLength: (Swift.Int)
  final public var maxLength: (Swift.Int)
  final public var precision: (Swift.Int)
  final public var scale: (Swift.Int)
  final public var srid: (Swift.Int)
  final public var isOptional: Swift.Bool
  final public var sourceLine: (Swift.Int)
  final public var isInferred: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open class func equal(a: SAPOData.AnnotationTerm?, b: SAPOData.AnnotationTerm?) -> Swift.Bool
  open var fixedLength: Swift.Bool {
    get
  }
  open var name: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  final public var type: SAPOData.DataType {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AnnotationTermList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AnnotationTerm {
    get
    set
  }
  public static let empty: SAPOData.AnnotationTermList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.AnnotationTerm)
  final public func append(contentsOf list: SAPOData.AnnotationTermList)
  final public func appendThis(_ item: SAPOData.AnnotationTerm) -> SAPOData.AnnotationTermList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.AnnotationTermList
  final public func filter(_ predicate: @escaping (SAPOData.AnnotationTerm) -> Swift.Bool) -> SAPOData.AnnotationTermList
  final public func first() -> SAPOData.AnnotationTerm
  open class func fromArray(_ array: Swift.Array<SAPOData.AnnotationTerm>) -> SAPOData.AnnotationTermList
  final public func includes(item: SAPOData.AnnotationTerm) -> Swift.Bool
  final public func indexOf(item: SAPOData.AnnotationTerm, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.AnnotationTerm)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationTermList)
  final public func item(at index: Swift.Int) -> SAPOData.AnnotationTerm
  final public func last() -> SAPOData.AnnotationTerm
  final public func lastIndexOf(item: SAPOData.AnnotationTerm, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTerm>>
  open class func of(_ items: SAPOData.AnnotationTerm...) -> SAPOData.AnnotationTermList
  open func reversed() -> SAPOData.AnnotationTermList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationTermList
  final public func single() -> SAPOData.AnnotationTerm
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationTermList
  final public func sort(by increasing: @escaping (SAPOData.AnnotationTerm, SAPOData.AnnotationTerm) -> Swift.Bool)
  final public func sorted() -> SAPOData.AnnotationTermList
  final public func sorted(by increasing: @escaping (SAPOData.AnnotationTerm, SAPOData.AnnotationTerm) -> Swift.Bool) -> SAPOData.AnnotationTermList
  open func toArray() -> Swift.Array<SAPOData.AnnotationTerm>
  final public func update(at index: Swift.Int, item: SAPOData.AnnotationTerm)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTerm>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTerm>>
  @objc deinit
}
open class AnnotationTermMap : SAPOData.MapBase {
  public static let empty: SAPOData.AnnotationTermMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.AnnotationTerm)
  open class func concurrent() -> SAPOData.AnnotationTermMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.AnnotationTermMap
  open func entries() -> SAPOData.AnnotationTermMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.AnnotationTermMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.AnnotationTerm
  open func sortedEntries() -> SAPOData.AnnotationTermMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.AnnotationTermList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.AnnotationTerm)
  open func updateThis(key: Swift.String, value: SAPOData.AnnotationTerm) -> SAPOData.AnnotationTermMap
  open func updateValue(_ value: SAPOData.AnnotationTerm, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.AnnotationTerm?
  open func values() -> SAPOData.AnnotationTermList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.AnnotationTerm {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.AnnotationTermMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.AnnotationTermMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.AnnotationTermMap.Entry)
    final public func append(contentsOf list: SAPOData.AnnotationTermMap.EntryList)
    final public func appendThis(_ item: SAPOData.AnnotationTermMap.Entry) -> SAPOData.AnnotationTermMap.EntryList
    final public func copy() -> SAPOData.AnnotationTermMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.AnnotationTermMap.Entry) -> Swift.Bool) -> SAPOData.AnnotationTermMap.EntryList
    final public func first() -> SAPOData.AnnotationTermMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.AnnotationTermMap.Entry>) -> SAPOData.AnnotationTermMap.EntryList
    final public func includes(item: SAPOData.AnnotationTermMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.AnnotationTermMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.AnnotationTermMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationTermMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.AnnotationTermMap.Entry
    final public func last() -> SAPOData.AnnotationTermMap.Entry
    final public func lastIndexOf(item: SAPOData.AnnotationTermMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTermMap.Entry>>
    open class func of(_ items: SAPOData.AnnotationTermMap.Entry...) -> SAPOData.AnnotationTermMap.EntryList
    open func reversed() -> SAPOData.AnnotationTermMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationTermMap.EntryList
    final public func single() -> SAPOData.AnnotationTermMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationTermMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.AnnotationTermMap.Entry, SAPOData.AnnotationTermMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.AnnotationTermMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.AnnotationTermMap.Entry, SAPOData.AnnotationTermMap.Entry) -> Swift.Bool) -> SAPOData.AnnotationTermMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.AnnotationTermMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.AnnotationTermMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTermMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTermMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AnyList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.AnyObject? {
    get
    set
  }
  public static let empty: SAPOData.AnyList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.AnyObject?)
  final public func append(contentsOf list: SAPOData.AnyList)
  final public func appendThis(_ item: Swift.AnyObject?) -> SAPOData.AnyList
  final public func copy() -> SAPOData.AnyList
  final public func filter(_ predicate: @escaping (Swift.AnyObject?) -> Swift.Bool) -> SAPOData.AnyList
  final public func first() -> Swift.AnyObject?
  open class func fromArray(_ array: Swift.Array<Swift.AnyObject?>) -> SAPOData.AnyList
  final public func includes(item: Swift.AnyObject?) -> Swift.Bool
  final public func indexOf(item: Swift.AnyObject?, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.AnyObject?)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AnyList)
  final public func item(at index: Swift.Int) -> Swift.AnyObject?
  final public func last() -> Swift.AnyObject?
  final public func lastIndexOf(item: Swift.AnyObject?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.AnyObject?>>
  open class func of(_ items: Swift.AnyObject?...) -> SAPOData.AnyList
  open func reversed() -> SAPOData.AnyList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnyList
  final public func single() -> Swift.AnyObject?
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnyList
  final public func sort(by increasing: @escaping (Swift.AnyObject?, Swift.AnyObject?) -> Swift.Bool)
  final public func sorted() -> SAPOData.AnyList
  final public func sorted(by increasing: @escaping (Swift.AnyObject?, Swift.AnyObject?) -> Swift.Bool) -> SAPOData.AnyList
  open func toArray() -> Swift.Array<Swift.AnyObject?>
  final public func update(at index: Swift.Int, item: Swift.AnyObject?)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.AnyObject?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.AnyObject?>>
  @objc deinit
}
open class AnyMap : SAPOData.MapBase {
  public static let empty: SAPOData.AnyMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.AnyMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.AnyMap
  open func entries() -> SAPOData.AnyMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.AnyMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.AnyObject?
  open func sortedEntries() -> SAPOData.AnyMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.AnyList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.AnyObject?)
  open func updateThis(key: Swift.String, value: Swift.AnyObject?) -> SAPOData.AnyMap
  open func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.AnyObject?
  open func values() -> SAPOData.AnyList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    @inline(__always) final public var value: Swift.AnyObject? {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.AnyMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.AnyMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.AnyMap.Entry)
    final public func append(contentsOf list: SAPOData.AnyMap.EntryList)
    final public func appendThis(_ item: SAPOData.AnyMap.Entry) -> SAPOData.AnyMap.EntryList
    final public func copy() -> SAPOData.AnyMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.AnyMap.Entry) -> Swift.Bool) -> SAPOData.AnyMap.EntryList
    final public func first() -> SAPOData.AnyMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.AnyMap.Entry>) -> SAPOData.AnyMap.EntryList
    final public func includes(item: SAPOData.AnyMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.AnyMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.AnyMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.AnyMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.AnyMap.Entry
    final public func last() -> SAPOData.AnyMap.Entry
    final public func lastIndexOf(item: SAPOData.AnyMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnyMap.Entry>>
    open class func of(_ items: SAPOData.AnyMap.Entry...) -> SAPOData.AnyMap.EntryList
    open func reversed() -> SAPOData.AnyMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnyMap.EntryList
    final public func single() -> SAPOData.AnyMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnyMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.AnyMap.Entry, SAPOData.AnyMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.AnyMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.AnyMap.Entry, SAPOData.AnyMap.Entry) -> Swift.Bool) -> SAPOData.AnyMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.AnyMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.AnyMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnyMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnyMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ArrayFunction {
  public static func append<T>(_ value: inout Swift.Array<T>, _ item: T)
  public static func appendThis<T>(_ value: inout Swift.Array<T>, _ item: T) -> Swift.Array<T>
  public static func appendAll<T>(_ value: inout Swift.Array<T>, list: Swift.Array<T>) -> Swift.Array<T>
  public static func copy<T>(_ value: Swift.Array<T>) -> Swift.Array<T>
  public static func equals<T>(_ value: Swift.Array<T>, _ list: Swift.Array<T>) -> Swift.Bool
  public static func first<T>(_ value: Swift.Array<T>) -> T
  public static func item<T>(_ value: Swift.Array<T>, at index: Swift.Int) -> T
  public static func hashCode<T>(_ value: Swift.Array<T>) -> Swift.Int
  public static func includes<T>(_ value: Swift.Array<T>, _ item: T) -> Swift.Bool
  public static func indexOf<T>(_ value: Swift.Array<T>, _ item: T) -> Swift.Int
  public static func insert<T>(_ value: inout Swift.Array<T>, at index: Swift.Int, item: T)
  public static func insertAll<T>(_ value: inout Swift.Array<T>, at index: Swift.Int, list: Swift.Array<T>)
  public static func last<T>(_ value: Swift.Array<T>) -> T
  public static func lastIndexOf<T>(_ value: Swift.Array<T>, item: T) -> Swift.Int
  public static func remove<T>(_ value: inout Swift.Array<T>, at index: Swift.Int)
  public static func removeAll<T>(_ value: inout Swift.Array<T>)
  public static func removeFirst<T>(_ value: inout Swift.Array<T>)
  public static func removeLast<T>(_ value: inout Swift.Array<T>)
  public static func removeRange<T>(_ value: inout Swift.Array<T>, _ start: Swift.Int, _ end: Swift.Int)
  public static func reverse<T>(_ value: inout Swift.Array<T>) -> Swift.Array<T>
  public static func set<T>(_ value: inout Swift.Array<T>, _ index: Swift.Int, _ item: T)
  public static func single<T>(_ value: inout Swift.Array<T>) -> T
  public static func slice<T>(_ value: Swift.Array<T>, _ start: Swift.Int) -> Swift.Array<T>
  public static func slice<T>(_ value: Swift.Array<T>, _ start: Swift.Int, _ end: Swift.Int) -> Swift.Array<T>
  public static func toString<T>(_ value: Swift.Array<T>) -> Foundation.NSString
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BasicType {
  public static let unknown: SAPOData.DataType
  public static let binary: SAPOData.DataType
  public static let boolean: SAPOData.DataType
  public static let byte: SAPOData.DataType
  public static let char: SAPOData.DataType
  public static let dayTimeDuration: SAPOData.DataType
  public static let decimal: SAPOData.DataType
  public static let double: SAPOData.DataType
  public static let float: SAPOData.DataType
  public static let geographyCollection: SAPOData.DataType
  public static let geographyLineString: SAPOData.DataType
  public static let geographyMultiLineString: SAPOData.DataType
  public static let geographyMultiPoint: SAPOData.DataType
  public static let geographyMultiPolygon: SAPOData.DataType
  public static let geographyPoint: SAPOData.DataType
  public static let geographyPolygon: SAPOData.DataType
  public static let geographyValue: SAPOData.DataType
  public static let geometryCollection: SAPOData.DataType
  public static let geometryLineString: SAPOData.DataType
  public static let geometryMultiLineString: SAPOData.DataType
  public static let geometryMultiPoint: SAPOData.DataType
  public static let geometryMultiPolygon: SAPOData.DataType
  public static let geometryPoint: SAPOData.DataType
  public static let geometryPolygon: SAPOData.DataType
  public static let geometryValue: SAPOData.DataType
  public static let globalDateTime: SAPOData.DataType
  public static let guidValue: SAPOData.DataType
  public static let int: SAPOData.DataType
  public static let integer: SAPOData.DataType
  public static let localDate: SAPOData.DataType
  public static let localDateTime: SAPOData.DataType
  public static let localTime: SAPOData.DataType
  public static let long: SAPOData.DataType
  public static let short: SAPOData.DataType
  public static let string: SAPOData.DataType
  public static let unsignedByte: SAPOData.DataType
  public static let unsignedInt: SAPOData.DataType
  public static let unsignedLong: SAPOData.DataType
  public static let unsignedShort: SAPOData.DataType
  public static let yearMonthDuration: SAPOData.DataType
  @objc deinit
}
@_inheritsConvenienceInitializers open class BinaryList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Foundation.Data {
    get
    set
  }
  public static let empty: SAPOData.BinaryList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Foundation.Data)
  final public func append(contentsOf list: SAPOData.BinaryList)
  final public func appendThis(_ item: Foundation.Data) -> SAPOData.BinaryList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.BinaryList
  final public func filter(_ predicate: @escaping (Foundation.Data) -> Swift.Bool) -> SAPOData.BinaryList
  final public func first() -> Foundation.Data
  open class func fromArray(_ array: Swift.Array<Foundation.Data>) -> SAPOData.BinaryList
  final public func includes(item: Foundation.Data) -> Swift.Bool
  final public func indexOf(item: Foundation.Data, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Foundation.Data)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.BinaryList)
  final public func item(at index: Swift.Int) -> Foundation.Data
  final public func last() -> Foundation.Data
  final public func lastIndexOf(item: Foundation.Data, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Foundation.Data>>
  open class func of(_ items: Foundation.Data...) -> SAPOData.BinaryList
  open func reversed() -> SAPOData.BinaryList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.BinaryList
  final public func single() -> Foundation.Data
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.BinaryList
  final public func sort(by increasing: @escaping (Foundation.Data, Foundation.Data) -> Swift.Bool)
  final public func sorted() -> SAPOData.BinaryList
  final public func sorted(by increasing: @escaping (Foundation.Data, Foundation.Data) -> Swift.Bool) -> SAPOData.BinaryList
  open class func split(_ value: Foundation.Data, separator: Foundation.Data, limit: Swift.Int = (2147483647 as Int)) -> SAPOData.BinaryList
  open func toArray() -> Swift.Array<Foundation.Data>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Foundation.Data)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Foundation.Data>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Foundation.Data>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BinaryValue : SAPOData.DataValue {
  public static let empty: SAPOData.BinaryValue
  open class func compare(_ left: SAPOData.BinaryValue, _ right: SAPOData.BinaryValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.BinaryValue?, _ right: SAPOData.BinaryValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Foundation.Data) -> SAPOData.BinaryValue
  open class func of(optional value: Foundation.Data?) -> SAPOData.BinaryValue?
  open class func optional(_ value: Swift.AnyObject?) -> Foundation.Data?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Foundation.Data
  open var value: Foundation.Data {
    get
  }
  @objc deinit
}
public protocol BindingPath : AnyObject {
}
@_inheritsConvenienceInitializers open class BooleanList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Bool {
    get
    set
  }
  public static let empty: SAPOData.BooleanList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Bool)
  final public func append(contentsOf list: SAPOData.BooleanList)
  final public func appendThis(_ item: Swift.Bool) -> SAPOData.BooleanList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.BooleanList
  final public func filter(_ predicate: @escaping (Swift.Bool) -> Swift.Bool) -> SAPOData.BooleanList
  final public func first() -> Swift.Bool
  open class func fromArray(_ array: Swift.Array<Swift.Bool>) -> SAPOData.BooleanList
  final public func includes(item: Swift.Bool) -> Swift.Bool
  final public func indexOf(item: Swift.Bool, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Bool)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.BooleanList)
  final public func item(at index: Swift.Int) -> Swift.Bool
  final public func last() -> Swift.Bool
  final public func lastIndexOf(item: Swift.Bool, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Bool>>
  open class func of(_ items: Swift.Bool...) -> SAPOData.BooleanList
  open func reversed() -> SAPOData.BooleanList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.BooleanList
  final public func single() -> Swift.Bool
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.BooleanList
  final public func sort(by increasing: @escaping (Swift.Bool, Swift.Bool) -> Swift.Bool)
  final public func sorted() -> SAPOData.BooleanList
  final public func sorted(by increasing: @escaping (Swift.Bool, Swift.Bool) -> Swift.Bool) -> SAPOData.BooleanList
  open func toArray() -> Swift.Array<Swift.Bool>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Swift.Bool)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Bool>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Bool>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BooleanValue : SAPOData.DataValue {
  open class func compare(_ left: SAPOData.BooleanValue, _ right: SAPOData.BooleanValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.BooleanValue?, _ right: SAPOData.BooleanValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Bool) -> SAPOData.BooleanValue
  open class func of(optional value: Swift.Bool?) -> SAPOData.BooleanValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Bool?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Bool
  @inline(__always) final public var value: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BottomTransform : SAPOData.AmountTransform {
  open class func count(amount: Swift.Int, value: SAPOData.DataValue) throws -> SAPOData.BottomTransform
  open class func percent(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.BottomTransform
  open class func sum(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.BottomTransform
  @objc deinit
}
@_inheritsConvenienceInitializers open class ByteList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.ByteList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Int)
  final public func append(contentsOf list: SAPOData.ByteList)
  final public func appendThis(_ item: Swift.Int) -> SAPOData.ByteList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.ByteList
  final public func filter(_ predicate: @escaping (Swift.Int) -> Swift.Bool) -> SAPOData.ByteList
  final public func first() -> Swift.Int
  open class func fromArray(_ array: Swift.Array<Swift.Int>) -> SAPOData.ByteList
  final public func includes(item: Swift.Int) -> Swift.Bool
  final public func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Int)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ByteList)
  final public func item(at index: Swift.Int) -> Swift.Int
  open func join() -> Foundation.Data
  final public func last() -> Swift.Int
  final public func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func of(_ items: Swift.Int...) -> SAPOData.ByteList
  open func reversed() -> SAPOData.ByteList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ByteList
  final public func single() -> Swift.Int
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ByteList
  final public func sort(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool)
  final public func sorted() -> SAPOData.ByteList
  final public func sorted(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool) -> SAPOData.ByteList
  open func toArray() -> Swift.Array<Swift.Int>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Swift.Int)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class ByteStream : SAPOData.StreamBase {
  public static let empty: SAPOData.ByteStream
  public static let none: SAPOData.ByteStream
  override public init()
  open func allowReadBinaryToReuseBufferInternalArray()
  open func asText() -> SAPOData.CharStream
  open var canUndo: Swift.Bool {
    get
  }
  override open func close() throws
  open func copyTo(target: SAPOData.ByteStream, closeTarget: Swift.Bool = true) throws
  open func copyToFile(_ file: Swift.String) throws
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func fileWriter(file: Swift.String) throws -> SAPOData.ByteStream
  open class func fromBinary(data: Foundation.Data, offset: Swift.Int = (0 as Int), length: Swift.Int = (2147483647 as Int)) -> SAPOData.ByteStream
  open class func fromFile(_ file: Swift.String) throws -> SAPOData.ByteStream
  open class func fromStream(_ stream: SAPOData.StreamBase) -> SAPOData.ByteStream
  open class func fromText(stream: SAPOData.CharStream) -> SAPOData.ByteStream
  open func readAndClose() throws -> Foundation.Data
  open func readBinary(length: Swift.Int = (20000 as Int)) throws -> Foundation.Data?
  open func readByte() throws -> Swift.Int
  open class func toBuffer(_ buffer: SAPOData.ByteBuffer) -> SAPOData.ByteStream
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open func undoRead(_ value: Swift.Int) throws
  open func withType(_ type: Swift.String?) -> SAPOData.ByteStream
  open func withUndo() throws -> SAPOData.ByteStream
  open func writeBinary(data: Foundation.Data) throws
  open func writeByte(_ value: Swift.Int) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ByteValue : SAPOData.DataValue {
  public static let zero: SAPOData.ByteValue
  open class func compare(_ left: SAPOData.ByteValue, _ right: SAPOData.ByteValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.ByteValue?, _ right: SAPOData.ByteValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.ByteValue
  open class func of(optional value: Swift.Int?) -> SAPOData.ByteValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  @inline(__always) final public var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CancelToken : SAPOData.ObjectBase {
  override public init()
  open func addListener(_ listener: SAPOData.CancellationListener)
  open func cancel()
  open var isCancelled: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CancellationListener : SAPOData.ObjectBase {
  override public init()
  open func onCancel(token: SAPOData.CancelToken) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class CancellationListenerList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.CancellationListener {
    get
    set
  }
  public static let empty: SAPOData.CancellationListenerList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.CancellationListener)
  final public func append(contentsOf list: SAPOData.CancellationListenerList)
  final public func appendThis(_ item: SAPOData.CancellationListener) -> SAPOData.CancellationListenerList
  final public func copy() -> SAPOData.CancellationListenerList
  final public func filter(_ predicate: @escaping (SAPOData.CancellationListener) -> Swift.Bool) -> SAPOData.CancellationListenerList
  final public func first() -> SAPOData.CancellationListener
  open class func fromArray(_ array: Swift.Array<SAPOData.CancellationListener>) -> SAPOData.CancellationListenerList
  final public func includes(item: SAPOData.CancellationListener) -> Swift.Bool
  final public func indexOf(item: SAPOData.CancellationListener, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.CancellationListener)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.CancellationListenerList)
  final public func item(at index: Swift.Int) -> SAPOData.CancellationListener
  final public func last() -> SAPOData.CancellationListener
  final public func lastIndexOf(item: SAPOData.CancellationListener, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.CancellationListener>>
  open class func of(_ items: SAPOData.CancellationListener...) -> SAPOData.CancellationListenerList
  open func reversed() -> SAPOData.CancellationListenerList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.CancellationListenerList
  final public func single() -> SAPOData.CancellationListener
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CancellationListenerList
  final public func sort(by increasing: @escaping (SAPOData.CancellationListener, SAPOData.CancellationListener) -> Swift.Bool)
  final public func sorted() -> SAPOData.CancellationListenerList
  final public func sorted(by increasing: @escaping (SAPOData.CancellationListener, SAPOData.CancellationListener) -> Swift.Bool) -> SAPOData.CancellationListenerList
  open func toArray() -> Swift.Array<SAPOData.CancellationListener>
  final public func update(at index: Swift.Int, item: SAPOData.CancellationListener)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.CancellationListener>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.CancellationListener>>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChangeFlags {
  public static let allFlags: (Swift.Int)
  public static let forCreate: (Swift.Int)
  public static let forUpdate: (Swift.Int)
  public static let withCreate: (Swift.Int)
  public static let withUpdate: (Swift.Int)
  public static let deepCreate: (Swift.Int)
  public static let deepUpdate: (Swift.Int)
  public static let deepUpdateDelta: (Swift.Int)
  public static let deepUpdateParent: (Swift.Int)
  public static let deepUpdateChild: (Swift.Int)
  public static let unboundAndDeleted: (Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class ChangedLink : SAPOData.ObjectBase {
  final public var deltaTime: SAPOData.GlobalDateTime?
  final public var isCreated: Swift.Bool
  final public var isUpdated: Swift.Bool
  final public var isDeleted: Swift.Bool
  override public init()
  final public var source: SAPOData.EntityValue {
    get
    set(value)
  }
  final public var sourceProperty: SAPOData.Property {
    get
    set(value)
  }
  final public var target: SAPOData.EntityValue {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class ChangedLinkList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ChangedLink {
    get
    set
  }
  public static let empty: SAPOData.ChangedLinkList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.ChangedLink)
  final public func append(contentsOf list: SAPOData.ChangedLinkList)
  final public func appendThis(_ item: SAPOData.ChangedLink) -> SAPOData.ChangedLinkList
  final public func copy() -> SAPOData.ChangedLinkList
  final public func filter(_ predicate: @escaping (SAPOData.ChangedLink) -> Swift.Bool) -> SAPOData.ChangedLinkList
  final public func first() -> SAPOData.ChangedLink
  open class func fromArray(_ array: Swift.Array<SAPOData.ChangedLink>) -> SAPOData.ChangedLinkList
  final public func includes(item: SAPOData.ChangedLink) -> Swift.Bool
  final public func indexOf(item: SAPOData.ChangedLink, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.ChangedLink)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ChangedLinkList)
  final public func item(at index: Swift.Int) -> SAPOData.ChangedLink
  final public func last() -> SAPOData.ChangedLink
  final public func lastIndexOf(item: SAPOData.ChangedLink, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ChangedLink>>
  open class func of(_ items: SAPOData.ChangedLink...) -> SAPOData.ChangedLinkList
  open func reversed() -> SAPOData.ChangedLinkList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ChangedLinkList
  final public func single() -> SAPOData.ChangedLink
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ChangedLinkList
  final public func sort(by increasing: @escaping (SAPOData.ChangedLink, SAPOData.ChangedLink) -> Swift.Bool)
  final public func sorted() -> SAPOData.ChangedLinkList
  final public func sorted(by increasing: @escaping (SAPOData.ChangedLink, SAPOData.ChangedLink) -> Swift.Bool) -> SAPOData.ChangedLinkList
  open func toArray() -> Swift.Array<SAPOData.ChangedLink>
  final public func update(at index: Swift.Int, item: SAPOData.ChangedLink)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ChangedLink>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ChangedLink>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class CharList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Foundation.unichar {
    get
    set
  }
  public static let empty: SAPOData.CharList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Foundation.unichar)
  final public func append(contentsOf list: SAPOData.CharList)
  final public func appendThis(_ item: Foundation.unichar) -> SAPOData.CharList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.CharList
  final public func filter(_ predicate: @escaping (Foundation.unichar) -> Swift.Bool) -> SAPOData.CharList
  final public func first() -> Foundation.unichar
  open class func fromArray(_ array: Swift.Array<Foundation.unichar>) -> SAPOData.CharList
  final public func includes(item: Foundation.unichar) -> Swift.Bool
  final public func indexOf(item: Foundation.unichar, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Foundation.unichar)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.CharList)
  final public func item(at index: Swift.Int) -> Foundation.unichar
  open func join() -> Swift.String
  final public func last() -> Foundation.unichar
  final public func lastIndexOf(item: Foundation.unichar, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Foundation.unichar>>
  open class func of(_ items: Foundation.unichar...) -> SAPOData.CharList
  open func reversed() -> SAPOData.CharList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.CharList
  final public func single() -> Foundation.unichar
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CharList
  final public func sort(by increasing: @escaping (Foundation.unichar, Foundation.unichar) -> Swift.Bool)
  final public func sorted() -> SAPOData.CharList
  final public func sorted(by increasing: @escaping (Foundation.unichar, Foundation.unichar) -> Swift.Bool) -> SAPOData.CharList
  open func toArray() -> Swift.Array<Foundation.unichar>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Foundation.unichar)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Foundation.unichar>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Foundation.unichar>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class CharStream : SAPOData.StreamBase {
  public static let empty: SAPOData.CharStream
  public static let none: SAPOData.CharStream
  override public init()
  open var canUndo: Swift.Bool {
    get
  }
  open func copyTo(target: SAPOData.CharStream, closeTarget: Swift.Bool = true) throws
  open func copyToFile(_ file: Swift.String) throws
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func fileWriter(file: Swift.String) throws -> SAPOData.CharStream
  open class func fromFile(_ file: Swift.String) throws -> SAPOData.CharStream
  open class func fromStream(_ stream: SAPOData.StreamBase) -> SAPOData.CharStream
  open class func fromString(text: Swift.String, offset: Swift.Int = (0 as Int), length: Swift.Int = (2147483647 as Int)) -> SAPOData.CharStream
  open func readAndClose() throws -> Swift.String
  open func readChar() throws -> Swift.Int
  open func readLine() throws -> Swift.String?
  open func readString(length: Swift.Int = (20000 as Int)) throws -> Swift.String?
  open class func toBuffer(_ buffer: SAPOData.CharBuffer) -> SAPOData.CharStream
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open func undoRead(_ value: Foundation.unichar) throws
  open func withType(_ type: Swift.String?) -> SAPOData.CharStream
  open func withUndo() throws -> SAPOData.CharStream
  open func writeChar(_ value: Foundation.unichar) throws
  open func writeLine(text: Swift.String) throws
  open func writeString(text: Swift.String) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CharValue : SAPOData.DataValue {
  open class func compare(_ left: SAPOData.CharValue?, _ right: SAPOData.CharValue?) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.CharValue?, _ right: SAPOData.CharValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Foundation.unichar) -> SAPOData.CharValue
  open class func of(optional value: Foundation.unichar?) -> SAPOData.CharValue?
  open class func optional(_ value: Swift.AnyObject?) -> Foundation.unichar?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Foundation.unichar
  @inline(__always) final public var value: Foundation.unichar {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ComplexType : SAPOData.StructureType {
  public static let undefined: SAPOData.ComplexType
  public static let abstractBase: SAPOData.ComplexType
  final public var subtypes: SAPOData.ComplexTypeList?
  override public init()
  override open var code: Swift.Int {
    get
  }
  override open var hasSubtypes: Swift.Bool {
    get
  }
  override open var hasSupertype: Swift.Bool {
    get
  }
  open func inheritsFrom(other: SAPOData.ComplexType) -> Swift.Bool
  open func registerFactory(_ factory: SAPOData.ObjectFactory)
  open var supertype: SAPOData.ComplexType? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open func withFactory(_ factory: SAPOData.ObjectFactory) -> SAPOData.ComplexType
  @objc deinit
}
@_inheritsConvenienceInitializers open class ComplexTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ComplexType {
    get
    set
  }
  public static let empty: SAPOData.ComplexTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.ComplexType)
  final public func append(contentsOf list: SAPOData.ComplexTypeList)
  final public func appendThis(_ item: SAPOData.ComplexType) -> SAPOData.ComplexTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.ComplexTypeList
  final public func filter(_ predicate: @escaping (SAPOData.ComplexType) -> Swift.Bool) -> SAPOData.ComplexTypeList
  final public func first() -> SAPOData.ComplexType
  open class func fromArray(_ array: Swift.Array<SAPOData.ComplexType>) -> SAPOData.ComplexTypeList
  final public func includes(item: SAPOData.ComplexType) -> Swift.Bool
  final public func indexOf(item: SAPOData.ComplexType, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.ComplexType)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexTypeList)
  final public func item(at index: Swift.Int) -> SAPOData.ComplexType
  final public func last() -> SAPOData.ComplexType
  final public func lastIndexOf(item: SAPOData.ComplexType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexType>>
  open class func of(_ items: SAPOData.ComplexType...) -> SAPOData.ComplexTypeList
  open func reversed() -> SAPOData.ComplexTypeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexTypeList
  final public func single() -> SAPOData.ComplexType
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexTypeList
  final public func sort(by increasing: @escaping (SAPOData.ComplexType, SAPOData.ComplexType) -> Swift.Bool)
  final public func sorted() -> SAPOData.ComplexTypeList
  final public func sorted(by increasing: @escaping (SAPOData.ComplexType, SAPOData.ComplexType) -> Swift.Bool) -> SAPOData.ComplexTypeList
  open func toArray() -> Swift.Array<SAPOData.ComplexType>
  final public func update(at index: Swift.Int, item: SAPOData.ComplexType)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexType>>
  @objc deinit
}
open class ComplexTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.ComplexTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.ComplexType)
  open class func concurrent() -> SAPOData.ComplexTypeMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.ComplexTypeMap
  open func entries() -> SAPOData.ComplexTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.ComplexTypeMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.ComplexType
  open func sortedEntries() -> SAPOData.ComplexTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.ComplexTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.ComplexType)
  open func updateThis(key: Swift.String, value: SAPOData.ComplexType) -> SAPOData.ComplexTypeMap
  open func updateValue(_ value: SAPOData.ComplexType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.ComplexType?
  open func values() -> SAPOData.ComplexTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.ComplexType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.ComplexTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.ComplexTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.ComplexTypeMap.Entry)
    final public func append(contentsOf list: SAPOData.ComplexTypeMap.EntryList)
    final public func appendThis(_ item: SAPOData.ComplexTypeMap.Entry) -> SAPOData.ComplexTypeMap.EntryList
    final public func copy() -> SAPOData.ComplexTypeMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.ComplexTypeMap.Entry) -> Swift.Bool) -> SAPOData.ComplexTypeMap.EntryList
    final public func first() -> SAPOData.ComplexTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.ComplexTypeMap.Entry>) -> SAPOData.ComplexTypeMap.EntryList
    final public func includes(item: SAPOData.ComplexTypeMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.ComplexTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.ComplexTypeMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexTypeMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.ComplexTypeMap.Entry
    final public func last() -> SAPOData.ComplexTypeMap.Entry
    final public func lastIndexOf(item: SAPOData.ComplexTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexTypeMap.Entry>>
    open class func of(_ items: SAPOData.ComplexTypeMap.Entry...) -> SAPOData.ComplexTypeMap.EntryList
    open func reversed() -> SAPOData.ComplexTypeMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexTypeMap.EntryList
    final public func single() -> SAPOData.ComplexTypeMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexTypeMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.ComplexTypeMap.Entry, SAPOData.ComplexTypeMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.ComplexTypeMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.ComplexTypeMap.Entry, SAPOData.ComplexTypeMap.Entry) -> Swift.Bool) -> SAPOData.ComplexTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.ComplexTypeMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.ComplexTypeMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexTypeMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
open class ComplexValue : SAPOData.StructureBase, SAPOData.ComplexValueOrList {
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public init(withDefaults: Swift.Bool = false, type: SAPOData.ComplexType? = nil, withIndexMap: SAPOData.SparseIndexMap? = nil)
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.ComplexValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.ComplexValue
  final public var complexType: SAPOData.ComplexType {
    get
  }
  open func copyComplex() -> SAPOData.ComplexValue
  open func copyProperties(from: SAPOData.ComplexValue)
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.ComplexValue?, b: SAPOData.ComplexValue?) -> Swift.Bool
  open class func ofType(_ type: SAPOData.ComplexType, sparse: SAPOData.SparseIndexMap? = nil) -> SAPOData.ComplexValue
  final public var oldComplex: SAPOData.ComplexValue? {
    get
    set(value)
  }
  override open var structureType: SAPOData.StructureType {
    get
  }
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ComplexValueList : SAPOData.ListBase, Swift.Codable, SAPOData.ComplexValueOrList, Swift.Sequence {
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public subscript(index: Swift.Int) -> SAPOData.ComplexValue {
    get
    set
  }
  public static let empty: SAPOData.ComplexValueList
  final public var isReference: Swift.Bool
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  final public var totalCount: Swift.Int64?
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.ComplexValue)
  final public func append(contentsOf list: SAPOData.ComplexValueList)
  open func appendOptional(_ item: SAPOData.ComplexValue?) -> SAPOData.ComplexValueList
  final public func appendThis(_ item: SAPOData.ComplexValue) -> SAPOData.ComplexValueList
  open func applyPageSize(query: SAPOData.DataQuery) -> SAPOData.ComplexValueList
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.ComplexValueList
  final public func copy() -> SAPOData.ComplexValueList
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.ComplexValueList?, b: SAPOData.ComplexValueList?) -> Swift.Bool
  final public func filter(_ predicate: @escaping (SAPOData.ComplexValue) -> Swift.Bool) -> SAPOData.ComplexValueList
  open func filterAndSort(query: SAPOData.DataQuery) throws -> SAPOData.ComplexValueList
  open func filterWithQuery(_ query: SAPOData.DataQuery) throws -> SAPOData.ComplexValueList
  final public func first() -> SAPOData.ComplexValue
  open class func fromArray(_ array: Swift.Array<SAPOData.ComplexValue>) -> SAPOData.ComplexValueList
  open class func fromNullable(_ array: Swift.Array<SAPOData.ComplexValue?>) -> SAPOData.ComplexValueList
  open class func fromOptional(_ array: Swift.Array<SAPOData.ComplexValue?>) -> SAPOData.ComplexValueList
  final public func includes(item: SAPOData.ComplexValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.ComplexValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.ComplexValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexValueList)
  final public func item(at index: Swift.Int) -> SAPOData.ComplexValue
  final public func last() -> SAPOData.ComplexValue
  final public func lastIndexOf(item: SAPOData.ComplexValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue>>
  open class func of(_ items: SAPOData.ComplexValue...) -> SAPOData.ComplexValueList
  open func optionalItem(at index: Swift.Int) -> SAPOData.ComplexValue?
  open func reversed() -> SAPOData.ComplexValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueList
  open class func shareOptional(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueList
  final public func single() -> SAPOData.ComplexValue
  open func skipAndTop(query: SAPOData.DataQuery) -> SAPOData.ComplexValueList
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexValueList
  final public func sort(by increasing: @escaping (SAPOData.ComplexValue, SAPOData.ComplexValue) -> Swift.Bool)
  open func sortWithQuery(_ query: SAPOData.DataQuery) throws
  final public func sorted() -> SAPOData.ComplexValueList
  final public func sorted(by increasing: @escaping (SAPOData.ComplexValue, SAPOData.ComplexValue) -> Swift.Bool) -> SAPOData.ComplexValueList
  open func toArray() -> Swift.Array<SAPOData.ComplexValue>
  final public func update(at index: Swift.Int, item: SAPOData.ComplexValue)
  open func updateOptional(at index: Swift.Int, item: SAPOData.ComplexValue?)
  open func withItemType(_ type: SAPOData.DataType) -> SAPOData.ComplexValueList
  open func withNulls() -> SAPOData.ComplexValueListWithNulls
  open func withType(_ type: SAPOData.DataType) -> SAPOData.ComplexValueList
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class ComplexValueListWithNulls : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ComplexValue? {
    get
    set
  }
  public static let empty: SAPOData.ComplexValueListWithNulls
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.ComplexValue?)
  final public func append(contentsOf list: SAPOData.ComplexValueListWithNulls)
  final public func appendThis(_ item: SAPOData.ComplexValue?) -> SAPOData.ComplexValueListWithNulls
  final public func copy() -> SAPOData.ComplexValueListWithNulls
  final public func filter(_ predicate: @escaping (SAPOData.ComplexValue?) -> Swift.Bool) -> SAPOData.ComplexValueListWithNulls
  final public func first() -> SAPOData.ComplexValue?
  open class func fromArray(_ array: Swift.Array<SAPOData.ComplexValue?>) -> SAPOData.ComplexValueListWithNulls
  final public func includes(item: SAPOData.ComplexValue?) -> Swift.Bool
  final public func indexOf(item: SAPOData.ComplexValue?, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.ComplexValue?)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexValueListWithNulls)
  final public func item(at index: Swift.Int) -> SAPOData.ComplexValue?
  final public func last() -> SAPOData.ComplexValue?
  final public func lastIndexOf(item: SAPOData.ComplexValue?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue?>>
  open class func of(_ items: SAPOData.ComplexValue?...) -> SAPOData.ComplexValueListWithNulls
  open func reversed() -> SAPOData.ComplexValueListWithNulls
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueListWithNulls
  final public func single() -> SAPOData.ComplexValue?
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexValueListWithNulls
  final public func sort(by increasing: @escaping (SAPOData.ComplexValue?, SAPOData.ComplexValue?) -> Swift.Bool)
  final public func sorted() -> SAPOData.ComplexValueListWithNulls
  final public func sorted(by increasing: @escaping (SAPOData.ComplexValue?, SAPOData.ComplexValue?) -> Swift.Bool) -> SAPOData.ComplexValueListWithNulls
  open func toArray() -> Swift.Array<SAPOData.ComplexValue?>
  final public func update(at index: Swift.Int, item: SAPOData.ComplexValue?)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue?>>
  @objc deinit
}
open class ComplexValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.ComplexValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.ComplexValueMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.ComplexValueMap
  open func entries() -> SAPOData.ComplexValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.ComplexValueMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.ComplexValue
  open func sortedEntries() -> SAPOData.ComplexValueMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.ComplexValueList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.ComplexValue)
  open func updateThis(key: Swift.String, value: SAPOData.ComplexValue) -> SAPOData.ComplexValueMap
  open func updateValue(_ value: SAPOData.ComplexValue, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.ComplexValue?
  open func values() -> SAPOData.ComplexValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.ComplexValue {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.ComplexValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.ComplexValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.ComplexValueMap.Entry)
    final public func append(contentsOf list: SAPOData.ComplexValueMap.EntryList)
    final public func appendThis(_ item: SAPOData.ComplexValueMap.Entry) -> SAPOData.ComplexValueMap.EntryList
    final public func copy() -> SAPOData.ComplexValueMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.ComplexValueMap.Entry) -> Swift.Bool) -> SAPOData.ComplexValueMap.EntryList
    final public func first() -> SAPOData.ComplexValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.ComplexValueMap.Entry>) -> SAPOData.ComplexValueMap.EntryList
    final public func includes(item: SAPOData.ComplexValueMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.ComplexValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.ComplexValueMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexValueMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.ComplexValueMap.Entry
    final public func last() -> SAPOData.ComplexValueMap.Entry
    final public func lastIndexOf(item: SAPOData.ComplexValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValueMap.Entry>>
    open class func of(_ items: SAPOData.ComplexValueMap.Entry...) -> SAPOData.ComplexValueMap.EntryList
    open func reversed() -> SAPOData.ComplexValueMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueMap.EntryList
    final public func single() -> SAPOData.ComplexValueMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexValueMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.ComplexValueMap.Entry, SAPOData.ComplexValueMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.ComplexValueMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.ComplexValueMap.Entry, SAPOData.ComplexValueMap.Entry) -> Swift.Bool) -> SAPOData.ComplexValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.ComplexValueMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.ComplexValueMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValueMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
public protocol ComplexValueOrList : AnyObject {
}
@_inheritsConvenienceInitializers open class ConvertDataValue : SAPOData.ObjectBase {
  override public init()
  open class func toJSON(_ value: Swift.AnyObject?) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class CustomPath : SAPOData.ObjectBase {
  final public var atomElement: Swift.String
  final public var atomChild: Swift.String?
  final public var keepInContent: Swift.Bool
  override public init()
  open class func fromTarget(path: Swift.String) -> SAPOData.CustomPath?
  final public var myProperty: SAPOData.Property {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CustomPathList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.CustomPath {
    get
    set
  }
  public static let empty: SAPOData.CustomPathList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.CustomPath)
  final public func append(contentsOf list: SAPOData.CustomPathList)
  final public func appendThis(_ item: SAPOData.CustomPath) -> SAPOData.CustomPathList
  final public func copy() -> SAPOData.CustomPathList
  final public func filter(_ predicate: @escaping (SAPOData.CustomPath) -> Swift.Bool) -> SAPOData.CustomPathList
  final public func first() -> SAPOData.CustomPath
  open class func fromArray(_ array: Swift.Array<SAPOData.CustomPath>) -> SAPOData.CustomPathList
  final public func includes(item: SAPOData.CustomPath) -> Swift.Bool
  final public func indexOf(item: SAPOData.CustomPath, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.CustomPath)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.CustomPathList)
  final public func item(at index: Swift.Int) -> SAPOData.CustomPath
  final public func last() -> SAPOData.CustomPath
  final public func lastIndexOf(item: SAPOData.CustomPath, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.CustomPath>>
  open class func of(_ items: SAPOData.CustomPath...) -> SAPOData.CustomPathList
  open func reversed() -> SAPOData.CustomPathList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.CustomPathList
  final public func single() -> SAPOData.CustomPath
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CustomPathList
  final public func sort(by increasing: @escaping (SAPOData.CustomPath, SAPOData.CustomPath) -> Swift.Bool)
  final public func sorted() -> SAPOData.CustomPathList
  final public func sorted(by increasing: @escaping (SAPOData.CustomPath, SAPOData.CustomPath) -> Swift.Bool) -> SAPOData.CustomPathList
  open func toArray() -> Swift.Array<SAPOData.CustomPath>
  final public func update(at index: Swift.Int, item: SAPOData.CustomPath)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.CustomPath>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.CustomPath>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataComparer : SAPOData.Comparer {
  public static let singleton: SAPOData.Comparer
  override open func compare(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataEquality : SAPOData.Equality {
  public static let singleton: SAPOData.Equality
  override open func equal(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataError : SAPOData.ErrorBase {
  final public var safeMessage: Swift.Bool
  override public init()
  open func safe() -> SAPOData.DataError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataFormat {
  public static let atom: (Swift.Int)
  public static let json: (Swift.Int)
  public static let html: (Swift.Int)
  public static let text: (Swift.Int)
  public static let xml: (Swift.Int)
  public static let xmlc: (Swift.Int)
  public static func mediaType(format: Swift.Int) -> Swift.String
  public static func name(format: Swift.Int) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataFormatError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataInternal {
  public static let mediaPropertyId: (Swift.Int)
  public static let mediaPropertyEtagId: (Swift.Int)
  public static let mediaPropertyTypeId: (Swift.Int)
  public static let streamPropertyMinEtagId: (Swift.Int)
  public static let streamPropertyMaxEtagId: (Swift.Int)
  public static let streamPropertyMinTypeId: (Swift.Int)
  public static let streamPropertyMaxTypeId: (Swift.Int)
  public static let xsVersion: Swift.String
  public static func canDeferSnapshot(selectItems: SAPOData.SelectItemList) -> Swift.Bool
  public static func checkETag(_ tag: Swift.String?) -> Swift.Bool
  public static func defaultForDataType(_ type: SAPOData.DataType) -> SAPOData.DataValue?
  public static func defaultForProperty(_ property: SAPOData.Property, required: Swift.Bool = true) -> SAPOData.DataValue?
  public static func fixInferred(structure: SAPOData.StructureBase)
  public static func generateETag() -> Swift.String
  public static func immortalizeItems(list: SAPOData.UntypedList)
  public static func immortalizeListAndItems(list: SAPOData.ListBase)
  public static func immortalizeMapAndValues(map: SAPOData.MapBase)
  public static func immortalizeSetAndValues(set: SAPOData.SetBase)
  public static func lockDisable(structure: SAPOData.StructureBase) -> Swift.Bool
  public static func lockEnable(structure: SAPOData.StructureBase)
  public static func lockRestore(structure: SAPOData.StructureBase, enabled: Swift.Bool)
  public static func odataTypeName(type: SAPOData.DataType, dataVersion: Swift.Int, edmPrefix: Swift.Bool, hashPrefix: Swift.Bool) -> Swift.String
  public static func offlineDeepCreate(entity: SAPOData.EntityValue) -> Swift.Bool
  public static func queryResult(query: SAPOData.DataQuery, result: Swift.AnyObject?) -> SAPOData.QueryResult
  public static func referentialConstraintsIncludingNavigationKeyPaths(property: SAPOData.Property) -> SAPOData.StringMap
  public static func setDefaultKeys(entity: SAPOData.EntityValue)
  public static func setOfflineState(entity: SAPOData.EntityValue, state: Swift.Int)
  public static func setOldProperty(inProperty: SAPOData.Property, toProperty: SAPOData.Property)
  public static func setReferentialConstraintsIncludingNavigationKeyPaths(property: SAPOData.Property, constraints: SAPOData.StringMap)
  public static func setStructuralPropertyIDs(type: SAPOData.StructureType)
  public static func setupEnumCache(type: SAPOData.EnumType)
  public static func structuralPropertyIDs(type: SAPOData.StructureType) -> SAPOData.IntArray
  public static func structureData(structure: SAPOData.StructureBase) -> SAPOData.StructureData
  public static func structureHas(structure: SAPOData.StructureBase) -> SAPOData.BooleanArray
  public static func useUntypedList(_ list: SAPOData.ListBase, untyped: SAPOData.UntypedList)
  public static func withoutLock(structure: SAPOData.StructureBase, action: @escaping () -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethod : SAPOData.ObjectBase {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var localName: Swift.String
  final public var mangledName: Swift.String
  final public var qualifiedName: Swift.String
  final public var resourcePath: Swift.String
  final public var targetPath: Swift.String
  final public var unboundMethod: Swift.String?
  final public var isExtension: Swift.Bool
  final public var entitySet: SAPOData.EntitySet?
  final public var httpMethod: Swift.String?
  final public var sourceLine: (Swift.Int)
  final public var isImported: Swift.Bool
  final public var isFunction: Swift.Bool
  final public var isAction: Swift.Bool
  final public var isBound: Swift.Bool
  final public var isComposable: Swift.Bool
  final public var isUnicode: Swift.Bool
  final public var minLength: (Swift.Int)
  final public var maxLength: (Swift.Int)
  final public var precision: (Swift.Int)
  final public var scale: (Swift.Int)
  final public var srid: (Swift.Int)
  final public var isOptional: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var fixedLength: Swift.Bool {
    get
  }
  open var importedName: Swift.String {
    get
  }
  open var isOverloaded: Swift.Bool {
    get
  }
  @inline(__always) final public var metrics: SAPOData.DataMethodMetrics {
    get
  }
  open var name: Swift.String {
    get
  }
  open func overload(name: Swift.String) -> SAPOData.DataMethod
  @inline(__always) final public var overloadMap: SAPOData.DataMethodMap {
    get
  }
  final public var parameters: SAPOData.ParameterList {
    get
    set(value)
  }
  @inline(__always) final public var returnAnnotations: SAPOData.AnnotationMap {
    get
  }
  final public var returnType: SAPOData.DataType {
    get
    set(value)
  }
  open var signatureForParameters: Swift.String {
    get
  }
  open var signatureForReturnType: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  open var typeSignature: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethodCall : SAPOData.ObjectBase {
  override public init()
  open class func apply(method: SAPOData.DataMethod, parameters: SAPOData.ParameterList) -> SAPOData.DataMethodCall
  final public var method: SAPOData.DataMethod {
    get
    set(value)
  }
  final public var parameters: SAPOData.ParameterList {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethodList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataMethod {
    get
    set
  }
  public static let empty: SAPOData.DataMethodList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.DataMethod)
  final public func append(contentsOf list: SAPOData.DataMethodList)
  final public func appendThis(_ item: SAPOData.DataMethod) -> SAPOData.DataMethodList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.DataMethodList
  final public func filter(_ predicate: @escaping (SAPOData.DataMethod) -> Swift.Bool) -> SAPOData.DataMethodList
  final public func first() -> SAPOData.DataMethod
  open class func fromArray(_ array: Swift.Array<SAPOData.DataMethod>) -> SAPOData.DataMethodList
  final public func includes(item: SAPOData.DataMethod) -> Swift.Bool
  final public func indexOf(item: SAPOData.DataMethod, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DataMethod)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMethodList)
  final public func item(at index: Swift.Int) -> SAPOData.DataMethod
  final public func last() -> SAPOData.DataMethod
  final public func lastIndexOf(item: SAPOData.DataMethod, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMethod>>
  open class func of(_ items: SAPOData.DataMethod...) -> SAPOData.DataMethodList
  open func reversed() -> SAPOData.DataMethodList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMethodList
  final public func single() -> SAPOData.DataMethod
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMethodList
  final public func sort(by increasing: @escaping (SAPOData.DataMethod, SAPOData.DataMethod) -> Swift.Bool)
  final public func sorted() -> SAPOData.DataMethodList
  final public func sorted(by increasing: @escaping (SAPOData.DataMethod, SAPOData.DataMethod) -> Swift.Bool) -> SAPOData.DataMethodList
  open func toArray() -> Swift.Array<SAPOData.DataMethod>
  final public func update(at index: Swift.Int, item: SAPOData.DataMethod)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethod>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethod>>
  @objc deinit
}
open class DataMethodMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataMethodMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.DataMethod)
  open class func concurrent() -> SAPOData.DataMethodMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.DataMethodMap
  open func entries() -> SAPOData.DataMethodMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.DataMethodMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataMethod
  open func sortedEntries() -> SAPOData.DataMethodMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.DataMethodList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataMethod)
  open func updateThis(key: Swift.String, value: SAPOData.DataMethod) -> SAPOData.DataMethodMap
  open func updateValue(_ value: SAPOData.DataMethod, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataMethod?
  open func values() -> SAPOData.DataMethodList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.DataMethod {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataMethodMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataMethodMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.DataMethodMap.Entry)
    final public func append(contentsOf list: SAPOData.DataMethodMap.EntryList)
    final public func appendThis(_ item: SAPOData.DataMethodMap.Entry) -> SAPOData.DataMethodMap.EntryList
    final public func copy() -> SAPOData.DataMethodMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.DataMethodMap.Entry) -> Swift.Bool) -> SAPOData.DataMethodMap.EntryList
    final public func first() -> SAPOData.DataMethodMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataMethodMap.Entry>) -> SAPOData.DataMethodMap.EntryList
    final public func includes(item: SAPOData.DataMethodMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.DataMethodMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.DataMethodMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMethodMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.DataMethodMap.Entry
    final public func last() -> SAPOData.DataMethodMap.Entry
    final public func lastIndexOf(item: SAPOData.DataMethodMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMethodMap.Entry>>
    open class func of(_ items: SAPOData.DataMethodMap.Entry...) -> SAPOData.DataMethodMap.EntryList
    open func reversed() -> SAPOData.DataMethodMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMethodMap.EntryList
    final public func single() -> SAPOData.DataMethodMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMethodMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.DataMethodMap.Entry, SAPOData.DataMethodMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.DataMethodMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.DataMethodMap.Entry, SAPOData.DataMethodMap.Entry) -> Swift.Bool) -> SAPOData.DataMethodMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataMethodMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.DataMethodMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethodMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethodMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethodMetrics : SAPOData.ObjectBase {
  override public init()
  final public var onlineExecuteMethodTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineMethodResultBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineMethodResultBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlExecuteMethodTime: SAPOData.DataMetric {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMetric : SAPOData.ObjectBase {
  override public init()
  open func add(_ value: Swift.Int64)
  open class func byteInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open var component: Swift.String {
    get
  }
  open class func copyAndResetAll() -> SAPOData.DataMetricList
  open var count: Swift.Int64 {
    get
  }
  open class func createDatabaseTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createIndexTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createLinkTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createMediaTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createTableTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteDatabaseTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteLinkTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteStreamTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadRows(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadTime(component: Swift.String) -> SAPOData.DataMetric
  open class func downloadMediaTime(component: Swift.String) -> SAPOData.DataMetric
  open class func downloadPhaseTime(component: Swift.String) -> SAPOData.DataMetric
  open class func downloadStreamTime(component: Swift.String) -> SAPOData.DataMetric
  open class func entityInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func errorInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func errorMetricName(method: Swift.String, error: any Swift.Error) -> Swift.String
  open class func executeMethodTime(component: Swift.String) -> SAPOData.DataMetric
  open class func executeQueryTime(component: Swift.String) -> SAPOData.DataMetric
  open class func fetchMetadataSize(component: Swift.String) -> SAPOData.DataMetric
  open class func fetchMetadataSize_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func fetchMetadataTime(component: Swift.String) -> SAPOData.DataMetric
  open class func followedNextLink(component: Swift.String) -> SAPOData.DataMetric
  open class func initialDownloadBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func initialDownloadBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func initialDownloadRows(component: Swift.String) -> SAPOData.DataMetric
  open class func initialDownloadTime(component: Swift.String) -> SAPOData.DataMetric
  open class func instance(component: Swift.String, metric: Swift.String, unit: Swift.String) -> SAPOData.DataMetric
  open class func linkInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func loadMetadataTime(component: Swift.String) -> SAPOData.DataMetric
  open class func logAll()
  open var maximum: Swift.Int64 {
    get
  }
  open class func methodResultBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func methodResultBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open var metric: Swift.String {
    get
  }
  open var minimum: Swift.Int64 {
    get
  }
  open class func parseMetadataTime(component: Swift.String) -> SAPOData.DataMetric
  open class func pingServerTime(component: Swift.String) -> SAPOData.DataMetric
  open class func queryResultBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func queryResultBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func queryResultRows(component: Swift.String) -> SAPOData.DataMetric
  open class func requestInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open func reset()
  open class func resetAll()
  open class func rowInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func selectEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open var sum: Swift.Int64 {
    get
  }
  open class func timeInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open var unit: Swift.String {
    get
  }
  open class func updateEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func updateLinkTime(component: Swift.String) -> SAPOData.DataMetric
  open class func uploadMediaTime(component: Swift.String) -> SAPOData.DataMetric
  open class func uploadStreamTime(component: Swift.String) -> SAPOData.DataMetric
  open class func uploadTime(component: Swift.String) -> SAPOData.DataMetric
  open class func upsertEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func warningInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open func write(buffer: SAPOData.CharBuffer)
  open class func writeAll(buffer: SAPOData.CharBuffer)
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMetricList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataMetric {
    get
    set
  }
  public static let empty: SAPOData.DataMetricList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.DataMetric)
  final public func append(contentsOf list: SAPOData.DataMetricList)
  final public func appendThis(_ item: SAPOData.DataMetric) -> SAPOData.DataMetricList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.DataMetricList
  final public func filter(_ predicate: @escaping (SAPOData.DataMetric) -> Swift.Bool) -> SAPOData.DataMetricList
  final public func first() -> SAPOData.DataMetric
  open class func fromArray(_ array: Swift.Array<SAPOData.DataMetric>) -> SAPOData.DataMetricList
  final public func includes(item: SAPOData.DataMetric) -> Swift.Bool
  final public func indexOf(item: SAPOData.DataMetric, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DataMetric)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMetricList)
  final public func item(at index: Swift.Int) -> SAPOData.DataMetric
  final public func last() -> SAPOData.DataMetric
  final public func lastIndexOf(item: SAPOData.DataMetric, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMetric>>
  open class func of(_ items: SAPOData.DataMetric...) -> SAPOData.DataMetricList
  open func reversed() -> SAPOData.DataMetricList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMetricList
  final public func single() -> SAPOData.DataMetric
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMetricList
  final public func sort(by increasing: @escaping (SAPOData.DataMetric, SAPOData.DataMetric) -> Swift.Bool)
  final public func sorted() -> SAPOData.DataMetricList
  final public func sorted(by increasing: @escaping (SAPOData.DataMetric, SAPOData.DataMetric) -> Swift.Bool) -> SAPOData.DataMetricList
  open func toArray() -> Swift.Array<SAPOData.DataMetric>
  final public func update(at index: Swift.Int, item: SAPOData.DataMetric)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetric>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetric>>
  @objc deinit
}
open class DataMetricMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataMetricMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.DataMetricMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.DataMetricMap
  open func entries() -> SAPOData.DataMetricMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.DataMetricMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataMetric
  open func sortedEntries() -> SAPOData.DataMetricMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.DataMetricList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataMetric)
  open func updateThis(key: Swift.String, value: SAPOData.DataMetric) -> SAPOData.DataMetricMap
  open func updateValue(_ value: SAPOData.DataMetric, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataMetric?
  open func values() -> SAPOData.DataMetricList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.DataMetric {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataMetricMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataMetricMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.DataMetricMap.Entry)
    final public func append(contentsOf list: SAPOData.DataMetricMap.EntryList)
    final public func appendThis(_ item: SAPOData.DataMetricMap.Entry) -> SAPOData.DataMetricMap.EntryList
    final public func copy() -> SAPOData.DataMetricMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.DataMetricMap.Entry) -> Swift.Bool) -> SAPOData.DataMetricMap.EntryList
    final public func first() -> SAPOData.DataMetricMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataMetricMap.Entry>) -> SAPOData.DataMetricMap.EntryList
    final public func includes(item: SAPOData.DataMetricMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.DataMetricMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.DataMetricMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMetricMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.DataMetricMap.Entry
    final public func last() -> SAPOData.DataMetricMap.Entry
    final public func lastIndexOf(item: SAPOData.DataMetricMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMetricMap.Entry>>
    open class func of(_ items: SAPOData.DataMetricMap.Entry...) -> SAPOData.DataMetricMap.EntryList
    open func reversed() -> SAPOData.DataMetricMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMetricMap.EntryList
    final public func single() -> SAPOData.DataMetricMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMetricMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.DataMetricMap.Entry, SAPOData.DataMetricMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.DataMetricMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.DataMetricMap.Entry, SAPOData.DataMetricMap.Entry) -> Swift.Bool) -> SAPOData.DataMetricMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataMetricMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.DataMetricMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetricMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetricMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataNetworkError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataPath : SAPOData.PropertyPath, SAPOData.BindingPath {
  open func atIndex(_ itemIndex: Swift.Int) -> SAPOData.DataPath
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.DataPath?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.DataPath
  open func changeRoot(newRoot: SAPOData.DataPath) -> SAPOData.DataPath
  override open var dataType: SAPOData.DataType {
    get
  }
  @inline(__always) final public var definedProperty: SAPOData.Property? {
    get
  }
  open func dotString() -> Swift.String
  open func dynamicPath(_ child: Swift.String) -> SAPOData.DataPath
  @inline(__always) final public var dynamicProperty: Swift.String? {
    get
  }
  open var entityKey: SAPOData.EntityKey? {
    get
  }
  open var entitySet: SAPOData.EntitySet? {
    get
  }
  open class func from(_ resource: SAPOData.EntitySet) -> SAPOData.DataPath
  open func hasSegments() -> Swift.Bool
  open var isNavigation: Swift.Bool {
    get
  }
  open func isNavigationProperty(_ property: SAPOData.Property? = nil) -> Swift.Bool
  open func isProperty(_ property: SAPOData.Property? = nil) -> Swift.Bool
  open var isStructural: Swift.Bool {
    get
  }
  open func isStructuralProperty(_ property: SAPOData.Property? = nil) -> Swift.Bool
  open var itemIndex: Swift.Int? {
    get
  }
  open class func lambda(_ name: Swift.String, _ type: SAPOData.StructureType? = nil) -> SAPOData.DataPath
  @inline(__always) final public var lambdaType: SAPOData.StructureType? {
    get
  }
  @inline(__always) final public var lambdaVariable: Swift.String? {
    get
  }
  open class func of(_ property: SAPOData.Property) -> SAPOData.DataPath
  open class func ofDynamic(_ start: Swift.String) -> SAPOData.DataPath
  open var parentPath: SAPOData.DataPath? {
    get
  }
  open func path(_ child: SAPOData.Property) -> SAPOData.DataPath
  open var pathSegments: SAPOData.StringList {
    get
  }
  open var pathType: Swift.Int {
    get
  }
  open var rootProperty: SAPOData.Property? {
    get
  }
  open var segmentCount: Swift.Int {
    get
  }
  open class func toDynamic(segments: SAPOData.StringList) -> SAPOData.DataPath
  override open func toPath() -> SAPOData.DataPath
  override open func toString() -> Swift.String
  override open func unwrap() -> SAPOData.DataValue
  open func withKey(_ entityKey: SAPOData.EntityKey) -> SAPOData.DataPath
  open class func withSegments(type: Swift.Int, segments: SAPOData.StringList) -> SAPOData.DataPath
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataQuery : SAPOData.ObjectBase {
  final public var requestPath: Swift.String?
  final public var queryString: Swift.String?
  final public var dataFormat: Swift.Int?
  final public var entityType: SAPOData.EntityType?
  final public var derivedType: SAPOData.StructureType?
  final public var methodCall: SAPOData.DataMethodCall?
  final public var resourcePath: SAPOData.ResourcePath?
  final public var propertyPath: SAPOData.DataPath?
  final public var expectSingle: Swift.Bool
  final public var selectItems: SAPOData.SelectItemList?
  final public var distinctItems: Swift.Bool
  final public var allSelected: Swift.Bool
  final public var keySelected: Swift.Bool
  final public var expandItems: SAPOData.ExpandItemList?
  final public var queryFilter: SAPOData.QueryFilter?
  final public var searchExpression: SAPOData.SearchExpression?
  final public var searchText: Swift.String?
  final public var sortItems: SAPOData.SortItemList?
  final public var transformValues: SAPOData.TransformValueList?
  final public var groupTransform: SAPOData.GroupTransform?
  final public var countOnly: Swift.Bool
  final public var countInline: Swift.Bool
  final public var sparseArray: Swift.Bool
  final public var streamResponse: Swift.Bool
  final public var deltaResponse: Swift.Bool
  final public var deltaTime: SAPOData.GlobalDateTime?
  final public var deltaToken: Swift.String?
  final public var trackChanges: Swift.Bool
  final public var skipToken: Swift.String?
  final public var skipCount: Swift.Int?
  final public var pageSize: Swift.Int?
  final public var topCount: Swift.Int?
  final public var aliasValues: SAPOData.DataValueMap?
  final public var customOptions: SAPOData.StringMap?
  final public var timeMetric: SAPOData.DataMetric?
  final public var countMetric: SAPOData.DataMetric?
  final public var internalData: Swift.AnyObject?
  final public var systemFlags: (Swift.Int)
  override public init()
  open func `where`(_ test: SAPOData.QueryFilter) -> SAPOData.DataQuery
  open func aggregate(_ items: SAPOData.AggregateValue...) -> SAPOData.DataQuery
  open func bind(_ resource: any SAPOData.BindingPath) -> SAPOData.DataQuery
  open func check() throws
  open func count() -> SAPOData.DataQuery
  open func currentOrDeleted() -> SAPOData.DataQuery
  open func custom(_ name: Swift.String, _ value: Swift.String) -> SAPOData.DataQuery
  open func deferExecution() -> SAPOData.DataQuery
  @available(*, deprecated)
  open func search(_ text: Swift.String) -> SAPOData.DataQuery
  open var entityKey: SAPOData.EntityKey? {
    get
    set(value)
  }
  open var entitySet: SAPOData.EntitySet? {
    get
    set(value)
  }
  open func expand(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func expand(_ item: SAPOData.PropertyPath, withQuery query: SAPOData.DataQuery) -> SAPOData.DataQuery
  open func expandedProperties() -> SAPOData.StringSet
  open func expandsProperty(_ property: SAPOData.Property) -> Swift.Bool
  open func filter(_ test: SAPOData.QueryFilter) -> SAPOData.DataQuery
  open func filteredProperties() -> SAPOData.StringSet
  open func filtersProperty(_ property: SAPOData.Property) -> Swift.Bool
  open func from(_ entitySet: SAPOData.EntitySet) -> SAPOData.DataQuery
  open func fromDefault(_ entitySet: SAPOData.EntitySet) -> SAPOData.DataQuery
  open func groupBy(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func hasPendingChanges() -> SAPOData.DataQuery
  open func ifOriginalEntity() -> SAPOData.DataQuery
  open func inlineCount() -> SAPOData.DataQuery
  open func invoke(_ method: SAPOData.DataMethod, _ parameters: SAPOData.ParameterList = ParameterList.empty) -> SAPOData.DataQuery
  open func load(_ entity: SAPOData.EntityValue, _ path: SAPOData.PropertyPath? = nil) -> SAPOData.DataQuery
  open class func newIfNull(query: SAPOData.DataQuery?) -> SAPOData.DataQuery
  open func orderBy(_ value: SAPOData.QueryValue, _ order: SAPOData.SortOrder = SortOrder.ascending) -> SAPOData.DataQuery
  open func page(_ size: Swift.Int) -> SAPOData.DataQuery
  open func path(_ target: SAPOData.DataPath) -> SAPOData.DataQuery
  open func property(_ target: SAPOData.Property) -> SAPOData.DataQuery
  open func resource(_ target: SAPOData.ResourcePath) -> SAPOData.DataQuery
  open func search(_ expression: SAPOData.SearchExpression) -> SAPOData.DataQuery
  open func select(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func selectAll() -> SAPOData.DataQuery
  open func selectDistinct(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func selectKey() -> SAPOData.DataQuery
  open func selectedProperties() -> SAPOData.StringSet
  open func selectsProperty(_ property: SAPOData.Property) -> Swift.Bool
  open func setSystemFlag(_ flag: Swift.Int, value: Swift.Bool)
  open func skip(_ count: Swift.Int) -> SAPOData.DataQuery
  open func sortedByProperties() -> SAPOData.StringSet
  open func sparse() -> SAPOData.DataQuery
  open func stream() -> SAPOData.DataQuery
  open func systemFlag(_ flag: Swift.Int) -> Swift.Bool
  open func thenBy(_ value: SAPOData.QueryValue, _ order: SAPOData.SortOrder = SortOrder.ascending) -> SAPOData.DataQuery
  override open func toString() -> Swift.String
  open func top(_ count: Swift.Int) -> SAPOData.DataQuery
  open func transform(_ items: SAPOData.TransformValue...) -> SAPOData.DataQuery
  open var url: Swift.String? {
    get
    set(value)
  }
  open func withChangeTracking(deltaLink: Swift.String? = nil) -> SAPOData.DataQuery
  open func withKey(_ key: SAPOData.EntityKey) -> SAPOData.DataQuery
  open func withType(_ type: SAPOData.StructureType) -> SAPOData.DataQuery
  open func withURL(_ url: Swift.String?) -> SAPOData.DataQuery
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataQueryError : SAPOData.DataError {
  override public init()
  open class func cannotParse(_ value: Swift.String, type: Swift.String) -> SAPOData.DataQueryError
  open class func withCause(_ cause: (any Swift.Error)?) -> SAPOData.DataQueryError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.DataQueryError
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataSchema : SAPOData.ObjectBase {
  final public var namespace: Swift.String
  final public var alias: Swift.String?
  final public var sourceLine: (Swift.Int)
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  @inline(__always) final public var annotationTerms: SAPOData.AnnotationTermMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  @inline(__always) final public var complexTypes: SAPOData.ComplexTypeMap {
    get
  }
  @inline(__always) final public var dataMethods: SAPOData.DataMethodMap {
    get
  }
  @inline(__always) final public var entityContainers: SAPOData.EntityContainerMap {
    get
  }
  @inline(__always) final public var entitySets: SAPOData.EntitySetMap {
    get
  }
  @inline(__always) final public var entityTypes: SAPOData.EntityTypeMap {
    get
  }
  @inline(__always) final public var enumTypes: SAPOData.EnumTypeMap {
    get
  }
  @inline(__always) final public var lookupMethods: SAPOData.DataMethodMap {
    get
  }
  @inline(__always) final public var lookupSets: SAPOData.EntitySetMap {
    get
  }
  @inline(__always) final public var lookupSingletons: SAPOData.EntitySetMap {
    get
  }
  @inline(__always) final public var simpleTypes: SAPOData.SimpleTypeMap {
    get
  }
  @inline(__always) final public var singletons: SAPOData.EntitySetMap {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataSchemaError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataSchemaList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataSchema {
    get
    set
  }
  public static let empty: SAPOData.DataSchemaList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.DataSchema)
  final public func append(contentsOf list: SAPOData.DataSchemaList)
  final public func appendThis(_ item: SAPOData.DataSchema) -> SAPOData.DataSchemaList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.DataSchemaList
  final public func filter(_ predicate: @escaping (SAPOData.DataSchema) -> Swift.Bool) -> SAPOData.DataSchemaList
  final public func first() -> SAPOData.DataSchema
  open class func fromArray(_ array: Swift.Array<SAPOData.DataSchema>) -> SAPOData.DataSchemaList
  final public func includes(item: SAPOData.DataSchema) -> Swift.Bool
  final public func indexOf(item: SAPOData.DataSchema, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DataSchema)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataSchemaList)
  final public func item(at index: Swift.Int) -> SAPOData.DataSchema
  final public func last() -> SAPOData.DataSchema
  final public func lastIndexOf(item: SAPOData.DataSchema, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataSchema>>
  open class func of(_ items: SAPOData.DataSchema...) -> SAPOData.DataSchemaList
  open func reversed() -> SAPOData.DataSchemaList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataSchemaList
  final public func single() -> SAPOData.DataSchema
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataSchemaList
  final public func sort(by increasing: @escaping (SAPOData.DataSchema, SAPOData.DataSchema) -> Swift.Bool)
  final public func sorted() -> SAPOData.DataSchemaList
  final public func sorted(by increasing: @escaping (SAPOData.DataSchema, SAPOData.DataSchema) -> Swift.Bool) -> SAPOData.DataSchemaList
  open func toArray() -> Swift.Array<SAPOData.DataSchema>
  final public func update(at index: Swift.Int, item: SAPOData.DataSchema)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchema>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchema>>
  @objc deinit
}
open class DataSchemaMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataSchemaMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.DataSchema)
  open class func concurrent() -> SAPOData.DataSchemaMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.DataSchemaMap
  open func entries() -> SAPOData.DataSchemaMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.DataSchemaMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataSchema
  open func sortedEntries() -> SAPOData.DataSchemaMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.DataSchemaList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataSchema)
  open func updateThis(key: Swift.String, value: SAPOData.DataSchema) -> SAPOData.DataSchemaMap
  open func updateValue(_ value: SAPOData.DataSchema, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataSchema?
  open func values() -> SAPOData.DataSchemaList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.DataSchema {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataSchemaMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataSchemaMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.DataSchemaMap.Entry)
    final public func append(contentsOf list: SAPOData.DataSchemaMap.EntryList)
    final public func appendThis(_ item: SAPOData.DataSchemaMap.Entry) -> SAPOData.DataSchemaMap.EntryList
    final public func copy() -> SAPOData.DataSchemaMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.DataSchemaMap.Entry) -> Swift.Bool) -> SAPOData.DataSchemaMap.EntryList
    final public func first() -> SAPOData.DataSchemaMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataSchemaMap.Entry>) -> SAPOData.DataSchemaMap.EntryList
    final public func includes(item: SAPOData.DataSchemaMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.DataSchemaMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.DataSchemaMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataSchemaMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.DataSchemaMap.Entry
    final public func last() -> SAPOData.DataSchemaMap.Entry
    final public func lastIndexOf(item: SAPOData.DataSchemaMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataSchemaMap.Entry>>
    open class func of(_ items: SAPOData.DataSchemaMap.Entry...) -> SAPOData.DataSchemaMap.EntryList
    open func reversed() -> SAPOData.DataSchemaMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataSchemaMap.EntryList
    final public func single() -> SAPOData.DataSchemaMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataSchemaMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.DataSchemaMap.Entry, SAPOData.DataSchemaMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.DataSchemaMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.DataSchemaMap.Entry, SAPOData.DataSchemaMap.Entry) -> Swift.Bool) -> SAPOData.DataSchemaMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataSchemaMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.DataSchemaMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchemaMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchemaMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataServiceError : SAPOData.DataError {
  final public var status: (Swift.Int)
  final public var response: SAPOData.ErrorResponse?
  override public init()
  open class func notImplemented(method: Swift.String) -> SAPOData.DataServiceError
  open var statusText: Swift.String {
    get
  }
  open class func validationError(message: Swift.String) -> SAPOData.DataServiceError
  open class func withCause(_ cause: (any Swift.Error)?) -> SAPOData.DataServiceError
  open class func withCauseAndMessage(cause: (any Swift.Error)?, message: Swift.String?) -> SAPOData.DataServiceError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.DataServiceError
  open class func withResponse(status: Swift.Int, message: Swift.String?, response: SAPOData.ErrorResponse?) -> SAPOData.DataServiceError
  open class func withStatus(_ status: Swift.Int, message: Swift.String? = nil) -> SAPOData.DataServiceError
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataStorageError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataStreamError : SAPOData.DataError {
  override public init()
  open class func withCause(_ cause: (any Swift.Error)?) -> SAPOData.DataStreamError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.DataStreamError
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataType : SAPOData.ObjectBase {
  public static let codeUnknown: (Swift.Int)
  public static let string: (Swift.Int)
  public static let binary: (Swift.Int)
  public static let boolean: (Swift.Int)
  public static let char: (Swift.Int)
  public static let byte: (Swift.Int)
  public static let short: (Swift.Int)
  public static let int: (Swift.Int)
  public static let long: (Swift.Int)
  public static let integer: (Swift.Int)
  public static let decimal: (Swift.Int)
  public static let float: (Swift.Int)
  public static let double: (Swift.Int)
  public static let unsignedByte: (Swift.Int)
  public static let unsignedShort: (Swift.Int)
  public static let unsignedInt: (Swift.Int)
  public static let unsignedLong: (Swift.Int)
  public static let guidValue: (Swift.Int)
  public static let localDate: (Swift.Int)
  public static let localTime: (Swift.Int)
  public static let localDateTime: (Swift.Int)
  public static let globalDateTime: (Swift.Int)
  public static let dayTimeDuration: (Swift.Int)
  public static let yearMonthDuration: (Swift.Int)
  public static let geographyValue: (Swift.Int)
  public static let geographyPoint: (Swift.Int)
  public static let geographyMultiPoint: (Swift.Int)
  public static let geographyLineString: (Swift.Int)
  public static let geographyMultiLineString: (Swift.Int)
  public static let geographyPolygon: (Swift.Int)
  public static let geographyMultiPolygon: (Swift.Int)
  public static let geographyCollection: (Swift.Int)
  public static let geometryValue: (Swift.Int)
  public static let geometryPoint: (Swift.Int)
  public static let geometryMultiPoint: (Swift.Int)
  public static let geometryLineString: (Swift.Int)
  public static let geometryMultiLineString: (Swift.Int)
  public static let geometryPolygon: (Swift.Int)
  public static let geometryMultiPolygon: (Swift.Int)
  public static let geometryCollection: (Swift.Int)
  public static let edmPrimitive: (Swift.Int)
  public static let edmUntyped: (Swift.Int)
  public static let dataValue: (Swift.Int)
  public static let complexValue: (Swift.Int)
  public static let entityValue: (Swift.Int)
  public static let enumValue: (Swift.Int)
  public static let list: (Swift.Int)
  public static let map: (Swift.Int)
  public static let set: (Swift.Int)
  public static let dataValueList: (Swift.Int)
  public static let complexValueList: (Swift.Int)
  public static let entityValueList: (Swift.Int)
  public static let byteStream: (Swift.Int)
  public static let charStream: (Swift.Int)
  public static let deltaStream: (Swift.Int)
  public static let streamLink: (Swift.Int)
  public static let path: (Swift.Int)
  public static let pathExpression: (Swift.Int)
  public static let annotationPath: (Swift.Int)
  public static let structuralPath: (Swift.Int)
  public static let navigationPath: (Swift.Int)
  public static let propertyPath: (Swift.Int)
  public static let dynamicPath: (Swift.Int)
  public static let targetPath: (Swift.Int)
  public static let queryAlias: (Swift.Int)
  public static let queryFilter: (Swift.Int)
  public static let queryFunctionCall: (Swift.Int)
  public static let queryOperatorCall: (Swift.Int)
  public static let unknown: SAPOData.DataType
  override public init()
  open var baseType: SAPOData.DataType {
    get
  }
  open var code: Swift.Int {
    get
  }
  open class func forCode(_ code: Swift.Int) -> SAPOData.DataType
  open class func forName(_ name: Swift.String) -> SAPOData.DataType
  open var isBasic: Swift.Bool {
    get
  }
  open var isBasicList: Swift.Bool {
    get
  }
  open var isBinary: Swift.Bool {
    get
  }
  open var isBoolean: Swift.Bool {
    get
  }
  open var isCalendar: Swift.Bool {
    get
  }
  open var isComplex: Swift.Bool {
    get
  }
  open var isComplexList: Swift.Bool {
    get
  }
  open var isDerived: Swift.Bool {
    get
  }
  open var isEntity: Swift.Bool {
    get
  }
  open var isEntityList: Swift.Bool {
    get
  }
  open var isEnum: Swift.Bool {
    get
  }
  open var isEnumList: Swift.Bool {
    get
  }
  open var isGeography: Swift.Bool {
    get
  }
  open var isGeometry: Swift.Bool {
    get
  }
  open var isGeospatial: Swift.Bool {
    get
  }
  open var isGuid: Swift.Bool {
    get
  }
  open var isList: Swift.Bool {
    get
  }
  open var isMutable: Swift.Bool {
    get
  }
  open var isNumber: Swift.Bool {
    get
  }
  open var isPath: Swift.Bool {
    get
  }
  open var isStream: Swift.Bool {
    get
  }
  open var isString: Swift.Bool {
    get
  }
  open var isStructure: Swift.Bool {
    get
  }
  open var isStructureList: Swift.Bool {
    get
  }
  open var isUnsigned: Swift.Bool {
    get
  }
  open var itemType: SAPOData.DataType {
    get
  }
  open class func listOf(item: SAPOData.DataType) -> SAPOData.DataType
  open var name: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataType {
    get
    set
  }
  public static let empty: SAPOData.DataTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.DataType)
  final public func append(contentsOf list: SAPOData.DataTypeList)
  open func appendOptional(_ item: SAPOData.DataType?) -> SAPOData.DataTypeList
  final public func appendThis(_ item: SAPOData.DataType) -> SAPOData.DataTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.DataTypeList
  final public func filter(_ predicate: @escaping (SAPOData.DataType) -> Swift.Bool) -> SAPOData.DataTypeList
  final public func first() -> SAPOData.DataType
  open class func fromArray(_ array: Swift.Array<SAPOData.DataType>) -> SAPOData.DataTypeList
  final public func includes(item: SAPOData.DataType) -> Swift.Bool
  final public func indexOf(item: SAPOData.DataType, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DataType)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataTypeList)
  final public func item(at index: Swift.Int) -> SAPOData.DataType
  final public func last() -> SAPOData.DataType
  final public func lastIndexOf(item: SAPOData.DataType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataType>>
  open class func of(_ items: SAPOData.DataType...) -> SAPOData.DataTypeList
  open func optionalItem(at index: Swift.Int) -> SAPOData.DataType?
  open func reversed() -> SAPOData.DataTypeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataTypeList
  final public func single() -> SAPOData.DataType
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataTypeList
  final public func sort(by increasing: @escaping (SAPOData.DataType, SAPOData.DataType) -> Swift.Bool)
  final public func sorted() -> SAPOData.DataTypeList
  final public func sorted(by increasing: @escaping (SAPOData.DataType, SAPOData.DataType) -> Swift.Bool) -> SAPOData.DataTypeList
  open func toArray() -> Swift.Array<SAPOData.DataType>
  final public func update(at index: Swift.Int, item: SAPOData.DataType)
  open func updateOptional(at index: Swift.Int, item: SAPOData.DataType?)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataType>>
  @objc deinit
}
open class DataTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.DataTypeMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.DataTypeMap
  open func entries() -> SAPOData.DataTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.DataTypeMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataType
  open func sortedEntries() -> SAPOData.DataTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.DataTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataType)
  open func updateThis(key: Swift.String, value: SAPOData.DataType) -> SAPOData.DataTypeMap
  open func updateValue(_ value: SAPOData.DataType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataType?
  open func values() -> SAPOData.DataTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.DataType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.DataTypeMap.Entry)
    final public func append(contentsOf list: SAPOData.DataTypeMap.EntryList)
    final public func appendThis(_ item: SAPOData.DataTypeMap.Entry) -> SAPOData.DataTypeMap.EntryList
    final public func copy() -> SAPOData.DataTypeMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.DataTypeMap.Entry) -> Swift.Bool) -> SAPOData.DataTypeMap.EntryList
    final public func first() -> SAPOData.DataTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataTypeMap.Entry>) -> SAPOData.DataTypeMap.EntryList
    final public func includes(item: SAPOData.DataTypeMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.DataTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.DataTypeMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataTypeMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.DataTypeMap.Entry
    final public func last() -> SAPOData.DataTypeMap.Entry
    final public func lastIndexOf(item: SAPOData.DataTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataTypeMap.Entry>>
    open class func of(_ items: SAPOData.DataTypeMap.Entry...) -> SAPOData.DataTypeMap.EntryList
    open func reversed() -> SAPOData.DataTypeMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataTypeMap.EntryList
    final public func single() -> SAPOData.DataTypeMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataTypeMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.DataTypeMap.Entry, SAPOData.DataTypeMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.DataTypeMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.DataTypeMap.Entry, SAPOData.DataTypeMap.Entry) -> Swift.Bool) -> SAPOData.DataTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataTypeMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.DataTypeMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataTypeMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataValue : SAPOData.ObjectBase, Swift.Comparable, Swift.Hashable {
  public static func < (lhs: SAPOData.DataValue, rhs: SAPOData.DataValue) -> Swift.Bool
  public static func == (lhs: SAPOData.DataValue, rhs: SAPOData.DataValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static let undefined: SAPOData.DataValue
  override public init()
  open class func cloneMutable(_ value: SAPOData.DataValue?) -> SAPOData.DataValue?
  open var dataType: SAPOData.DataType {
    get
  }
  open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func hashCode() -> Swift.Int
  open var typeCode: Swift.Int {
    get
  }
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers open class DataValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataValue {
    get
    set
  }
  public static let empty: SAPOData.DataValueList
  final public var isReference: Swift.Bool
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  final public var totalCount: Swift.Int64?
  override public init(capacity: Swift.Int = (4 as Int))
  open class func `repeat`(_ value: SAPOData.DataValue?, count: Swift.Int) -> SAPOData.DataValueList
  final public func append(_ item: SAPOData.DataValue)
  final public func append(contentsOf list: SAPOData.DataValueList)
  open func appendOptional(_ item: SAPOData.DataValue?) -> SAPOData.DataValueList
  final public func appendThis(_ item: SAPOData.DataValue) -> SAPOData.DataValueList
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.DataValueList
  final public func copy() -> SAPOData.DataValueList
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.DataValueList?, b: SAPOData.DataValueList?) -> Swift.Bool
  final public func filter(_ predicate: @escaping (SAPOData.DataValue) -> Swift.Bool) -> SAPOData.DataValueList
  final public func first() -> SAPOData.DataValue
  open class func fromArray(_ array: Swift.Array<SAPOData.DataValue>) -> SAPOData.DataValueList
  open class func fromNullable(_ array: Swift.Array<SAPOData.DataValue?>) -> SAPOData.DataValueList
  open class func fromOptional(_ array: Swift.Array<SAPOData.DataValue?>) -> SAPOData.DataValueList
  final public func includes(item: SAPOData.DataValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.DataValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DataValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataValueList)
  final public func item(at index: Swift.Int) -> SAPOData.DataValue
  final public func last() -> SAPOData.DataValue
  final public func lastIndexOf(item: SAPOData.DataValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataValue>>
  open class func of(_ items: SAPOData.DataValue...) -> SAPOData.DataValueList
  open func optionalItem(at index: Swift.Int) -> SAPOData.DataValue?
  open func reversed() -> SAPOData.DataValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataValueList
  open class func shareOptional(_ list: SAPOData.ListBase) -> SAPOData.DataValueList
  final public func single() -> SAPOData.DataValue
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataValueList
  final public func sort(by increasing: @escaping (SAPOData.DataValue, SAPOData.DataValue) -> Swift.Bool)
  final public func sorted() -> SAPOData.DataValueList
  final public func sorted(by increasing: @escaping (SAPOData.DataValue, SAPOData.DataValue) -> Swift.Bool) -> SAPOData.DataValueList
  open func toArray() -> Swift.Array<SAPOData.DataValue>
  final public func update(at index: Swift.Int, item: SAPOData.DataValue)
  open func updateOptional(at index: Swift.Int, item: SAPOData.DataValue?)
  open func withItemType(_ type: SAPOData.DataType) -> SAPOData.DataValueList
  open func withNulls() -> SAPOData.DataValueListWithNulls
  open func withType(_ type: SAPOData.DataType) -> SAPOData.DataValueList
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataValueListWithNulls : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataValue? {
    get
    set
  }
  public static let empty: SAPOData.DataValueListWithNulls
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.DataValue?)
  final public func append(contentsOf list: SAPOData.DataValueListWithNulls)
  final public func appendThis(_ item: SAPOData.DataValue?) -> SAPOData.DataValueListWithNulls
  final public func copy() -> SAPOData.DataValueListWithNulls
  final public func filter(_ predicate: @escaping (SAPOData.DataValue?) -> Swift.Bool) -> SAPOData.DataValueListWithNulls
  final public func first() -> SAPOData.DataValue?
  open class func fromArray(_ array: Swift.Array<SAPOData.DataValue?>) -> SAPOData.DataValueListWithNulls
  final public func includes(item: SAPOData.DataValue?) -> Swift.Bool
  final public func indexOf(item: SAPOData.DataValue?, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DataValue?)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataValueListWithNulls)
  final public func item(at index: Swift.Int) -> SAPOData.DataValue?
  final public func last() -> SAPOData.DataValue?
  final public func lastIndexOf(item: SAPOData.DataValue?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataValue?>>
  open class func of(_ items: SAPOData.DataValue?...) -> SAPOData.DataValueListWithNulls
  open func reversed() -> SAPOData.DataValueListWithNulls
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataValueListWithNulls
  final public func single() -> SAPOData.DataValue?
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataValueListWithNulls
  final public func sort(by increasing: @escaping (SAPOData.DataValue?, SAPOData.DataValue?) -> Swift.Bool)
  final public func sorted() -> SAPOData.DataValueListWithNulls
  final public func sorted(by increasing: @escaping (SAPOData.DataValue?, SAPOData.DataValue?) -> Swift.Bool) -> SAPOData.DataValueListWithNulls
  open func toArray() -> Swift.Array<SAPOData.DataValue?>
  final public func update(at index: Swift.Int, item: SAPOData.DataValue?)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue?>>
  @objc deinit
}
open class DataValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.DataValueMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.DataValueMap
  open func entries() -> SAPOData.DataValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.DataValueMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataValue?
  open func sortedEntries() -> SAPOData.DataValueMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.DataValueList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataValue?)
  open func updateThis(key: Swift.String, value: SAPOData.DataValue?) -> SAPOData.DataValueMap
  open func updateValue(_ value: SAPOData.DataValue?, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataValue?
  open func values() -> SAPOData.DataValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    @inline(__always) final public var value: SAPOData.DataValue? {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.DataValueMap.Entry)
    final public func append(contentsOf list: SAPOData.DataValueMap.EntryList)
    final public func appendThis(_ item: SAPOData.DataValueMap.Entry) -> SAPOData.DataValueMap.EntryList
    final public func copy() -> SAPOData.DataValueMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.DataValueMap.Entry) -> Swift.Bool) -> SAPOData.DataValueMap.EntryList
    final public func first() -> SAPOData.DataValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataValueMap.Entry>) -> SAPOData.DataValueMap.EntryList
    final public func includes(item: SAPOData.DataValueMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.DataValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.DataValueMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataValueMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.DataValueMap.Entry
    final public func last() -> SAPOData.DataValueMap.Entry
    final public func lastIndexOf(item: SAPOData.DataValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataValueMap.Entry>>
    open class func of(_ items: SAPOData.DataValueMap.Entry...) -> SAPOData.DataValueMap.EntryList
    open func reversed() -> SAPOData.DataValueMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataValueMap.EntryList
    final public func single() -> SAPOData.DataValueMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataValueMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.DataValueMap.Entry, SAPOData.DataValueMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.DataValueMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.DataValueMap.Entry, SAPOData.DataValueMap.Entry) -> Swift.Bool) -> SAPOData.DataValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataValueMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.DataValueMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataValueMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataVersion {
  public static let ODATA_V1: (Swift.Int)
  public static let ODATA_V2: (Swift.Int)
  public static let ODATA_V3: (Swift.Int)
  public static let ODATA_V4: (Swift.Int)
  public static let ODATA_V4_01: (Swift.Int)
  public static func asText(version: Swift.Int) -> Swift.String
  public static func parse(version: Swift.String) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DayOfWeek {
  public static let monday: (Swift.Int)
  public static let tuesday: (Swift.Int)
  public static let wednesday: (Swift.Int)
  public static let thursday: (Swift.Int)
  public static let friday: (Swift.Int)
  public static let saturday: (Swift.Int)
  public static let sunday: (Swift.Int)
  public static func name(day: Swift.Int) -> Swift.String
  public static func name3(day: Swift.Int) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DayTimeDuration : SAPOData.DataValue {
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.DayTimeDuration?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.DayTimeDuration
  open class func compare(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Int
  open func compareTo(_ value: SAPOData.DayTimeDuration) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var days: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.DayTimeDuration?, _ right: SAPOData.DayTimeDuration?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hours: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  open func lessThan(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.DayTimeDuration
  open var minutes: Swift.Int {
    get
  }
  open var nanos: Swift.Int {
    get
  }
  open func normalize() -> SAPOData.DayTimeDuration
  open func notEqual(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.DayTimeDuration?, _ right: SAPOData.DayTimeDuration?) -> Swift.Bool
  open class func of(sign: Swift.Int, days: Swift.Int, hours: Swift.Int, minutes: Swift.Int, seconds: Swift.Int, nanos: Swift.Int = (0 as Int)) -> SAPOData.DayTimeDuration
  open class func ofDecimal(seconds: SAPOData.BigDecimal) -> SAPOData.DayTimeDuration
  open class func ofDouble(seconds: Swift.Double) -> SAPOData.DayTimeDuration
  open class func parse(_ text: Swift.String) -> SAPOData.DayTimeDuration?
  open var seconds: Swift.Int {
    get
  }
  open var sign: Swift.Int {
    get
  }
  open func toDecimal() -> SAPOData.BigDecimal
  open func toDouble() -> Swift.Double
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DayTimeDurationList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DayTimeDuration {
    get
    set
  }
  public static let empty: SAPOData.DayTimeDurationList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.DayTimeDuration)
  final public func append(contentsOf list: SAPOData.DayTimeDurationList)
  final public func appendThis(_ item: SAPOData.DayTimeDuration) -> SAPOData.DayTimeDurationList
  final public func copy() -> SAPOData.DayTimeDurationList
  final public func filter(_ predicate: @escaping (SAPOData.DayTimeDuration) -> Swift.Bool) -> SAPOData.DayTimeDurationList
  final public func first() -> SAPOData.DayTimeDuration
  open class func fromArray(_ array: Swift.Array<SAPOData.DayTimeDuration>) -> SAPOData.DayTimeDurationList
  final public func includes(item: SAPOData.DayTimeDuration) -> Swift.Bool
  final public func indexOf(item: SAPOData.DayTimeDuration, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DayTimeDuration)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DayTimeDurationList)
  final public func item(at index: Swift.Int) -> SAPOData.DayTimeDuration
  final public func last() -> SAPOData.DayTimeDuration
  final public func lastIndexOf(item: SAPOData.DayTimeDuration, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DayTimeDuration>>
  open class func of(_ items: SAPOData.DayTimeDuration...) -> SAPOData.DayTimeDurationList
  open func reversed() -> SAPOData.DayTimeDurationList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DayTimeDurationList
  final public func single() -> SAPOData.DayTimeDuration
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DayTimeDurationList
  final public func sort(by increasing: @escaping (SAPOData.DayTimeDuration, SAPOData.DayTimeDuration) -> Swift.Bool)
  final public func sorted() -> SAPOData.DayTimeDurationList
  final public func sorted(by increasing: @escaping (SAPOData.DayTimeDuration, SAPOData.DayTimeDuration) -> Swift.Bool) -> SAPOData.DayTimeDurationList
  open func toArray() -> Swift.Array<SAPOData.DayTimeDuration>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.DayTimeDuration)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DayTimeDuration>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DayTimeDuration>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class DecimalList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.BigDecimal {
    get
    set
  }
  public static let empty: SAPOData.DecimalList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.BigDecimal)
  final public func append(contentsOf list: SAPOData.DecimalList)
  final public func appendThis(_ item: SAPOData.BigDecimal) -> SAPOData.DecimalList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.DecimalList
  final public func filter(_ predicate: @escaping (SAPOData.BigDecimal) -> Swift.Bool) -> SAPOData.DecimalList
  final public func first() -> SAPOData.BigDecimal
  open class func fromArray(_ array: Swift.Array<SAPOData.BigDecimal>) -> SAPOData.DecimalList
  final public func includes(item: SAPOData.BigDecimal) -> Swift.Bool
  final public func indexOf(item: SAPOData.BigDecimal, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.BigDecimal)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DecimalList)
  final public func item(at index: Swift.Int) -> SAPOData.BigDecimal
  final public func last() -> SAPOData.BigDecimal
  final public func lastIndexOf(item: SAPOData.BigDecimal, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.BigDecimal>>
  open class func of(_ items: SAPOData.BigDecimal...) -> SAPOData.DecimalList
  open func reversed() -> SAPOData.DecimalList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DecimalList
  final public func single() -> SAPOData.BigDecimal
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DecimalList
  final public func sort(by increasing: @escaping (SAPOData.BigDecimal, SAPOData.BigDecimal) -> Swift.Bool)
  final public func sorted() -> SAPOData.DecimalList
  final public func sorted(by increasing: @escaping (SAPOData.BigDecimal, SAPOData.BigDecimal) -> Swift.Bool) -> SAPOData.DecimalList
  open func toArray() -> Swift.Array<SAPOData.BigDecimal>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.BigDecimal)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.BigDecimal>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.BigDecimal>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DecimalValue : SAPOData.DataValue {
  public static let zero: SAPOData.DecimalValue
  open class func compare(_ left: SAPOData.DecimalValue, _ right: SAPOData.DecimalValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.DecimalValue?, _ right: SAPOData.DecimalValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: SAPOData.BigDecimal) -> SAPOData.DecimalValue
  open class func of(optional value: SAPOData.BigDecimal?) -> SAPOData.DecimalValue?
  open class func optional(_ value: Swift.AnyObject?) -> SAPOData.BigDecimal?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> SAPOData.BigDecimal
  @inline(__always) final public var value: SAPOData.BigDecimal {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DeltaStream : SAPOData.DataValue {
  final public var isClosed: Swift.Bool
  final public var deltaItem: Swift.AnyObject?
  final public var deltaLink: Swift.String?
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  override public init()
  open func abort() throws
  open func close() throws
  open func current() throws -> Swift.AnyObject?
  override open var dataType: SAPOData.DataType {
    get
  }
  open func entity() throws -> SAPOData.EntityValue
  open func hasCurrent() throws -> Swift.Bool
  open func hasEntity() throws -> Swift.Bool
  open func hasLink() throws -> Swift.Bool
  open func link() throws -> SAPOData.ChangedLink
  open func next() throws -> Swift.Bool
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DoubleList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Double {
    get
    set
  }
  public static let empty: SAPOData.DoubleList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Double)
  final public func append(contentsOf list: SAPOData.DoubleList)
  final public func appendThis(_ item: Swift.Double) -> SAPOData.DoubleList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.DoubleList
  final public func filter(_ predicate: @escaping (Swift.Double) -> Swift.Bool) -> SAPOData.DoubleList
  final public func first() -> Swift.Double
  open class func fromArray(_ array: Swift.Array<Swift.Double>) -> SAPOData.DoubleList
  final public func includes(item: Swift.Double) -> Swift.Bool
  final public func indexOf(item: Swift.Double, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Double)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DoubleList)
  final public func item(at index: Swift.Int) -> Swift.Double
  final public func last() -> Swift.Double
  final public func lastIndexOf(item: Swift.Double, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Double>>
  open class func of(_ items: Swift.Double...) -> SAPOData.DoubleList
  open func reversed() -> SAPOData.DoubleList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DoubleList
  final public func single() -> Swift.Double
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DoubleList
  final public func sort(by increasing: @escaping (Swift.Double, Swift.Double) -> Swift.Bool)
  final public func sorted() -> SAPOData.DoubleList
  final public func sorted(by increasing: @escaping (Swift.Double, Swift.Double) -> Swift.Bool) -> SAPOData.DoubleList
  open func toArray() -> Swift.Array<Swift.Double>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Swift.Double)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Double>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Double>>
  @objc deinit
}
open class DoubleMap : SAPOData.MapBase {
  public static let empty: SAPOData.DoubleMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.DoubleMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.DoubleMap
  open func entries() -> SAPOData.DoubleMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.DoubleMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.Double
  open func sortedEntries() -> SAPOData.DoubleMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.DoubleList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.Double)
  open func updateThis(key: Swift.String, value: Swift.Double) -> SAPOData.DoubleMap
  open func updateValue(_ value: Swift.Double, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.Double?
  open func values() -> SAPOData.DoubleList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    @inline(__always) final public var value: Swift.Double {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DoubleMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DoubleMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.DoubleMap.Entry)
    final public func append(contentsOf list: SAPOData.DoubleMap.EntryList)
    final public func appendThis(_ item: SAPOData.DoubleMap.Entry) -> SAPOData.DoubleMap.EntryList
    final public func copy() -> SAPOData.DoubleMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.DoubleMap.Entry) -> Swift.Bool) -> SAPOData.DoubleMap.EntryList
    final public func first() -> SAPOData.DoubleMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DoubleMap.Entry>) -> SAPOData.DoubleMap.EntryList
    final public func includes(item: SAPOData.DoubleMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.DoubleMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.DoubleMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DoubleMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.DoubleMap.Entry
    final public func last() -> SAPOData.DoubleMap.Entry
    final public func lastIndexOf(item: SAPOData.DoubleMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DoubleMap.Entry>>
    open class func of(_ items: SAPOData.DoubleMap.Entry...) -> SAPOData.DoubleMap.EntryList
    open func reversed() -> SAPOData.DoubleMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DoubleMap.EntryList
    final public func single() -> SAPOData.DoubleMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DoubleMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.DoubleMap.Entry, SAPOData.DoubleMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.DoubleMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.DoubleMap.Entry, SAPOData.DoubleMap.Entry) -> Swift.Bool) -> SAPOData.DoubleMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DoubleMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.DoubleMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DoubleMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DoubleMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DoubleValue : SAPOData.DataValue {
  public static let zero: SAPOData.DoubleValue
  open class func compare(_ left: SAPOData.DoubleValue, _ right: SAPOData.DoubleValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.DoubleValue?, _ right: SAPOData.DoubleValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Double) -> SAPOData.DoubleValue
  open class func of(optional value: Swift.Double?) -> SAPOData.DoubleValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Double?
  override open func toString() -> Swift.String
  open func toString3() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Double
  @inline(__always) final public var value: Swift.Double {
    get
  }
  @objc deinit
}
public enum DownloadMode : Swift.Int {
  case any
  case batch
  case parallel
  case sequence
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers open class EntityContainer : SAPOData.ObjectBase {
  final public var isCacheDatabase: Swift.Bool
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var isDefault: Swift.Bool
  final public var sourceLine: (Swift.Int)
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  final public var baseContainer: SAPOData.EntityContainer {
    get
    set(value)
  }
  @inline(__always) final public var dataMethods: SAPOData.DataMethodMap {
    get
  }
  @inline(__always) final public var entitySets: SAPOData.EntitySetMap {
    get
  }
  open var name: Swift.String {
    get
  }
  @inline(__always) final public var singletons: SAPOData.EntitySetMap {
    get
  }
  open var trackChanges: Swift.Bool {
    get
    set(value)
  }
  open var trackDownloads: Swift.Bool {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityContainerList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntityContainer {
    get
    set
  }
  public static let empty: SAPOData.EntityContainerList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.EntityContainer)
  final public func append(contentsOf list: SAPOData.EntityContainerList)
  final public func appendThis(_ item: SAPOData.EntityContainer) -> SAPOData.EntityContainerList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.EntityContainerList
  final public func filter(_ predicate: @escaping (SAPOData.EntityContainer) -> Swift.Bool) -> SAPOData.EntityContainerList
  final public func first() -> SAPOData.EntityContainer
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityContainer>) -> SAPOData.EntityContainerList
  final public func includes(item: SAPOData.EntityContainer) -> Swift.Bool
  final public func indexOf(item: SAPOData.EntityContainer, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.EntityContainer)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityContainerList)
  final public func item(at index: Swift.Int) -> SAPOData.EntityContainer
  final public func last() -> SAPOData.EntityContainer
  final public func lastIndexOf(item: SAPOData.EntityContainer, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainer>>
  open class func of(_ items: SAPOData.EntityContainer...) -> SAPOData.EntityContainerList
  open func reversed() -> SAPOData.EntityContainerList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityContainerList
  final public func single() -> SAPOData.EntityContainer
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityContainerList
  final public func sort(by increasing: @escaping (SAPOData.EntityContainer, SAPOData.EntityContainer) -> Swift.Bool)
  final public func sorted() -> SAPOData.EntityContainerList
  final public func sorted(by increasing: @escaping (SAPOData.EntityContainer, SAPOData.EntityContainer) -> Swift.Bool) -> SAPOData.EntityContainerList
  open func toArray() -> Swift.Array<SAPOData.EntityContainer>
  final public func update(at index: Swift.Int, item: SAPOData.EntityContainer)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainer>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainer>>
  @objc deinit
}
open class EntityContainerMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntityContainerMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EntityContainer)
  open class func concurrent() -> SAPOData.EntityContainerMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.EntityContainerMap
  open func entries() -> SAPOData.EntityContainerMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.EntityContainerMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntityContainer
  open func sortedEntries() -> SAPOData.EntityContainerMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EntityContainerList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntityContainer)
  open func updateThis(key: Swift.String, value: SAPOData.EntityContainer) -> SAPOData.EntityContainerMap
  open func updateValue(_ value: SAPOData.EntityContainer, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntityContainer?
  open func values() -> SAPOData.EntityContainerList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.EntityContainer {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntityContainerMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntityContainerMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.EntityContainerMap.Entry)
    final public func append(contentsOf list: SAPOData.EntityContainerMap.EntryList)
    final public func appendThis(_ item: SAPOData.EntityContainerMap.Entry) -> SAPOData.EntityContainerMap.EntryList
    final public func copy() -> SAPOData.EntityContainerMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.EntityContainerMap.Entry) -> Swift.Bool) -> SAPOData.EntityContainerMap.EntryList
    final public func first() -> SAPOData.EntityContainerMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntityContainerMap.Entry>) -> SAPOData.EntityContainerMap.EntryList
    final public func includes(item: SAPOData.EntityContainerMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.EntityContainerMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.EntityContainerMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityContainerMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.EntityContainerMap.Entry
    final public func last() -> SAPOData.EntityContainerMap.Entry
    final public func lastIndexOf(item: SAPOData.EntityContainerMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainerMap.Entry>>
    open class func of(_ items: SAPOData.EntityContainerMap.Entry...) -> SAPOData.EntityContainerMap.EntryList
    open func reversed() -> SAPOData.EntityContainerMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityContainerMap.EntryList
    final public func single() -> SAPOData.EntityContainerMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityContainerMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.EntityContainerMap.Entry, SAPOData.EntityContainerMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.EntityContainerMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.EntityContainerMap.Entry, SAPOData.EntityContainerMap.Entry) -> Swift.Bool) -> SAPOData.EntityContainerMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntityContainerMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.EntityContainerMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainerMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainerMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityKey : SAPOData.ObjectBase {
  final public var map: SAPOData.DataValueMap
  override public init()
  override open func toString() -> Swift.String
  open func with(name: Swift.String, value: SAPOData.DataValue?) -> SAPOData.EntityKey
  open func withProperty(_ property: SAPOData.Property, value: SAPOData.DataValue?) -> SAPOData.EntityKey
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntitySet : SAPOData.ObjectBase, SAPOData.BindingPath {
  public static let noTable: Swift.String
  public static let columnTable: Swift.String
  public static let rowTable: Swift.String
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  public static let undefined: SAPOData.EntitySet
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var contextPath: Swift.String
  final public var encodedPath: Swift.String
  final public var targetPath: Swift.String
  final public var isClientOnly: Swift.Bool
  final public var hasLocalDraft: Swift.Bool
  final public var isLocalDraft: Swift.Bool
  final public var activeSet: Swift.String
  final public var draftSet: Swift.String
  final public var isExtension: Swift.Bool
  final public var openAPICompatibleClient: Swift.Bool
  final public var systemFlags: (Swift.Int)
  final public var sourceLine: (Swift.Int)
  final public var isSingleton: Swift.Bool
  final public var isSynthesized: Swift.Bool
  final public var indexes: SAPOData.EntitySet.IndexList
  final public var table: Swift.String?
  final public var tablePrefix: Swift.String?
  final public var tableType: Swift.String?
  final public var schema: Swift.String?
  final public var isSystem: Swift.Bool
  final public var generatedKey: Swift.Bool
  final public var keyGenerator: Swift.String?
  final public var trackChanges: Swift.Bool
  final public var trackDownloads: Swift.Bool
  final public var checkDeletes: Swift.Bool
  final public var checkUpdates: Swift.Bool
  final public var selectAfterCreate: Swift.Bool
  final public var selectAfterUpdate: Swift.Bool
  final public var hasOfflineState: Swift.Bool
  final public var hasOfflineKey: Swift.Bool
  final public var hasBackendETag: Swift.Bool
  final public var hasVersionColumn: Swift.Bool
  final public var isImportedFromSQL: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open func binding(withName name: Swift.String) -> SAPOData.EntitySet
  @inline(__always) final public var defaultSelect: SAPOData.SelectItemList {
    get
  }
  @inline(__always) final public var downloadBatchSize: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var downloadEntitiesByDefault: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var downloadQueriesCanOverlap: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var downloadStreamsByDefault: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var downloadWithoutDeltaLinks: Swift.Bool {
    get
    set(value)
  }
  final public var entityType: SAPOData.EntityType {
    get
    set(value)
  }
  @inline(__always) final public var estimatedDeltaDownloadTime: Swift.Double? {
    get
    set(value)
  }
  @inline(__always) final public var estimatedInitialDownloadTime: Swift.Double? {
    get
    set(value)
  }
  @inline(__always) final public var estimatedStreamDownloadTime: Swift.Double? {
    get
    set(value)
  }
  @inline(__always) final public var failBeforeSavingAnyEntity: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var failBeforeSavingDeltaLink: Swift.Bool {
    get
    set(value)
  }
  open var isDownloadable: Swift.Bool {
    get
    set(value)
  }
  open var isSynthesizedTarget: Swift.Bool {
    get
    set(value)
  }
  open var isUploadable: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var metrics: SAPOData.EntitySetMetrics {
    get
  }
  open var name: Swift.String {
    get
  }
  @inline(__always) final public var pathBindings: SAPOData.EntitySetMap {
    get
  }
  open var resourcePath: Swift.String {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open class func undefinedIfNull(entitySet: SAPOData.EntitySet?) -> SAPOData.EntitySet
  @inline(__always) final public var uploadGroup: Swift.String? {
    get
    set(value)
  }
  @_inheritsConvenienceInitializers open class Index : SAPOData.ObjectBase {
    final public var name: Swift.String
    final public var unique: Swift.Bool
    override public init()
    final public var items: SAPOData.SortItemList {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class IndexList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntitySet.Index {
      get
      set
    }
    public static let empty: SAPOData.EntitySet.IndexList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.EntitySet.Index)
    final public func append(contentsOf list: SAPOData.EntitySet.IndexList)
    final public func appendThis(_ item: SAPOData.EntitySet.Index) -> SAPOData.EntitySet.IndexList
    final public func copy() -> SAPOData.EntitySet.IndexList
    final public func filter(_ predicate: @escaping (SAPOData.EntitySet.Index) -> Swift.Bool) -> SAPOData.EntitySet.IndexList
    final public func first() -> SAPOData.EntitySet.Index
    open class func fromArray(_ array: Swift.Array<SAPOData.EntitySet.Index>) -> SAPOData.EntitySet.IndexList
    final public func includes(item: SAPOData.EntitySet.Index) -> Swift.Bool
    final public func indexOf(item: SAPOData.EntitySet.Index, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.EntitySet.Index)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntitySet.IndexList)
    final public func item(at index: Swift.Int) -> SAPOData.EntitySet.Index
    final public func last() -> SAPOData.EntitySet.Index
    final public func lastIndexOf(item: SAPOData.EntitySet.Index, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet.Index>>
    open class func of(_ items: SAPOData.EntitySet.Index...) -> SAPOData.EntitySet.IndexList
    open func reversed() -> SAPOData.EntitySet.IndexList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntitySet.IndexList
    final public func single() -> SAPOData.EntitySet.Index
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntitySet.IndexList
    final public func sort(by increasing: @escaping (SAPOData.EntitySet.Index, SAPOData.EntitySet.Index) -> Swift.Bool)
    final public func sorted() -> SAPOData.EntitySet.IndexList
    final public func sorted(by increasing: @escaping (SAPOData.EntitySet.Index, SAPOData.EntitySet.Index) -> Swift.Bool) -> SAPOData.EntitySet.IndexList
    open func toArray() -> Swift.Array<SAPOData.EntitySet.Index>
    final public func update(at index: Swift.Int, item: SAPOData.EntitySet.Index)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet.Index>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet.Index>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntitySetList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntitySet {
    get
    set
  }
  public static let empty: SAPOData.EntitySetList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.EntitySet)
  final public func append(contentsOf list: SAPOData.EntitySetList)
  final public func appendThis(_ item: SAPOData.EntitySet) -> SAPOData.EntitySetList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.EntitySetList
  final public func filter(_ predicate: @escaping (SAPOData.EntitySet) -> Swift.Bool) -> SAPOData.EntitySetList
  final public func first() -> SAPOData.EntitySet
  open class func fromArray(_ array: Swift.Array<SAPOData.EntitySet>) -> SAPOData.EntitySetList
  final public func includes(item: SAPOData.EntitySet) -> Swift.Bool
  final public func indexOf(item: SAPOData.EntitySet, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.EntitySet)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntitySetList)
  final public func item(at index: Swift.Int) -> SAPOData.EntitySet
  final public func last() -> SAPOData.EntitySet
  final public func lastIndexOf(item: SAPOData.EntitySet, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func localNames() -> SAPOData.StringList
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet>>
  open class func of(_ items: SAPOData.EntitySet...) -> SAPOData.EntitySetList
  open func reversed() -> SAPOData.EntitySetList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntitySetList
  final public func single() -> SAPOData.EntitySet
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntitySetList
  final public func sort(by increasing: @escaping (SAPOData.EntitySet, SAPOData.EntitySet) -> Swift.Bool)
  final public func sorted() -> SAPOData.EntitySetList
  final public func sorted(by increasing: @escaping (SAPOData.EntitySet, SAPOData.EntitySet) -> Swift.Bool) -> SAPOData.EntitySetList
  open func toArray() -> Swift.Array<SAPOData.EntitySet>
  final public func update(at index: Swift.Int, item: SAPOData.EntitySet)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet>>
  @objc deinit
}
open class EntitySetMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntitySetMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EntitySet)
  open class func concurrent() -> SAPOData.EntitySetMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.EntitySetMap
  open func entries() -> SAPOData.EntitySetMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.EntitySetMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntitySet
  open func sortedEntries() -> SAPOData.EntitySetMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EntitySetList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntitySet)
  open func updateThis(key: Swift.String, value: SAPOData.EntitySet) -> SAPOData.EntitySetMap
  open func updateValue(_ value: SAPOData.EntitySet, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntitySet?
  open func values() -> SAPOData.EntitySetList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.EntitySet {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntitySetMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntitySetMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.EntitySetMap.Entry)
    final public func append(contentsOf list: SAPOData.EntitySetMap.EntryList)
    final public func appendThis(_ item: SAPOData.EntitySetMap.Entry) -> SAPOData.EntitySetMap.EntryList
    final public func copy() -> SAPOData.EntitySetMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.EntitySetMap.Entry) -> Swift.Bool) -> SAPOData.EntitySetMap.EntryList
    final public func first() -> SAPOData.EntitySetMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntitySetMap.Entry>) -> SAPOData.EntitySetMap.EntryList
    final public func includes(item: SAPOData.EntitySetMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.EntitySetMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.EntitySetMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntitySetMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.EntitySetMap.Entry
    final public func last() -> SAPOData.EntitySetMap.Entry
    final public func lastIndexOf(item: SAPOData.EntitySetMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntitySetMap.Entry>>
    open class func of(_ items: SAPOData.EntitySetMap.Entry...) -> SAPOData.EntitySetMap.EntryList
    open func reversed() -> SAPOData.EntitySetMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntitySetMap.EntryList
    final public func single() -> SAPOData.EntitySetMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntitySetMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.EntitySetMap.Entry, SAPOData.EntitySetMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.EntitySetMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.EntitySetMap.Entry, SAPOData.EntitySetMap.Entry) -> Swift.Bool) -> SAPOData.EntitySetMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntitySetMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.EntitySetMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySetMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySetMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntitySetMetrics : SAPOData.ObjectBase {
  override public init()
  final public var deltaDownloadBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var deltaDownloadBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var deltaDownloadRows: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var deltaDownloadTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var initialDownloadBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var initialDownloadBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var initialDownloadRows: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var initialDownloadTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var offlineCreateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var offlineDeleteEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var offlineExecuteQueryTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var offlineQueryResultRows: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var offlineUpdateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineCreateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineCreateLinkTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineDeleteEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineDeleteLinkTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineExecuteQueryTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineFollowedNextCount: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineHttpResponseTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineQueryResultBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineQueryResultBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineQueryResultRows: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineReadEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineUpdateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var onlineUpdateLinkTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlCreateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlDeleteEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlDeltaDownloadRows: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlDeltaDownloadTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlExecuteQueryTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlInitialDownloadRows: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlInitialDownloadTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlQueryResultRows: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlReadEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  final public var sqlUpdateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EntityStream : SAPOData.ObjectBase {
  open func abort() throws
  open func close() throws
  open var deltaLink: Swift.String? {
    get
  }
  open func hasNext() throws -> Swift.Bool
  open var isClosed: Swift.Bool {
    get
  }
  open func next() throws -> SAPOData.EntityValue
  open var nextLink: Swift.String? {
    get
  }
  open var readLink: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityType : SAPOData.StructureType {
  public static let undefined: SAPOData.EntityType
  public static let abstractBase: SAPOData.EntityType
  final public var subtypes: SAPOData.EntityTypeList?
  final public var hasKeyPaths: Swift.Bool
  final public var isMedia: Swift.Bool
  final public var keyProperties: SAPOData.PropertyList
  final public var customPaths: SAPOData.CustomPathList?
  final public var pathColumns: SAPOData.StringMap
  final public var searchColumns: SAPOData.StringList
  final public var countSets: (Swift.Int)
  final public var draftSets: (Swift.Int)
  override public init()
  override open var code: Swift.Int {
    get
  }
  override open var hasSubtypes: Swift.Bool {
    get
  }
  override open var hasSupertype: Swift.Bool {
    get
  }
  open func inheritsFrom(other: SAPOData.EntityType) -> Swift.Bool
  open func keyProperty(name: Swift.String) -> SAPOData.Property
  final public var mediaProperty: SAPOData.StreamProperty {
    get
    set(value)
  }
  open func registerFactory(_ factory: SAPOData.ObjectFactory)
  open var supertype: SAPOData.EntityType? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open func withFactory(_ factory: SAPOData.ObjectFactory) -> SAPOData.EntityType
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntityType {
    get
    set
  }
  public static let empty: SAPOData.EntityTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.EntityType)
  final public func append(contentsOf list: SAPOData.EntityTypeList)
  final public func appendThis(_ item: SAPOData.EntityType) -> SAPOData.EntityTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.EntityTypeList
  final public func filter(_ predicate: @escaping (SAPOData.EntityType) -> Swift.Bool) -> SAPOData.EntityTypeList
  final public func first() -> SAPOData.EntityType
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityType>) -> SAPOData.EntityTypeList
  final public func includes(item: SAPOData.EntityType) -> Swift.Bool
  final public func indexOf(item: SAPOData.EntityType, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.EntityType)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityTypeList)
  final public func item(at index: Swift.Int) -> SAPOData.EntityType
  final public func last() -> SAPOData.EntityType
  final public func lastIndexOf(item: SAPOData.EntityType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityType>>
  open class func of(_ items: SAPOData.EntityType...) -> SAPOData.EntityTypeList
  open func reversed() -> SAPOData.EntityTypeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityTypeList
  final public func single() -> SAPOData.EntityType
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityTypeList
  final public func sort(by increasing: @escaping (SAPOData.EntityType, SAPOData.EntityType) -> Swift.Bool)
  final public func sorted() -> SAPOData.EntityTypeList
  final public func sorted(by increasing: @escaping (SAPOData.EntityType, SAPOData.EntityType) -> Swift.Bool) -> SAPOData.EntityTypeList
  open func toArray() -> Swift.Array<SAPOData.EntityType>
  final public func update(at index: Swift.Int, item: SAPOData.EntityType)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityType>>
  @objc deinit
}
open class EntityTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntityTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EntityType)
  open class func concurrent() -> SAPOData.EntityTypeMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.EntityTypeMap
  open func entries() -> SAPOData.EntityTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.EntityTypeMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntityType
  open func sortedEntries() -> SAPOData.EntityTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EntityTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntityType)
  open func updateThis(key: Swift.String, value: SAPOData.EntityType) -> SAPOData.EntityTypeMap
  open func updateValue(_ value: SAPOData.EntityType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntityType?
  open func values() -> SAPOData.EntityTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.EntityType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntityTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntityTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.EntityTypeMap.Entry)
    final public func append(contentsOf list: SAPOData.EntityTypeMap.EntryList)
    final public func appendThis(_ item: SAPOData.EntityTypeMap.Entry) -> SAPOData.EntityTypeMap.EntryList
    final public func copy() -> SAPOData.EntityTypeMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.EntityTypeMap.Entry) -> Swift.Bool) -> SAPOData.EntityTypeMap.EntryList
    final public func first() -> SAPOData.EntityTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntityTypeMap.Entry>) -> SAPOData.EntityTypeMap.EntryList
    final public func includes(item: SAPOData.EntityTypeMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.EntityTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.EntityTypeMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityTypeMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.EntityTypeMap.Entry
    final public func last() -> SAPOData.EntityTypeMap.Entry
    final public func lastIndexOf(item: SAPOData.EntityTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityTypeMap.Entry>>
    open class func of(_ items: SAPOData.EntityTypeMap.Entry...) -> SAPOData.EntityTypeMap.EntryList
    open func reversed() -> SAPOData.EntityTypeMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityTypeMap.EntryList
    final public func single() -> SAPOData.EntityTypeMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityTypeMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.EntityTypeMap.Entry, SAPOData.EntityTypeMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.EntityTypeMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.EntityTypeMap.Entry, SAPOData.EntityTypeMap.Entry) -> Swift.Bool) -> SAPOData.EntityTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntityTypeMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.EntityTypeMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityTypeMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
open class EntityValue : SAPOData.StructureBase, SAPOData.BindingPath, SAPOData.EntityValueOrList {
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  final public var cascadePaths: SAPOData.PropertyPathList?
  public init(withDefaults: Swift.Bool = false, type: SAPOData.EntityType? = nil, withIndexMap: SAPOData.SparseIndexMap? = nil)
  open var allowConflicts: Swift.Bool {
    get
    set(value)
  }
  open func asDraft() -> SAPOData.EntityValue
  final public var backendETag: Swift.String? {
    get
    set(value)
  }
  open func bindEntity(_ entity: SAPOData.EntityValue, to: SAPOData.Property)
  open var canonicalURL: Swift.String {
    get
  }
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.EntityValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.EntityValue
  final public func changeFlag(_ flag: Swift.Int) -> Swift.Bool
  open var changeFlags: Swift.Int {
    get
    set(value)
  }
  open class func compareKeys(_ left: SAPOData.EntityValue?, _ right: SAPOData.EntityValue?) -> Swift.Int
  open func copyEntity() -> SAPOData.EntityValue
  open func copyKey(from: SAPOData.EntityValue)
  open func copyProperties(from: SAPOData.EntityValue)
  override open var dataType: SAPOData.DataType {
    get
  }
  open var deepUpdateDelta: Swift.Bool {
    get
    set(value)
  }
  final public var deltaTime: SAPOData.GlobalDateTime? {
    get
    set(value)
  }
  final public var editLink: Swift.String? {
    get
    set(value)
  }
  final public var entityID: Swift.String? {
    get
    set(value)
  }
  open var entityKey: SAPOData.EntityKey {
    get
  }
  open var entitySet: SAPOData.EntitySet {
    get
    set(value)
  }
  open var entityTag: Swift.String? {
    get
    set(value)
  }
  final public var entityType: SAPOData.EntityType {
    get
  }
  open class func equal(_ left: SAPOData.EntityValue?, _ right: SAPOData.EntityValue?) -> Swift.Bool
  open class func equalKeys(_ left: SAPOData.EntityValue?, _ right: SAPOData.EntityValue?) -> Swift.Bool
  open func forCreate() -> SAPOData.EntityValue
  open func forDeepCreate(_ paths: SAPOData.PropertyPath...) -> SAPOData.EntityValue
  open func forDeepUpdate(_ paths: SAPOData.PropertyPath...) -> SAPOData.EntityValue
  open func forUpdate() -> SAPOData.EntityValue
  open func generateDraftKey()
  open var hasChangedBindings: Swift.Bool {
    get
    set(value)
  }
  open var hasConflict: Swift.Bool {
    get
    set(value)
  }
  open func hasKey() -> Swift.Bool
  open var hasLocalRelatives: Swift.Bool? {
    get
    set(value)
  }
  open var hasPendingChanges: Swift.Bool {
    get
    set(value)
  }
  open var hasRelativesWithPendingChanges: Swift.Bool? {
    get
    set(value)
  }
  open var inErrorState: Swift.Bool {
    get
    set(value)
  }
  open func inSet(_ set: SAPOData.EntitySet) -> SAPOData.EntityValue
  final public var internalData: Swift.AnyObject? {
    get
    set(value)
  }
  open var isBinding: Swift.Bool {
    get
    set(value)
  }
  open var isCreated: Swift.Bool {
    get
    set(value)
  }
  open var isDeleted: Swift.Bool {
    get
    set(value)
  }
  open var isDraft: Swift.Bool {
    get
    set(value)
  }
  open var isLocal: Swift.Bool {
    get
    set(value)
  }
  open var isNew: Swift.Bool {
    get
    set(value)
  }
  open func isNewOrChanged(property: SAPOData.Property) -> Swift.Bool
  open var isReference: Swift.Bool {
    get
    set(value)
  }
  open var isResolved: Swift.Bool {
    get
    set(value)
  }
  open var isResolving: Swift.Bool {
    get
    set(value)
  }
  open var isUpdated: Swift.Bool {
    get
    set(value)
  }
  open var isUpsert: Swift.Bool {
    get
    set(value)
  }
  open var mediaStream: SAPOData.StreamLink {
    get
    set(value)
  }
  open var mustBeModified: Swift.Bool {
    get
    set(value)
  }
  open var mustBeReloaded: Swift.Bool {
    get
    set(value)
  }
  open var noLocalCascade: Swift.Bool {
    get
    set(value)
  }
  open class func ofType(_ type: SAPOData.EntityType, sparse: SAPOData.SparseIndexMap? = nil) -> SAPOData.EntityValue
  open var offlineState: Swift.Int {
    get
    set(value)
  }
  open var oldEntity: SAPOData.EntityValue? {
    get
    set(value)
  }
  final public var parentEntity: SAPOData.EntityValue? {
    get
    set(value)
  }
  final public var parentProperty: SAPOData.Property? {
    get
    set(value)
  }
  final public var readLink: Swift.String? {
    get
    set(value)
  }
  final public func setChangeFlag(_ flag: Swift.Int, value: Swift.Bool)
  override open var structureType: SAPOData.StructureType {
    get
  }
  open var systemFlags: Swift.Int {
    get
    set(value)
  }
  open var systemKey: Swift.Int64 {
    get
    set(value)
  }
  open func takeSnapshot(canDefer: Swift.Bool = false)
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open func unbindEntity(_ entity: SAPOData.EntityValue?, from: SAPOData.Property, deleted: Swift.Bool = false)
  open var wasNotModified: Swift.Bool {
    get
    set(value)
  }
  open func withCreate() -> SAPOData.EntityValue
  open func withDeepCreate(_ paths: SAPOData.PropertyPath...) -> SAPOData.EntityValue
  open func withDeepUpdate(_ paths: SAPOData.PropertyPath...) -> SAPOData.EntityValue
  open func withKey(_ key: SAPOData.EntityKey) -> SAPOData.EntityValue
  open func withUpdate() -> SAPOData.EntityValue
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityValueList : SAPOData.ListBase, Swift.Codable, SAPOData.EntityValueOrList, Swift.Sequence {
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public subscript(index: Swift.Int) -> SAPOData.EntityValue {
    get
    set
  }
  public static let empty: SAPOData.EntityValueList
  public static let compareKeys: SAPOData.Comparer
  final public var isDelta: Swift.Bool
  final public var isReference: Swift.Bool
  final public var deltaLink: Swift.String?
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  final public var totalCount: Swift.Int64?
  final public var changedLinks: SAPOData.ChangedLinkList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.EntityValue)
  final public func append(contentsOf list: SAPOData.EntityValueList)
  open func appendOptional(_ item: SAPOData.EntityValue?) -> SAPOData.EntityValueList
  final public func appendThis(_ item: SAPOData.EntityValue) -> SAPOData.EntityValueList
  open func applyPageSize(query: SAPOData.DataQuery) -> SAPOData.EntityValueList
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.EntityValueList
  final public func copy() -> SAPOData.EntityValueList
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.EntityValueList?, b: SAPOData.EntityValueList?) -> Swift.Bool
  final public func filter(_ predicate: @escaping (SAPOData.EntityValue) -> Swift.Bool) -> SAPOData.EntityValueList
  open func filterAndSort(query: SAPOData.DataQuery) throws -> SAPOData.EntityValueList
  open func filterWithQuery(_ query: SAPOData.DataQuery) throws -> SAPOData.EntityValueList
  final public func first() -> SAPOData.EntityValue
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityValue>) -> SAPOData.EntityValueList
  open class func fromNullable(_ array: Swift.Array<SAPOData.EntityValue?>) -> SAPOData.EntityValueList
  open class func fromOptional(_ array: Swift.Array<SAPOData.EntityValue?>) -> SAPOData.EntityValueList
  final public func includes(item: SAPOData.EntityValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.EntityValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.EntityValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityValueList)
  final public func item(at index: Swift.Int) -> SAPOData.EntityValue
  final public func last() -> SAPOData.EntityValue
  final public func lastIndexOf(item: SAPOData.EntityValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue>>
  open class func of(_ items: SAPOData.EntityValue...) -> SAPOData.EntityValueList
  open func optionalItem(at index: Swift.Int) -> SAPOData.EntityValue?
  open func reversed() -> SAPOData.EntityValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityValueList
  open class func shareOptional(_ list: SAPOData.ListBase) -> SAPOData.EntityValueList
  final public func single() -> SAPOData.EntityValue
  open func skipAndTop(query: SAPOData.DataQuery) -> SAPOData.EntityValueList
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityValueList
  final public func sort(by increasing: @escaping (SAPOData.EntityValue, SAPOData.EntityValue) -> Swift.Bool)
  open func sortWithQuery(_ query: SAPOData.DataQuery) throws
  final public func sorted() -> SAPOData.EntityValueList
  final public func sorted(by increasing: @escaping (SAPOData.EntityValue, SAPOData.EntityValue) -> Swift.Bool) -> SAPOData.EntityValueList
  open func toArray() -> Swift.Array<SAPOData.EntityValue>
  final public func update(at index: Swift.Int, item: SAPOData.EntityValue)
  open func updateOptional(at index: Swift.Int, item: SAPOData.EntityValue?)
  open func withItemType(_ type: SAPOData.DataType) -> SAPOData.EntityValueList
  open func withNulls() -> SAPOData.EntityValueListWithNulls
  open func withType(_ type: SAPOData.DataType) -> SAPOData.EntityValueList
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityValueListWithNulls : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntityValue? {
    get
    set
  }
  public static let empty: SAPOData.EntityValueListWithNulls
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.EntityValue?)
  final public func append(contentsOf list: SAPOData.EntityValueListWithNulls)
  final public func appendThis(_ item: SAPOData.EntityValue?) -> SAPOData.EntityValueListWithNulls
  final public func copy() -> SAPOData.EntityValueListWithNulls
  final public func filter(_ predicate: @escaping (SAPOData.EntityValue?) -> Swift.Bool) -> SAPOData.EntityValueListWithNulls
  final public func first() -> SAPOData.EntityValue?
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityValue?>) -> SAPOData.EntityValueListWithNulls
  final public func includes(item: SAPOData.EntityValue?) -> Swift.Bool
  final public func indexOf(item: SAPOData.EntityValue?, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.EntityValue?)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityValueListWithNulls)
  final public func item(at index: Swift.Int) -> SAPOData.EntityValue?
  final public func last() -> SAPOData.EntityValue?
  final public func lastIndexOf(item: SAPOData.EntityValue?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue?>>
  open class func of(_ items: SAPOData.EntityValue?...) -> SAPOData.EntityValueListWithNulls
  open func reversed() -> SAPOData.EntityValueListWithNulls
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityValueListWithNulls
  final public func single() -> SAPOData.EntityValue?
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityValueListWithNulls
  final public func sort(by increasing: @escaping (SAPOData.EntityValue?, SAPOData.EntityValue?) -> Swift.Bool)
  final public func sorted() -> SAPOData.EntityValueListWithNulls
  final public func sorted(by increasing: @escaping (SAPOData.EntityValue?, SAPOData.EntityValue?) -> Swift.Bool) -> SAPOData.EntityValueListWithNulls
  open func toArray() -> Swift.Array<SAPOData.EntityValue?>
  final public func update(at index: Swift.Int, item: SAPOData.EntityValue?)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue?>>
  @objc deinit
}
open class EntityValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntityValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.EntityValueMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.EntityValueMap
  open func entries() -> SAPOData.EntityValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.EntityValueMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntityValue
  open func sortedEntries() -> SAPOData.EntityValueMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EntityValueList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntityValue)
  open func updateThis(key: Swift.String, value: SAPOData.EntityValue) -> SAPOData.EntityValueMap
  open func updateValue(_ value: SAPOData.EntityValue, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntityValue?
  open func values() -> SAPOData.EntityValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.EntityValue {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntityValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntityValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.EntityValueMap.Entry)
    final public func append(contentsOf list: SAPOData.EntityValueMap.EntryList)
    final public func appendThis(_ item: SAPOData.EntityValueMap.Entry) -> SAPOData.EntityValueMap.EntryList
    final public func copy() -> SAPOData.EntityValueMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.EntityValueMap.Entry) -> Swift.Bool) -> SAPOData.EntityValueMap.EntryList
    final public func first() -> SAPOData.EntityValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntityValueMap.Entry>) -> SAPOData.EntityValueMap.EntryList
    final public func includes(item: SAPOData.EntityValueMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.EntityValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.EntityValueMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityValueMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.EntityValueMap.Entry
    final public func last() -> SAPOData.EntityValueMap.Entry
    final public func lastIndexOf(item: SAPOData.EntityValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityValueMap.Entry>>
    open class func of(_ items: SAPOData.EntityValueMap.Entry...) -> SAPOData.EntityValueMap.EntryList
    open func reversed() -> SAPOData.EntityValueMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityValueMap.EntryList
    final public func single() -> SAPOData.EntityValueMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityValueMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.EntityValueMap.Entry, SAPOData.EntityValueMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.EntityValueMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.EntityValueMap.Entry, SAPOData.EntityValueMap.Entry) -> Swift.Bool) -> SAPOData.EntityValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntityValueMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.EntityValueMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValueMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
public protocol EntityValueOrList : AnyObject {
}
@_inheritsConvenienceInitializers open class EnumType : SAPOData.DataType {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  public static let undefined: SAPOData.EnumType
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var sourceLine: (Swift.Int)
  final public var isExtension: Swift.Bool
  final public var isInferred: Swift.Bool
  final public var isFlags: Swift.Bool
  final public var isClientOnly: Swift.Bool
  final public var isOpenType: Swift.Bool
  final public var simpleType: SAPOData.SimpleType?
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  override open var code: Swift.Int {
    get
  }
  open func createMember(name: Swift.String, numberValue: Swift.Int64? = nil, stringValue: Swift.String? = nil) -> SAPOData.EnumValue
  open func deleteMember(name: Swift.String)
  open var derivedFrom: SAPOData.DataType {
    get
    set(value)
  }
  open func dynamicList(source: SAPOData.ListBase) -> SAPOData.DataValueList
  open func findMember(name: Swift.String) -> SAPOData.EnumValue?
  override open var isDerived: Swift.Bool {
    get
  }
  open func member(name: Swift.String) -> SAPOData.EnumValue
  final public var memberList: SAPOData.EnumValueList {
    get
    set(value)
  }
  final public var memberMap: SAPOData.EnumValueMap {
    get
    set(value)
  }
  override open var name: Swift.String {
    get
  }
  open class func openSimple(type: SAPOData.SimpleType, terms: SAPOData.AnnotationTermMap) -> SAPOData.EnumType
  open func toSimpleType(terms: SAPOData.AnnotationTermMap, update: SAPOData.SimpleType? = nil) -> SAPOData.SimpleType
  override open func toString() -> Swift.String
  open func withByte(_ value: Swift.Int) -> SAPOData.EnumValue
  open func withInt(_ value: Swift.Int) -> SAPOData.EnumValue
  open func withLong(_ value: Swift.Int64) -> SAPOData.EnumValue
  open func withOptionalByte(_ value: Swift.Int?) -> SAPOData.EnumValue?
  open func withOptionalInt(_ value: Swift.Int?) -> SAPOData.EnumValue?
  open func withOptionalLong(_ value: Swift.Int64?) -> SAPOData.EnumValue?
  open func withOptionalShort(_ value: Swift.Int?) -> SAPOData.EnumValue?
  open func withShort(_ value: Swift.Int) -> SAPOData.EnumValue
  open func withUnsignedByte(_ value: SAPOData.UnsignedByte?) -> SAPOData.EnumValue?
  open func withUnsignedShort(_ value: SAPOData.UnsignedShort?) -> SAPOData.EnumValue?
  @objc deinit
}
@_inheritsConvenienceInitializers open class EnumTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EnumType {
    get
    set
  }
  public static let empty: SAPOData.EnumTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.EnumType)
  final public func append(contentsOf list: SAPOData.EnumTypeList)
  final public func appendThis(_ item: SAPOData.EnumType) -> SAPOData.EnumTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.EnumTypeList
  final public func filter(_ predicate: @escaping (SAPOData.EnumType) -> Swift.Bool) -> SAPOData.EnumTypeList
  final public func first() -> SAPOData.EnumType
  open class func fromArray(_ array: Swift.Array<SAPOData.EnumType>) -> SAPOData.EnumTypeList
  final public func includes(item: SAPOData.EnumType) -> Swift.Bool
  final public func indexOf(item: SAPOData.EnumType, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.EnumType)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumTypeList)
  final public func item(at index: Swift.Int) -> SAPOData.EnumType
  final public func last() -> SAPOData.EnumType
  final public func lastIndexOf(item: SAPOData.EnumType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumType>>
  open class func of(_ items: SAPOData.EnumType...) -> SAPOData.EnumTypeList
  open func reversed() -> SAPOData.EnumTypeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumTypeList
  final public func single() -> SAPOData.EnumType
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumTypeList
  final public func sort(by increasing: @escaping (SAPOData.EnumType, SAPOData.EnumType) -> Swift.Bool)
  final public func sorted() -> SAPOData.EnumTypeList
  final public func sorted(by increasing: @escaping (SAPOData.EnumType, SAPOData.EnumType) -> Swift.Bool) -> SAPOData.EnumTypeList
  open func toArray() -> Swift.Array<SAPOData.EnumType>
  final public func update(at index: Swift.Int, item: SAPOData.EnumType)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumType>>
  @objc deinit
}
open class EnumTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.EnumTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EnumType)
  open class func concurrent() -> SAPOData.EnumTypeMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.EnumTypeMap
  open func entries() -> SAPOData.EnumTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.EnumTypeMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EnumType
  open func sortedEntries() -> SAPOData.EnumTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EnumTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EnumType)
  open func updateThis(key: Swift.String, value: SAPOData.EnumType) -> SAPOData.EnumTypeMap
  open func updateValue(_ value: SAPOData.EnumType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EnumType?
  open func values() -> SAPOData.EnumTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.EnumType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EnumTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EnumTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.EnumTypeMap.Entry)
    final public func append(contentsOf list: SAPOData.EnumTypeMap.EntryList)
    final public func appendThis(_ item: SAPOData.EnumTypeMap.Entry) -> SAPOData.EnumTypeMap.EntryList
    final public func copy() -> SAPOData.EnumTypeMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.EnumTypeMap.Entry) -> Swift.Bool) -> SAPOData.EnumTypeMap.EntryList
    final public func first() -> SAPOData.EnumTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EnumTypeMap.Entry>) -> SAPOData.EnumTypeMap.EntryList
    final public func includes(item: SAPOData.EnumTypeMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.EnumTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.EnumTypeMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumTypeMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.EnumTypeMap.Entry
    final public func last() -> SAPOData.EnumTypeMap.Entry
    final public func lastIndexOf(item: SAPOData.EnumTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumTypeMap.Entry>>
    open class func of(_ items: SAPOData.EnumTypeMap.Entry...) -> SAPOData.EnumTypeMap.EntryList
    open func reversed() -> SAPOData.EnumTypeMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumTypeMap.EntryList
    final public func single() -> SAPOData.EnumTypeMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumTypeMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.EnumTypeMap.Entry, SAPOData.EnumTypeMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.EnumTypeMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.EnumTypeMap.Entry, SAPOData.EnumTypeMap.Entry) -> Swift.Bool) -> SAPOData.EnumTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EnumTypeMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.EnumTypeMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumTypeMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
open class EnumValue : SAPOData.DataValue {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var isExtension: Swift.Bool
  final public var sourceLine: (Swift.Int)
  public init(num: Swift.Int64, str: Swift.String, type: SAPOData.EnumType, name: Swift.String? = nil)
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open func byteValue() -> Swift.Int
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.EnumValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.EnumValue
  open class func compare(x: SAPOData.EnumValue, y: SAPOData.EnumValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var enumType: SAPOData.EnumType {
    get
  }
  open class func equal(x: SAPOData.EnumValue?, y: SAPOData.EnumValue?) -> Swift.Bool
  open func intValue() -> Swift.Int
  open func longValue() -> Swift.Int64
  open var name: Swift.String {
    get
  }
  open func shortValue() -> Swift.Int
  open func stringValue() -> Swift.String
  override open func toString() -> Swift.String
  open var value: SAPOData.DataValue {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EnumValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EnumValue {
    get
    set
  }
  public static let empty: SAPOData.EnumValueList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.EnumValue)
  final public func append(contentsOf list: SAPOData.EnumValueList)
  final public func appendThis(_ item: SAPOData.EnumValue) -> SAPOData.EnumValueList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.EnumValueList
  final public func filter(_ predicate: @escaping (SAPOData.EnumValue) -> Swift.Bool) -> SAPOData.EnumValueList
  final public func first() -> SAPOData.EnumValue
  open class func fromArray(_ array: Swift.Array<SAPOData.EnumValue>) -> SAPOData.EnumValueList
  final public func includes(item: SAPOData.EnumValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.EnumValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.EnumValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumValueList)
  final public func item(at index: Swift.Int) -> SAPOData.EnumValue
  final public func last() -> SAPOData.EnumValue
  final public func lastIndexOf(item: SAPOData.EnumValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumValue>>
  open class func of(_ items: SAPOData.EnumValue...) -> SAPOData.EnumValueList
  open func reversed() -> SAPOData.EnumValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumValueList
  final public func single() -> SAPOData.EnumValue
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumValueList
  final public func sort(by increasing: @escaping (SAPOData.EnumValue, SAPOData.EnumValue) -> Swift.Bool)
  final public func sorted() -> SAPOData.EnumValueList
  final public func sorted(by increasing: @escaping (SAPOData.EnumValue, SAPOData.EnumValue) -> Swift.Bool) -> SAPOData.EnumValueList
  open func toArray() -> Swift.Array<SAPOData.EnumValue>
  final public func update(at index: Swift.Int, item: SAPOData.EnumValue)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValue>>
  @objc deinit
}
open class EnumValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.EnumValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EnumValue)
  open class func concurrent() -> SAPOData.EnumValueMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.EnumValueMap
  open func entries() -> SAPOData.EnumValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.EnumValueMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EnumValue
  open func sortedEntries() -> SAPOData.EnumValueMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EnumValueList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EnumValue)
  open func updateThis(key: Swift.String, value: SAPOData.EnumValue) -> SAPOData.EnumValueMap
  open func updateValue(_ value: SAPOData.EnumValue, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EnumValue?
  open func values() -> SAPOData.EnumValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.EnumValue {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EnumValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EnumValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.EnumValueMap.Entry)
    final public func append(contentsOf list: SAPOData.EnumValueMap.EntryList)
    final public func appendThis(_ item: SAPOData.EnumValueMap.Entry) -> SAPOData.EnumValueMap.EntryList
    final public func copy() -> SAPOData.EnumValueMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.EnumValueMap.Entry) -> Swift.Bool) -> SAPOData.EnumValueMap.EntryList
    final public func first() -> SAPOData.EnumValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EnumValueMap.Entry>) -> SAPOData.EnumValueMap.EntryList
    final public func includes(item: SAPOData.EnumValueMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.EnumValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.EnumValueMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumValueMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.EnumValueMap.Entry
    final public func last() -> SAPOData.EnumValueMap.Entry
    final public func lastIndexOf(item: SAPOData.EnumValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumValueMap.Entry>>
    open class func of(_ items: SAPOData.EnumValueMap.Entry...) -> SAPOData.EnumValueMap.EntryList
    open func reversed() -> SAPOData.EnumValueMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumValueMap.EntryList
    final public func single() -> SAPOData.EnumValueMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumValueMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.EnumValueMap.Entry, SAPOData.EnumValueMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.EnumValueMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.EnumValueMap.Entry, SAPOData.EnumValueMap.Entry) -> Swift.Bool) -> SAPOData.EnumValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EnumValueMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.EnumValueMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValueMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ErrorResponse : SAPOData.ObjectBase {
  final public var code: Swift.String
  final public var message: Swift.String
  final public var language: Swift.String?
  final public var target: Swift.String?
  final public var details: SAPOData.ErrorResponseList
  final public var contentID: Swift.String?
  final public var innerDetails: Swift.String?
  final public var rawResponse: Swift.AnyObject?
  override public init()
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class ErrorResponseList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ErrorResponse {
    get
    set
  }
  public static let empty: SAPOData.ErrorResponseList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.ErrorResponse)
  final public func append(contentsOf list: SAPOData.ErrorResponseList)
  final public func appendThis(_ item: SAPOData.ErrorResponse) -> SAPOData.ErrorResponseList
  final public func copy() -> SAPOData.ErrorResponseList
  final public func filter(_ predicate: @escaping (SAPOData.ErrorResponse) -> Swift.Bool) -> SAPOData.ErrorResponseList
  final public func first() -> SAPOData.ErrorResponse
  open class func fromArray(_ array: Swift.Array<SAPOData.ErrorResponse>) -> SAPOData.ErrorResponseList
  final public func includes(item: SAPOData.ErrorResponse) -> Swift.Bool
  final public func indexOf(item: SAPOData.ErrorResponse, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.ErrorResponse)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ErrorResponseList)
  final public func item(at index: Swift.Int) -> SAPOData.ErrorResponse
  final public func last() -> SAPOData.ErrorResponse
  final public func lastIndexOf(item: SAPOData.ErrorResponse, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ErrorResponse>>
  open class func of(_ items: SAPOData.ErrorResponse...) -> SAPOData.ErrorResponseList
  open func reversed() -> SAPOData.ErrorResponseList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ErrorResponseList
  final public func single() -> SAPOData.ErrorResponse
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ErrorResponseList
  final public func sort(by increasing: @escaping (SAPOData.ErrorResponse, SAPOData.ErrorResponse) -> Swift.Bool)
  final public func sorted() -> SAPOData.ErrorResponseList
  final public func sorted(by increasing: @escaping (SAPOData.ErrorResponse, SAPOData.ErrorResponse) -> Swift.Bool) -> SAPOData.ErrorResponseList
  open func toArray() -> Swift.Array<SAPOData.ErrorResponse>
  final public func update(at index: Swift.Int, item: SAPOData.ErrorResponse)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ErrorResponse>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ErrorResponse>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class ExpandItem : SAPOData.ObjectBase {
  public static func of(property: SAPOData.Property) -> SAPOData.ExpandItem
  final public var query: SAPOData.DataQuery?
  final public var isHidden: Swift.Bool
  override public init()
  open class func of(_ item: SAPOData.PropertyPath) -> SAPOData.ExpandItem
  final public var path: SAPOData.DataPath {
    get
    set(value)
  }
  open func requiredQuery() -> SAPOData.DataQuery
  open func toProperty() -> SAPOData.Property?
  open func toRequiredProperty() throws -> SAPOData.Property
  override open func toString() -> Swift.String
  open func withQuery(_ query: SAPOData.DataQuery) -> SAPOData.ExpandItem
  @objc deinit
}
@_inheritsConvenienceInitializers open class ExpandItemList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ExpandItem {
    get
    set
  }
  public static let empty: SAPOData.ExpandItemList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.ExpandItem)
  final public func append(contentsOf list: SAPOData.ExpandItemList)
  final public func appendThis(_ item: SAPOData.ExpandItem) -> SAPOData.ExpandItemList
  final public func copy() -> SAPOData.ExpandItemList
  final public func filter(_ predicate: @escaping (SAPOData.ExpandItem) -> Swift.Bool) -> SAPOData.ExpandItemList
  final public func first() -> SAPOData.ExpandItem
  open func forProperty(_ property: SAPOData.Property) throws -> SAPOData.ExpandItem?
  open class func fromArray(_ array: Swift.Array<SAPOData.ExpandItem>) -> SAPOData.ExpandItemList
  open func hasProperty(_ property: SAPOData.Property) throws -> Swift.Bool
  final public func includes(item: SAPOData.ExpandItem) -> Swift.Bool
  final public func indexOf(item: SAPOData.ExpandItem, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.ExpandItem)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ExpandItemList)
  final public func item(at index: Swift.Int) -> SAPOData.ExpandItem
  final public func last() -> SAPOData.ExpandItem
  final public func lastIndexOf(item: SAPOData.ExpandItem, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ExpandItem>>
  open class func of(_ items: SAPOData.ExpandItem...) -> SAPOData.ExpandItemList
  open func reversed() -> SAPOData.ExpandItemList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ExpandItemList
  final public func single() -> SAPOData.ExpandItem
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ExpandItemList
  final public func sort(by increasing: @escaping (SAPOData.ExpandItem, SAPOData.ExpandItem) -> Swift.Bool)
  final public func sorted() -> SAPOData.ExpandItemList
  final public func sorted(by increasing: @escaping (SAPOData.ExpandItem, SAPOData.ExpandItem) -> Swift.Bool) -> SAPOData.ExpandItemList
  open func toArray() -> Swift.Array<SAPOData.ExpandItem>
  final public func update(at index: Swift.Int, item: SAPOData.ExpandItem)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ExpandItem>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ExpandItem>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ExpandTransform : SAPOData.TransformValue {
  open class func create(_ propertyPath: SAPOData.PropertyPath) -> SAPOData.ExpandTransform
  @inline(__always) final public var expandItem: SAPOData.ExpandTransform? {
    get
  }
  @inline(__always) final public var filter: SAPOData.FilterTransform? {
    get
  }
  final public var propertyPath: SAPOData.PropertyPath {
    get
  }
  open class func withExpand(_ propertyPath: SAPOData.PropertyPath, expandItem: SAPOData.ExpandTransform) -> SAPOData.ExpandTransform
  open class func withFilter(_ propertyPath: SAPOData.PropertyPath, filter: SAPOData.FilterTransform) -> SAPOData.ExpandTransform
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FilterTransform : SAPOData.TransformValue {
  open class func of(_ queryFilter: SAPOData.QueryFilter) -> SAPOData.FilterTransform
  final public var queryFilter: SAPOData.QueryFilter {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class FloatList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Float {
    get
    set
  }
  public static let empty: SAPOData.FloatList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Float)
  final public func append(contentsOf list: SAPOData.FloatList)
  final public func appendThis(_ item: Swift.Float) -> SAPOData.FloatList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.FloatList
  final public func filter(_ predicate: @escaping (Swift.Float) -> Swift.Bool) -> SAPOData.FloatList
  final public func first() -> Swift.Float
  open class func fromArray(_ array: Swift.Array<Swift.Float>) -> SAPOData.FloatList
  final public func includes(item: Swift.Float) -> Swift.Bool
  final public func indexOf(item: Swift.Float, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Float)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.FloatList)
  final public func item(at index: Swift.Int) -> Swift.Float
  final public func last() -> Swift.Float
  final public func lastIndexOf(item: Swift.Float, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Float>>
  open class func of(_ items: Swift.Float...) -> SAPOData.FloatList
  open func reversed() -> SAPOData.FloatList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.FloatList
  final public func single() -> Swift.Float
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.FloatList
  final public func sort(by increasing: @escaping (Swift.Float, Swift.Float) -> Swift.Bool)
  final public func sorted() -> SAPOData.FloatList
  final public func sorted(by increasing: @escaping (Swift.Float, Swift.Float) -> Swift.Bool) -> SAPOData.FloatList
  open func toArray() -> Swift.Array<Swift.Float>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Swift.Float)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Float>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Float>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FloatValue : SAPOData.DataValue {
  public static let zero: SAPOData.FloatValue
  open class func compare(_ left: SAPOData.FloatValue, _ right: SAPOData.FloatValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.FloatValue?, _ right: SAPOData.FloatValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Float) -> SAPOData.FloatValue
  open class func of(optional value: Swift.Float?) -> SAPOData.FloatValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Float?
  override open func toString() -> Swift.String
  open func toString3() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Float
  @inline(__always) final public var value: Swift.Float {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyCollection : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyCollection?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyCollection
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  final public var geographies: SAPOData.GeographyValueList {
    get
    set(value)
  }
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyCollection
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyCollection
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyLineString : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyLineString
  final public var coordinates: SAPOData.LineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyMultiLineString : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiLineString
  final public var coordinates: SAPOData.MultiLineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyMultiLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyMultiLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyMultiPoint : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPoint
  final public var coordinates: SAPOData.MultiPointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyMultiPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyMultiPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyMultiPolygon : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPolygon
  final public var coordinates: SAPOData.MultiPolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyMultiPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyMultiPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyPoint : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPoint
  final public var coordinates: SAPOData.PointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double, m: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double, m: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(latitude: Swift.Double, longitude: Swift.Double) -> SAPOData.GeographyPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyPolygon : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPolygon
  final public var coordinates: SAPOData.PolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyValue : SAPOData.GeospatialValue {
  public static let defaultSrid: (Swift.Int)
  override public init()
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyValue
  open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parseAny(_ text: Swift.String, type: SAPOData.DataType) throws -> SAPOData.GeographyValue
  open class func parseAnyWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyValue
  override open var srsCode: Swift.Int {
    get
    set(value)
  }
  override open var srsName: Swift.String? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GeographyValue {
    get
    set
  }
  public static let empty: SAPOData.GeographyValueList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.GeographyValue)
  final public func append(contentsOf list: SAPOData.GeographyValueList)
  final public func appendThis(_ item: SAPOData.GeographyValue) -> SAPOData.GeographyValueList
  final public func copy() -> SAPOData.GeographyValueList
  final public func filter(_ predicate: @escaping (SAPOData.GeographyValue) -> Swift.Bool) -> SAPOData.GeographyValueList
  final public func first() -> SAPOData.GeographyValue
  open class func fromArray(_ array: Swift.Array<SAPOData.GeographyValue>) -> SAPOData.GeographyValueList
  final public func includes(item: SAPOData.GeographyValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.GeographyValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.GeographyValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.GeographyValueList)
  final public func item(at index: Swift.Int) -> SAPOData.GeographyValue
  final public func last() -> SAPOData.GeographyValue
  final public func lastIndexOf(item: SAPOData.GeographyValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GeographyValue>>
  open class func of(_ items: SAPOData.GeographyValue...) -> SAPOData.GeographyValueList
  open func reversed() -> SAPOData.GeographyValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GeographyValueList
  final public func single() -> SAPOData.GeographyValue
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GeographyValueList
  final public func sort(by increasing: @escaping (SAPOData.GeographyValue, SAPOData.GeographyValue) -> Swift.Bool)
  final public func sorted() -> SAPOData.GeographyValueList
  final public func sorted(by increasing: @escaping (SAPOData.GeographyValue, SAPOData.GeographyValue) -> Swift.Bool) -> SAPOData.GeographyValueList
  open func toArray() -> Swift.Array<SAPOData.GeographyValue>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.GeographyValue)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GeographyValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GeographyValue>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryCollection : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryCollection?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryCollection
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  final public var geometries: SAPOData.GeometryValueList {
    get
    set(value)
  }
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryCollection
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryCollection
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryLineString : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryLineString
  final public var coordinates: SAPOData.LineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryMultiLineString : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiLineString
  final public var coordinates: SAPOData.MultiLineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryMultiLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryMultiLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryMultiPoint : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPoint
  final public var coordinates: SAPOData.MultiPointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryMultiPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryMultiPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryMultiPolygon : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPolygon
  final public var coordinates: SAPOData.MultiPolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryMultiPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryMultiPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryPoint : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPoint
  final public var coordinates: SAPOData.PointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryPoint
  open class func with(x: Swift.Double, y: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(x: Swift.Double, y: Swift.Double, m: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double, m: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(latitude: Swift.Double, longitude: Swift.Double) -> SAPOData.GeometryPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryPolygon : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPolygon
  final public var coordinates: SAPOData.PolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryValue : SAPOData.GeospatialValue {
  public static let defaultSrid: (Swift.Int)
  override public init()
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryValue
  open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parseAny(_ text: Swift.String, type: SAPOData.DataType) throws -> SAPOData.GeometryValue
  open class func parseAnyWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryValue
  override open var srsCode: Swift.Int {
    get
    set(value)
  }
  override open var srsName: Swift.String? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GeometryValue {
    get
    set
  }
  public static let empty: SAPOData.GeometryValueList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.GeometryValue)
  final public func append(contentsOf list: SAPOData.GeometryValueList)
  final public func appendThis(_ item: SAPOData.GeometryValue) -> SAPOData.GeometryValueList
  final public func copy() -> SAPOData.GeometryValueList
  final public func filter(_ predicate: @escaping (SAPOData.GeometryValue) -> Swift.Bool) -> SAPOData.GeometryValueList
  final public func first() -> SAPOData.GeometryValue
  open class func fromArray(_ array: Swift.Array<SAPOData.GeometryValue>) -> SAPOData.GeometryValueList
  final public func includes(item: SAPOData.GeometryValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.GeometryValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.GeometryValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.GeometryValueList)
  final public func item(at index: Swift.Int) -> SAPOData.GeometryValue
  final public func last() -> SAPOData.GeometryValue
  final public func lastIndexOf(item: SAPOData.GeometryValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GeometryValue>>
  open class func of(_ items: SAPOData.GeometryValue...) -> SAPOData.GeometryValueList
  open func reversed() -> SAPOData.GeometryValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GeometryValueList
  final public func single() -> SAPOData.GeometryValue
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GeometryValueList
  final public func sort(by increasing: @escaping (SAPOData.GeometryValue, SAPOData.GeometryValue) -> Swift.Bool)
  final public func sorted() -> SAPOData.GeometryValueList
  final public func sorted(by increasing: @escaping (SAPOData.GeometryValue, SAPOData.GeometryValue) -> Swift.Bool) -> SAPOData.GeometryValueList
  open func toArray() -> Swift.Array<SAPOData.GeometryValue>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.GeometryValue)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GeometryValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GeometryValue>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeospatialValue : SAPOData.DataValue {
  override public init()
  @inline(__always) open var srsCode: Swift.Int {
    get
    set(value)
  }
  @inline(__always) open var srsName: Swift.String? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GlobalDateTime : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public func utc() -> Foundation.Date
  public static func from(utc dateTime: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.GlobalDateTime
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GlobalDateTime?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GlobalDateTime
  open class func compare(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Int
  open func compareTo(_ value: SAPOData.GlobalDateTime) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var date: SAPOData.LocalDate {
    get
  }
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.GlobalDateTime?, _ right: SAPOData.GlobalDateTime?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hour: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  open func lessThan(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.GlobalDateTime
  open class func millisBetween(a: SAPOData.GlobalDateTime, b: SAPOData.GlobalDateTime) -> Swift.Int64
  open func minus(_ value: SAPOData.GlobalDateTime) -> Swift.Double
  open var minute: Swift.Int {
    get
  }
  open var month: Swift.Int {
    get
  }
  open var nano: Swift.Int {
    get
  }
  open func normalize() -> SAPOData.GlobalDateTime
  open func notEqual(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.GlobalDateTime?, _ right: SAPOData.GlobalDateTime?) -> Swift.Bool
  open class func now() -> SAPOData.GlobalDateTime
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, nano: Swift.Int = (0 as Int)) -> SAPOData.GlobalDateTime
  open class func ofJulian(day: Swift.Double) -> SAPOData.GlobalDateTime
  open var offset: Swift.Int {
    get
  }
  open class func parse(_ text: Swift.String) -> SAPOData.GlobalDateTime?
  open func plusDays(_ days: Swift.Int) -> SAPOData.GlobalDateTime
  open func plusHours(_ hours: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMicros(_ micros: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMillis(_ millis: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMinutes(_ minutes: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMonths(_ months: Swift.Int) -> SAPOData.GlobalDateTime
  open func plusNanos(_ nanos: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusSeconds(_ seconds: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusWeeks(_ weeks: Swift.Int) -> SAPOData.GlobalDateTime
  open func plusYears(_ years: Swift.Int) -> SAPOData.GlobalDateTime
  open var second: Swift.Int {
    get
  }
  open var time: SAPOData.LocalTime {
    get
  }
  open class func toJulian(dt: SAPOData.GlobalDateTime) -> Swift.Double
  open func toLocal() -> SAPOData.LocalDateTime
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  open func zone(offset: Swift.Int) -> SAPOData.GlobalDateTime
  @objc deinit
}
@_inheritsConvenienceInitializers open class GlobalDateTimeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GlobalDateTime {
    get
    set
  }
  public static let empty: SAPOData.GlobalDateTimeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.GlobalDateTime)
  final public func append(contentsOf list: SAPOData.GlobalDateTimeList)
  final public func appendThis(_ item: SAPOData.GlobalDateTime) -> SAPOData.GlobalDateTimeList
  final public func copy() -> SAPOData.GlobalDateTimeList
  final public func filter(_ predicate: @escaping (SAPOData.GlobalDateTime) -> Swift.Bool) -> SAPOData.GlobalDateTimeList
  final public func first() -> SAPOData.GlobalDateTime
  open class func fromArray(_ array: Swift.Array<SAPOData.GlobalDateTime>) -> SAPOData.GlobalDateTimeList
  final public func includes(item: SAPOData.GlobalDateTime) -> Swift.Bool
  final public func indexOf(item: SAPOData.GlobalDateTime, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.GlobalDateTime)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.GlobalDateTimeList)
  final public func item(at index: Swift.Int) -> SAPOData.GlobalDateTime
  final public func last() -> SAPOData.GlobalDateTime
  final public func lastIndexOf(item: SAPOData.GlobalDateTime, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GlobalDateTime>>
  open class func of(_ items: SAPOData.GlobalDateTime...) -> SAPOData.GlobalDateTimeList
  open func reversed() -> SAPOData.GlobalDateTimeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GlobalDateTimeList
  final public func single() -> SAPOData.GlobalDateTime
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GlobalDateTimeList
  final public func sort(by increasing: @escaping (SAPOData.GlobalDateTime, SAPOData.GlobalDateTime) -> Swift.Bool)
  final public func sorted() -> SAPOData.GlobalDateTimeList
  final public func sorted(by increasing: @escaping (SAPOData.GlobalDateTime, SAPOData.GlobalDateTime) -> Swift.Bool) -> SAPOData.GlobalDateTimeList
  open func toArray() -> Swift.Array<SAPOData.GlobalDateTime>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.GlobalDateTime)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GlobalDateTime>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GlobalDateTime>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GroupTransform : SAPOData.TransformValue {
  final public var transformValues: SAPOData.TransformValueList?
  open func aggregate(_ items: SAPOData.AggregateValue...) -> SAPOData.GroupTransform
  open func aggregateList(items: SAPOData.AggregateValueList) -> SAPOData.GroupTransform
  open class func groupBy(_ items: SAPOData.PropertyPath...) -> SAPOData.GroupTransform
  open class func groupByList(items: SAPOData.PropertyPathList) -> SAPOData.GroupTransform
  final public var groupingPaths: SAPOData.PropertyPathList {
    get
  }
  open func transform(_ items: SAPOData.TransformValue...) -> SAPOData.GroupTransform
  open func transformList(items: SAPOData.TransformValueList) -> SAPOData.GroupTransform
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GuidValue : SAPOData.DataValue {
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GuidValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GuidValue
  open class func compare(x: SAPOData.GuidValue, y: SAPOData.GuidValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(x: SAPOData.GuidValue?, y: SAPOData.GuidValue?) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.GuidValue
  open class func of(_ value: SAPOData.GUID) -> SAPOData.GuidValue
  open class func ofOptional(_ value: SAPOData.GUID?) -> SAPOData.GuidValue?
  open class func parse(_ text: Swift.String) -> SAPOData.GuidValue?
  open class func random() -> SAPOData.GuidValue
  open func toBinary() -> Foundation.Data
  override open func toString() -> Swift.String
  open func toString32() -> Swift.String
  open func toString36() -> Swift.String
  final public var value: SAPOData.GUID {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class GuidValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GuidValue {
    get
    set
  }
  public static let empty: SAPOData.GuidValueList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.GuidValue)
  final public func append(contentsOf list: SAPOData.GuidValueList)
  final public func appendThis(_ item: SAPOData.GuidValue) -> SAPOData.GuidValueList
  final public func copy() -> SAPOData.GuidValueList
  final public func filter(_ predicate: @escaping (SAPOData.GuidValue) -> Swift.Bool) -> SAPOData.GuidValueList
  final public func first() -> SAPOData.GuidValue
  open class func fromArray(_ array: Swift.Array<SAPOData.GuidValue>) -> SAPOData.GuidValueList
  final public func includes(item: SAPOData.GuidValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.GuidValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.GuidValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.GuidValueList)
  final public func item(at index: Swift.Int) -> SAPOData.GuidValue
  final public func last() -> SAPOData.GuidValue
  final public func lastIndexOf(item: SAPOData.GuidValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GuidValue>>
  open class func of(_ items: SAPOData.GuidValue...) -> SAPOData.GuidValueList
  open func reversed() -> SAPOData.GuidValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GuidValueList
  final public func single() -> SAPOData.GuidValue
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GuidValueList
  final public func sort(by increasing: @escaping (SAPOData.GuidValue, SAPOData.GuidValue) -> Swift.Bool)
  final public func sorted() -> SAPOData.GuidValueList
  final public func sorted(by increasing: @escaping (SAPOData.GuidValue, SAPOData.GuidValue) -> Swift.Bool) -> SAPOData.GuidValueList
  open func toArray() -> Swift.Array<SAPOData.GuidValue>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.GuidValue)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GuidValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GuidValue>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class HttpDateTime : SAPOData.ObjectBase {
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open var hour: Swift.Int {
    get
  }
  open var minute: Swift.Int {
    get
  }
  open var month: Swift.Int {
    get
  }
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int) -> SAPOData.HttpDateTime
  open class func ofGlobal(_ value: SAPOData.GlobalDateTime) -> SAPOData.HttpDateTime
  open class func parse(_ text: Swift.String, fix: Swift.Bool = false) -> SAPOData.HttpDateTime?
  open var second: Swift.Int {
    get
  }
  open func toGlobal() -> SAPOData.GlobalDateTime
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class IntList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.IntList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Int)
  final public func append(contentsOf list: SAPOData.IntList)
  final public func appendThis(_ item: Swift.Int) -> SAPOData.IntList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.IntList
  final public func filter(_ predicate: @escaping (Swift.Int) -> Swift.Bool) -> SAPOData.IntList
  final public func first() -> Swift.Int
  open class func fromArray(_ array: Swift.Array<Swift.Int>) -> SAPOData.IntList
  final public func includes(item: Swift.Int) -> Swift.Bool
  final public func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Int)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.IntList)
  final public func item(at index: Swift.Int) -> Swift.Int
  final public func last() -> Swift.Int
  final public func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func of(_ items: Swift.Int...) -> SAPOData.IntList
  open func reversed() -> SAPOData.IntList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.IntList
  final public func single() -> Swift.Int
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.IntList
  final public func sort(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool)
  final public func sorted() -> SAPOData.IntList
  final public func sorted(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool) -> SAPOData.IntList
  open func toArray() -> Swift.Array<Swift.Int>
  override open func toDynamic() -> SAPOData.ListBase?
  open func toSet() -> SAPOData.IntSet
  final public func update(at index: Swift.Int, item: Swift.Int)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
  @objc deinit
}
open class IntMap : SAPOData.MapBase {
  public static let empty: SAPOData.IntMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.IntMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.IntMap
  open func entries() -> SAPOData.IntMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.IntMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.Int
  open func sortedEntries() -> SAPOData.IntMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.IntList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.Int)
  open func updateThis(key: Swift.String, value: Swift.Int) -> SAPOData.IntMap
  open func updateValue(_ value: Swift.Int, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.Int?
  open func values() -> SAPOData.IntList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    @inline(__always) final public var value: Swift.Int {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.IntMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.IntMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.IntMap.Entry)
    final public func append(contentsOf list: SAPOData.IntMap.EntryList)
    final public func appendThis(_ item: SAPOData.IntMap.Entry) -> SAPOData.IntMap.EntryList
    final public func copy() -> SAPOData.IntMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.IntMap.Entry) -> Swift.Bool) -> SAPOData.IntMap.EntryList
    final public func first() -> SAPOData.IntMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.IntMap.Entry>) -> SAPOData.IntMap.EntryList
    final public func includes(item: SAPOData.IntMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.IntMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.IntMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.IntMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.IntMap.Entry
    final public func last() -> SAPOData.IntMap.Entry
    final public func lastIndexOf(item: SAPOData.IntMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.IntMap.Entry>>
    open class func of(_ items: SAPOData.IntMap.Entry...) -> SAPOData.IntMap.EntryList
    open func reversed() -> SAPOData.IntMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.IntMap.EntryList
    final public func single() -> SAPOData.IntMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.IntMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.IntMap.Entry, SAPOData.IntMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.IntMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.IntMap.Entry, SAPOData.IntMap.Entry) -> Swift.Bool) -> SAPOData.IntMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.IntMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.IntMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.IntMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.IntMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class IntSet : SAPOData.SetBase {
  public static let empty: SAPOData.IntSet
  override public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.IntSet
  open func contains(_ value: Swift.Int) -> Swift.Bool
  open func copy() -> SAPOData.IntSet
  open func insert(_ value: Swift.Int)
  open func insert(contentsOf from: SAPOData.IntSet)
  open func insertThis(_ value: Swift.Int) -> SAPOData.IntSet
  open func remove(_ value: Swift.Int) -> Swift.Bool
  open func remove(contentsOf values: SAPOData.IntSet)
  open func sortedValues() -> SAPOData.IntList
  open func values() -> SAPOData.IntList
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IntValue : SAPOData.DataValue {
  public static let zero: SAPOData.IntValue
  open class func compare(_ left: SAPOData.IntValue, _ right: SAPOData.IntValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.IntValue?, _ right: SAPOData.IntValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.IntValue
  open class func of(optional value: Swift.Int?) -> SAPOData.IntValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  @inline(__always) final public var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class IntegerList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.BigInteger {
    get
    set
  }
  public static let empty: SAPOData.IntegerList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.BigInteger)
  final public func append(contentsOf list: SAPOData.IntegerList)
  final public func appendThis(_ item: SAPOData.BigInteger) -> SAPOData.IntegerList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.IntegerList
  final public func filter(_ predicate: @escaping (SAPOData.BigInteger) -> Swift.Bool) -> SAPOData.IntegerList
  final public func first() -> SAPOData.BigInteger
  open class func fromArray(_ array: Swift.Array<SAPOData.BigInteger>) -> SAPOData.IntegerList
  final public func includes(item: SAPOData.BigInteger) -> Swift.Bool
  final public func indexOf(item: SAPOData.BigInteger, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.BigInteger)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.IntegerList)
  final public func item(at index: Swift.Int) -> SAPOData.BigInteger
  final public func last() -> SAPOData.BigInteger
  final public func lastIndexOf(item: SAPOData.BigInteger, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.BigInteger>>
  open class func of(_ items: SAPOData.BigInteger...) -> SAPOData.IntegerList
  open func reversed() -> SAPOData.IntegerList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.IntegerList
  final public func single() -> SAPOData.BigInteger
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.IntegerList
  final public func sort(by increasing: @escaping (SAPOData.BigInteger, SAPOData.BigInteger) -> Swift.Bool)
  final public func sorted() -> SAPOData.IntegerList
  final public func sorted(by increasing: @escaping (SAPOData.BigInteger, SAPOData.BigInteger) -> Swift.Bool) -> SAPOData.IntegerList
  open func toArray() -> Swift.Array<SAPOData.BigInteger>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.BigInteger)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.BigInteger>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.BigInteger>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IntegerValue : SAPOData.DataValue {
  public static let zero: SAPOData.IntegerValue
  open class func compare(_ left: SAPOData.IntegerValue, _ right: SAPOData.IntegerValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.IntegerValue?, _ right: SAPOData.IntegerValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: SAPOData.BigInteger) -> SAPOData.IntegerValue
  open class func of(optional value: SAPOData.BigInteger?) -> SAPOData.IntegerValue?
  open class func optional(_ value: Swift.AnyObject?) -> SAPOData.BigInteger?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> SAPOData.BigInteger
  @inline(__always) final public var value: SAPOData.BigInteger {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class JoinSetRelations : SAPOData.ObjectBase {
  override public init()
  final public var entitySetJoinSet: SAPOData.EntitySet {
    get
    set(value)
  }
  final public var entitySetSource: SAPOData.EntitySet {
    get
    set(value)
  }
  final public var entitySetTarget: SAPOData.EntitySet {
    get
    set(value)
  }
  final public var entityTypeJoinSet: SAPOData.EntityType {
    get
    set(value)
  }
  final public var entityTypeSource: SAPOData.EntityType {
    get
    set(value)
  }
  final public var entityTypeTarget: SAPOData.EntityType {
    get
    set(value)
  }
  final public var propertyJoinSetToSource: SAPOData.Property {
    get
    set(value)
  }
  final public var propertyJoinSetToTarget: SAPOData.Property {
    get
    set(value)
  }
  final public var propertySourceToJoinSet: SAPOData.Property {
    get
    set(value)
  }
  final public var propertySourceToTarget: SAPOData.Property {
    get
    set(value)
  }
  final public var propertyTargetToJoinSet: SAPOData.Property {
    get
    set(value)
  }
  final public var propertyTargetToSource: SAPOData.Property {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LineStringCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PointCoordinates {
    get
    set
  }
  public static let empty: SAPOData.LineStringCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.PointCoordinates)
  final public func append(contentsOf list: SAPOData.LineStringCoordinates)
  final public func appendThis(_ item: SAPOData.PointCoordinates) -> SAPOData.LineStringCoordinates
  final public func copy() -> SAPOData.LineStringCoordinates
  final public func filter(_ predicate: @escaping (SAPOData.PointCoordinates) -> Swift.Bool) -> SAPOData.LineStringCoordinates
  final public func first() -> SAPOData.PointCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.PointCoordinates>) -> SAPOData.LineStringCoordinates
  final public func includes(item: SAPOData.PointCoordinates) -> Swift.Bool
  final public func indexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.PointCoordinates)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LineStringCoordinates)
  final public func item(at index: Swift.Int) -> SAPOData.PointCoordinates
  final public func last() -> SAPOData.PointCoordinates
  final public func lastIndexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
  open class func of(_ items: SAPOData.PointCoordinates...) -> SAPOData.LineStringCoordinates
  open func reversed() -> SAPOData.LineStringCoordinates
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LineStringCoordinates
  final public func single() -> SAPOData.PointCoordinates
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LineStringCoordinates
  final public func sort(by increasing: @escaping (SAPOData.PointCoordinates, SAPOData.PointCoordinates) -> Swift.Bool)
  final public func sorted() -> SAPOData.LineStringCoordinates
  final public func sorted(by increasing: @escaping (SAPOData.PointCoordinates, SAPOData.PointCoordinates) -> Swift.Bool) -> SAPOData.LineStringCoordinates
  open func toArray() -> Swift.Array<SAPOData.PointCoordinates>
  final public func update(at index: Swift.Int, item: SAPOData.PointCoordinates)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
  @objc deinit
}
open class ListBase : SAPOData.DataValue {
  final public var count: Swift.Int {
    get
  }
  public init(capacity: Swift.Int)
  open var comparer: SAPOData.Comparer {
    get
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  open var equality: SAPOData.Equality {
    get
  }
  @inline(__always) final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) final public var isNotEmpty: Swift.Bool {
    get
  }
  @inline(__always) final public var length: Swift.Int {
    get
  }
  final public func makeImmutable()
  final public func remove(at index: Swift.Int)
  final public func removeAll()
  final public func removeFirst()
  final public func removeLast()
  final public func removeRange(start: Swift.Int, end: Swift.Int)
  final public func reverse()
  final public func shareWith(other: SAPOData.ListBase, replace: Swift.Bool)
  final public func sort()
  final public func sortWith(comparer: SAPOData.Comparer)
  open func toDynamic() -> SAPOData.ListBase?
  override open func toString() -> Swift.String
  @inline(__always) final public var untypedList: SAPOData.UntypedList {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LiteralValueException : SAPOData.PanicError {
  override public init()
  open class func withTextAndType(text: Swift.String, type: SAPOData.DataType) -> SAPOData.LiteralValueException
  open class func withTextAndTypeName(text: Swift.String, typeName: Swift.String) -> SAPOData.LiteralValueException
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LocalDate : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public static func from(utc date: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.LocalDate
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.LocalDate?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.LocalDate
  open class func compare(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Int
  open func compareTo(_ value: SAPOData.LocalDate) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.LocalDate?, _ right: SAPOData.LocalDate?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open func lessEqual(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  open func lessThan(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.LocalDate
  open func minus(_ value: SAPOData.LocalDate) -> Swift.Double
  open var month: Swift.Int {
    get
  }
  open func notEqual(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.LocalDate?, _ right: SAPOData.LocalDate?) -> Swift.Bool
  open class func now() -> SAPOData.LocalDate
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int) -> SAPOData.LocalDate
  open class func parse(_ text: Swift.String) -> SAPOData.LocalDate?
  open func plusDays(_ days: Swift.Int) -> SAPOData.LocalDate
  open func plusMonths(_ months: Swift.Int) -> SAPOData.LocalDate
  open func plusWeeks(_ weeks: Swift.Int) -> SAPOData.LocalDate
  open func plusYears(_ years: Swift.Int) -> SAPOData.LocalDate
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LocalDateList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LocalDate {
    get
    set
  }
  public static let empty: SAPOData.LocalDateList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.LocalDate)
  final public func append(contentsOf list: SAPOData.LocalDateList)
  final public func appendThis(_ item: SAPOData.LocalDate) -> SAPOData.LocalDateList
  final public func copy() -> SAPOData.LocalDateList
  final public func filter(_ predicate: @escaping (SAPOData.LocalDate) -> Swift.Bool) -> SAPOData.LocalDateList
  final public func first() -> SAPOData.LocalDate
  open class func fromArray(_ array: Swift.Array<SAPOData.LocalDate>) -> SAPOData.LocalDateList
  final public func includes(item: SAPOData.LocalDate) -> Swift.Bool
  final public func indexOf(item: SAPOData.LocalDate, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.LocalDate)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LocalDateList)
  final public func item(at index: Swift.Int) -> SAPOData.LocalDate
  final public func last() -> SAPOData.LocalDate
  final public func lastIndexOf(item: SAPOData.LocalDate, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LocalDate>>
  open class func of(_ items: SAPOData.LocalDate...) -> SAPOData.LocalDateList
  open func reversed() -> SAPOData.LocalDateList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LocalDateList
  final public func single() -> SAPOData.LocalDate
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LocalDateList
  final public func sort(by increasing: @escaping (SAPOData.LocalDate, SAPOData.LocalDate) -> Swift.Bool)
  final public func sorted() -> SAPOData.LocalDateList
  final public func sorted(by increasing: @escaping (SAPOData.LocalDate, SAPOData.LocalDate) -> Swift.Bool) -> SAPOData.LocalDateList
  open func toArray() -> Swift.Array<SAPOData.LocalDate>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.LocalDate)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDate>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDate>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LocalDateTime : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public func utc(from timeZone: Foundation.TimeZone = GMT) -> Foundation.Date?
  public static func from(utc dateTime: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.LocalDateTime
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.LocalDateTime?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.LocalDateTime
  open class func compare(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Int
  open func compareTo(_ value: SAPOData.LocalDateTime) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var date: SAPOData.LocalDate {
    get
  }
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.LocalDateTime?, _ right: SAPOData.LocalDateTime?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hour: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  open func lessThan(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.LocalDateTime
  open class func millisBetween(a: SAPOData.LocalDateTime, b: SAPOData.LocalDateTime) -> Swift.Int64
  open func minus(_ value: SAPOData.LocalDateTime) -> Swift.Double
  open var minute: Swift.Int {
    get
  }
  open var month: Swift.Int {
    get
  }
  open var nano: Swift.Int {
    get
  }
  open func notEqual(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.LocalDateTime?, _ right: SAPOData.LocalDateTime?) -> Swift.Bool
  open class func now() -> SAPOData.LocalDateTime
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, nano: Swift.Int = (0 as Int)) -> SAPOData.LocalDateTime
  open class func ofJulian(day: Swift.Double) -> SAPOData.LocalDateTime
  open class func parse(_ text: Swift.String) -> SAPOData.LocalDateTime?
  open func plusDays(_ days: Swift.Int) -> SAPOData.LocalDateTime
  open func plusHours(_ hours: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMicros(_ micros: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMillis(_ millis: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMinutes(_ minutes: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMonths(_ months: Swift.Int) -> SAPOData.LocalDateTime
  open func plusNanos(_ nanos: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusSeconds(_ seconds: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusWeeks(_ weeks: Swift.Int) -> SAPOData.LocalDateTime
  open func plusYears(_ years: Swift.Int) -> SAPOData.LocalDateTime
  open var second: Swift.Int {
    get
  }
  open var time: SAPOData.LocalTime {
    get
  }
  open func toGlobal(offset: Swift.Int = (0 as Int)) -> SAPOData.GlobalDateTime
  open class func toJulian(dt: SAPOData.LocalDateTime) -> Swift.Double
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LocalDateTimeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LocalDateTime {
    get
    set
  }
  public static let empty: SAPOData.LocalDateTimeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.LocalDateTime)
  final public func append(contentsOf list: SAPOData.LocalDateTimeList)
  final public func appendThis(_ item: SAPOData.LocalDateTime) -> SAPOData.LocalDateTimeList
  final public func copy() -> SAPOData.LocalDateTimeList
  final public func filter(_ predicate: @escaping (SAPOData.LocalDateTime) -> Swift.Bool) -> SAPOData.LocalDateTimeList
  final public func first() -> SAPOData.LocalDateTime
  open class func fromArray(_ array: Swift.Array<SAPOData.LocalDateTime>) -> SAPOData.LocalDateTimeList
  final public func includes(item: SAPOData.LocalDateTime) -> Swift.Bool
  final public func indexOf(item: SAPOData.LocalDateTime, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.LocalDateTime)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LocalDateTimeList)
  final public func item(at index: Swift.Int) -> SAPOData.LocalDateTime
  final public func last() -> SAPOData.LocalDateTime
  final public func lastIndexOf(item: SAPOData.LocalDateTime, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LocalDateTime>>
  open class func of(_ items: SAPOData.LocalDateTime...) -> SAPOData.LocalDateTimeList
  open func reversed() -> SAPOData.LocalDateTimeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LocalDateTimeList
  final public func single() -> SAPOData.LocalDateTime
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LocalDateTimeList
  final public func sort(by increasing: @escaping (SAPOData.LocalDateTime, SAPOData.LocalDateTime) -> Swift.Bool)
  final public func sorted() -> SAPOData.LocalDateTimeList
  final public func sorted(by increasing: @escaping (SAPOData.LocalDateTime, SAPOData.LocalDateTime) -> Swift.Bool) -> SAPOData.LocalDateTimeList
  open func toArray() -> Swift.Array<SAPOData.LocalDateTime>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.LocalDateTime)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDateTime>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDateTime>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LocalTime : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public static func from(utc time: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.LocalTime
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.LocalTime?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.LocalTime
  open class func compare(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Int
  open func compareTo(_ value: SAPOData.LocalTime) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.LocalTime?, _ right: SAPOData.LocalTime?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hour: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  open func lessThan(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.LocalTime
  open func minus(_ value: SAPOData.LocalTime) -> Swift.Double
  open var minute: Swift.Int {
    get
  }
  open var nano: Swift.Int {
    get
  }
  open func notEqual(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.LocalTime?, _ right: SAPOData.LocalTime?) -> Swift.Bool
  open class func now() -> SAPOData.LocalTime
  open class func of(hour: Swift.Int, minute: Swift.Int, second: Swift.Int, nano: Swift.Int = (0 as Int)) -> SAPOData.LocalTime
  open class func parse(_ text: Swift.String) -> SAPOData.LocalTime?
  open func plusHours(_ hours: Swift.Int64) -> SAPOData.LocalTime
  open func plusMicros(_ micros: Swift.Int64) -> SAPOData.LocalTime
  open func plusMillis(_ millis: Swift.Int64) -> SAPOData.LocalTime
  open func plusMinutes(_ minutes: Swift.Int64) -> SAPOData.LocalTime
  open func plusNanos(_ nanos: Swift.Int64) -> SAPOData.LocalTime
  open func plusSeconds(_ seconds: Swift.Int64) -> SAPOData.LocalTime
  open var second: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class LocalTimeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LocalTime {
    get
    set
  }
  public static let empty: SAPOData.LocalTimeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.LocalTime)
  final public func append(contentsOf list: SAPOData.LocalTimeList)
  final public func appendThis(_ item: SAPOData.LocalTime) -> SAPOData.LocalTimeList
  final public func copy() -> SAPOData.LocalTimeList
  final public func filter(_ predicate: @escaping (SAPOData.LocalTime) -> Swift.Bool) -> SAPOData.LocalTimeList
  final public func first() -> SAPOData.LocalTime
  open class func fromArray(_ array: Swift.Array<SAPOData.LocalTime>) -> SAPOData.LocalTimeList
  final public func includes(item: SAPOData.LocalTime) -> Swift.Bool
  final public func indexOf(item: SAPOData.LocalTime, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.LocalTime)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LocalTimeList)
  final public func item(at index: Swift.Int) -> SAPOData.LocalTime
  final public func last() -> SAPOData.LocalTime
  final public func lastIndexOf(item: SAPOData.LocalTime, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LocalTime>>
  open class func of(_ items: SAPOData.LocalTime...) -> SAPOData.LocalTimeList
  open func reversed() -> SAPOData.LocalTimeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LocalTimeList
  final public func single() -> SAPOData.LocalTime
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LocalTimeList
  final public func sort(by increasing: @escaping (SAPOData.LocalTime, SAPOData.LocalTime) -> Swift.Bool)
  final public func sorted() -> SAPOData.LocalTimeList
  final public func sorted(by increasing: @escaping (SAPOData.LocalTime, SAPOData.LocalTime) -> Swift.Bool) -> SAPOData.LocalTimeList
  open func toArray() -> Swift.Array<SAPOData.LocalTime>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.LocalTime)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LocalTime>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LocalTime>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class LongList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Int64 {
    get
    set
  }
  public static let empty: SAPOData.LongList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Int64)
  final public func append(contentsOf list: SAPOData.LongList)
  final public func appendThis(_ item: Swift.Int64) -> SAPOData.LongList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.LongList
  final public func filter(_ predicate: @escaping (Swift.Int64) -> Swift.Bool) -> SAPOData.LongList
  final public func first() -> Swift.Int64
  open class func fromArray(_ array: Swift.Array<Swift.Int64>) -> SAPOData.LongList
  final public func includes(item: Swift.Int64) -> Swift.Bool
  final public func indexOf(item: Swift.Int64, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Int64)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LongList)
  final public func item(at index: Swift.Int) -> Swift.Int64
  final public func last() -> Swift.Int64
  final public func lastIndexOf(item: Swift.Int64, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int64>>
  open class func of(_ items: Swift.Int64...) -> SAPOData.LongList
  open func reversed() -> SAPOData.LongList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LongList
  final public func single() -> Swift.Int64
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LongList
  final public func sort(by increasing: @escaping (Swift.Int64, Swift.Int64) -> Swift.Bool)
  final public func sorted() -> SAPOData.LongList
  final public func sorted(by increasing: @escaping (Swift.Int64, Swift.Int64) -> Swift.Bool) -> SAPOData.LongList
  open func toArray() -> Swift.Array<Swift.Int64>
  override open func toDynamic() -> SAPOData.ListBase?
  open func toSet() -> SAPOData.LongSet
  final public func update(at index: Swift.Int, item: Swift.Int64)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int64>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int64>>
  @objc deinit
}
open class LongMap : SAPOData.MapBase {
  public static let empty: SAPOData.LongMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.LongMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.LongMap
  open func entries() -> SAPOData.LongMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.LongMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.Int64
  open func sortedEntries() -> SAPOData.LongMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.LongList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.Int64)
  open func updateThis(key: Swift.String, value: Swift.Int64) -> SAPOData.LongMap
  open func updateValue(_ value: Swift.Int64, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.Int64?
  open func values() -> SAPOData.LongList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    @inline(__always) final public var value: Swift.Int64 {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.LongMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.LongMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.LongMap.Entry)
    final public func append(contentsOf list: SAPOData.LongMap.EntryList)
    final public func appendThis(_ item: SAPOData.LongMap.Entry) -> SAPOData.LongMap.EntryList
    final public func copy() -> SAPOData.LongMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.LongMap.Entry) -> Swift.Bool) -> SAPOData.LongMap.EntryList
    final public func first() -> SAPOData.LongMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.LongMap.Entry>) -> SAPOData.LongMap.EntryList
    final public func includes(item: SAPOData.LongMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.LongMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.LongMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.LongMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.LongMap.Entry
    final public func last() -> SAPOData.LongMap.Entry
    final public func lastIndexOf(item: SAPOData.LongMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LongMap.Entry>>
    open class func of(_ items: SAPOData.LongMap.Entry...) -> SAPOData.LongMap.EntryList
    open func reversed() -> SAPOData.LongMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.LongMap.EntryList
    final public func single() -> SAPOData.LongMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LongMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.LongMap.Entry, SAPOData.LongMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.LongMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.LongMap.Entry, SAPOData.LongMap.Entry) -> Swift.Bool) -> SAPOData.LongMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.LongMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.LongMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LongMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LongMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LongSet : SAPOData.SetBase {
  public static let empty: SAPOData.LongSet
  override public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.LongSet
  open func contains(_ value: Swift.Int64) -> Swift.Bool
  open func copy() -> SAPOData.LongSet
  open func insert(_ value: Swift.Int64)
  open func insert(contentsOf from: SAPOData.LongSet)
  open func insertThis(_ value: Swift.Int64) -> SAPOData.LongSet
  open func remove(_ value: Swift.Int64) -> Swift.Bool
  open func remove(contentsOf values: SAPOData.LongSet)
  open func sortedValues() -> SAPOData.LongList
  open func values() -> SAPOData.LongList
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LongValue : SAPOData.DataValue {
  public static let zero: SAPOData.LongValue
  open class func compare(_ left: SAPOData.LongValue, _ right: SAPOData.LongValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.LongValue?, _ right: SAPOData.LongValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int64) -> SAPOData.LongValue
  open class func of(optional value: Swift.Int64?) -> SAPOData.LongValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int64?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int64
  @inline(__always) final public var value: Swift.Int64 {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class MapBase : SAPOData.DataValue {
  final public var count: Swift.Int {
    get
  }
  override public init()
  override open var dataType: SAPOData.DataType {
    get
  }
  @inline(__always) final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) final public var isNotEmpty: Swift.Bool {
    get
  }
  @inline(__always) open func removeAll()
  @inline(__always) final public var size: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open var untypedMap: SAPOData.UntypedMap {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class MetadataLock : SAPOData.ObjectBase {
  override public init()
  open var mutex: SAPOData.ReadWriteMutex {
    get
  }
  open func readLock(action: @escaping () throws -> Swift.Void) throws
  open func writeLock(action: @escaping () throws -> Swift.Void) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MonthOfYear {
  public static let january: (Swift.Int)
  public static let february: (Swift.Int)
  public static let march: (Swift.Int)
  public static let april: (Swift.Int)
  public static let may: (Swift.Int)
  public static let june: (Swift.Int)
  public static let july: (Swift.Int)
  public static let august: (Swift.Int)
  public static let september: (Swift.Int)
  public static let october: (Swift.Int)
  public static let november: (Swift.Int)
  public static let december: (Swift.Int)
  public static func name(month: Swift.Int) -> Swift.String
  public static func name3(month: Swift.Int) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class MultiLineStringCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LineStringCoordinates {
    get
    set
  }
  public static let empty: SAPOData.MultiLineStringCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.LineStringCoordinates)
  final public func append(contentsOf list: SAPOData.MultiLineStringCoordinates)
  final public func appendThis(_ item: SAPOData.LineStringCoordinates) -> SAPOData.MultiLineStringCoordinates
  final public func copy() -> SAPOData.MultiLineStringCoordinates
  final public func filter(_ predicate: @escaping (SAPOData.LineStringCoordinates) -> Swift.Bool) -> SAPOData.MultiLineStringCoordinates
  final public func first() -> SAPOData.LineStringCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.LineStringCoordinates>) -> SAPOData.MultiLineStringCoordinates
  final public func includes(item: SAPOData.LineStringCoordinates) -> Swift.Bool
  final public func indexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.MultiLineStringCoordinates)
  final public func item(at index: Swift.Int) -> SAPOData.LineStringCoordinates
  final public func last() -> SAPOData.LineStringCoordinates
  final public func lastIndexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
  open class func of(_ items: SAPOData.LineStringCoordinates...) -> SAPOData.MultiLineStringCoordinates
  open func reversed() -> SAPOData.MultiLineStringCoordinates
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.MultiLineStringCoordinates
  final public func single() -> SAPOData.LineStringCoordinates
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.MultiLineStringCoordinates
  final public func sort(by increasing: @escaping (SAPOData.LineStringCoordinates, SAPOData.LineStringCoordinates) -> Swift.Bool)
  final public func sorted() -> SAPOData.MultiLineStringCoordinates
  final public func sorted(by increasing: @escaping (SAPOData.LineStringCoordinates, SAPOData.LineStringCoordinates) -> Swift.Bool) -> SAPOData.MultiLineStringCoordinates
  open func toArray() -> Swift.Array<SAPOData.LineStringCoordinates>
  final public func update(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class MultiPointCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PointCoordinates {
    get
    set
  }
  public static let empty: SAPOData.MultiPointCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.PointCoordinates)
  final public func append(contentsOf list: SAPOData.MultiPointCoordinates)
  final public func appendThis(_ item: SAPOData.PointCoordinates) -> SAPOData.MultiPointCoordinates
  final public func copy() -> SAPOData.MultiPointCoordinates
  final public func filter(_ predicate: @escaping (SAPOData.PointCoordinates) -> Swift.Bool) -> SAPOData.MultiPointCoordinates
  final public func first() -> SAPOData.PointCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.PointCoordinates>) -> SAPOData.MultiPointCoordinates
  final public func includes(item: SAPOData.PointCoordinates) -> Swift.Bool
  final public func indexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.PointCoordinates)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.MultiPointCoordinates)
  final public func item(at index: Swift.Int) -> SAPOData.PointCoordinates
  final public func last() -> SAPOData.PointCoordinates
  final public func lastIndexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
  open class func of(_ items: SAPOData.PointCoordinates...) -> SAPOData.MultiPointCoordinates
  open func reversed() -> SAPOData.MultiPointCoordinates
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.MultiPointCoordinates
  final public func single() -> SAPOData.PointCoordinates
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.MultiPointCoordinates
  final public func sort(by increasing: @escaping (SAPOData.PointCoordinates, SAPOData.PointCoordinates) -> Swift.Bool)
  final public func sorted() -> SAPOData.MultiPointCoordinates
  final public func sorted(by increasing: @escaping (SAPOData.PointCoordinates, SAPOData.PointCoordinates) -> Swift.Bool) -> SAPOData.MultiPointCoordinates
  open func toArray() -> Swift.Array<SAPOData.PointCoordinates>
  final public func update(at index: Swift.Int, item: SAPOData.PointCoordinates)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class MultiPolygonCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PolygonCoordinates {
    get
    set
  }
  public static let empty: SAPOData.MultiPolygonCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.PolygonCoordinates)
  final public func append(contentsOf list: SAPOData.MultiPolygonCoordinates)
  final public func appendThis(_ item: SAPOData.PolygonCoordinates) -> SAPOData.MultiPolygonCoordinates
  final public func copy() -> SAPOData.MultiPolygonCoordinates
  final public func filter(_ predicate: @escaping (SAPOData.PolygonCoordinates) -> Swift.Bool) -> SAPOData.MultiPolygonCoordinates
  final public func first() -> SAPOData.PolygonCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.PolygonCoordinates>) -> SAPOData.MultiPolygonCoordinates
  final public func includes(item: SAPOData.PolygonCoordinates) -> Swift.Bool
  final public func indexOf(item: SAPOData.PolygonCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.PolygonCoordinates)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.MultiPolygonCoordinates)
  final public func item(at index: Swift.Int) -> SAPOData.PolygonCoordinates
  final public func last() -> SAPOData.PolygonCoordinates
  final public func lastIndexOf(item: SAPOData.PolygonCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PolygonCoordinates>>
  open class func of(_ items: SAPOData.PolygonCoordinates...) -> SAPOData.MultiPolygonCoordinates
  open func reversed() -> SAPOData.MultiPolygonCoordinates
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.MultiPolygonCoordinates
  final public func single() -> SAPOData.PolygonCoordinates
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.MultiPolygonCoordinates
  final public func sort(by increasing: @escaping (SAPOData.PolygonCoordinates, SAPOData.PolygonCoordinates) -> Swift.Bool)
  final public func sorted() -> SAPOData.MultiPolygonCoordinates
  final public func sorted(by increasing: @escaping (SAPOData.PolygonCoordinates, SAPOData.PolygonCoordinates) -> Swift.Bool) -> SAPOData.MultiPolygonCoordinates
  open func toArray() -> Swift.Array<SAPOData.PolygonCoordinates>
  final public func update(at index: Swift.Int, item: SAPOData.PolygonCoordinates)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PolygonCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PolygonCoordinates>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class NavigationProperty : SAPOData.Property {
  final public var relationshipName: Swift.String?
  final public var fromRelationshipRole: Swift.String?
  final public var toRelationshipRole: Swift.String?
  override public init()
  override open var containsTarget: Swift.Bool {
    get
    set(value)
  }
  override open var hasForeignKeys: Swift.Int {
    get
    set(value)
  }
  open var joinSetRelations: SAPOData.JoinSetRelations? {
    get
    set(value)
  }
  open var joinUsingNavigationProperty: SAPOData.NavigationProperty? {
    get
    set(value)
  }
  override open var onDeleteAction: Swift.Int {
    get
    set(value)
  }
  override open var partnerPath: Swift.String? {
    get
    set(value)
  }
  override open var referentialConstraints: SAPOData.StringMap {
    get
    set(value)
  }
  open var serverOnly: Swift.Bool {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ObjectList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.AnyObject {
    get
    set
  }
  public static let empty: SAPOData.ObjectList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.AnyObject)
  final public func append(contentsOf list: SAPOData.ObjectList)
  final public func appendThis(_ item: Swift.AnyObject) -> SAPOData.ObjectList
  final public func copy() -> SAPOData.ObjectList
  final public func filter(_ predicate: @escaping (Swift.AnyObject) -> Swift.Bool) -> SAPOData.ObjectList
  final public func first() -> Swift.AnyObject
  open class func fromArray(_ array: Swift.Array<Swift.AnyObject>) -> SAPOData.ObjectList
  final public func includes(item: Swift.AnyObject) -> Swift.Bool
  final public func indexOf(item: Swift.AnyObject, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.AnyObject)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ObjectList)
  final public func item(at index: Swift.Int) -> Swift.AnyObject
  final public func last() -> Swift.AnyObject
  final public func lastIndexOf(item: Swift.AnyObject, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.AnyObject>>
  open class func of(_ items: Swift.AnyObject...) -> SAPOData.ObjectList
  open func reversed() -> SAPOData.ObjectList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ObjectList
  final public func single() -> Swift.AnyObject
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ObjectList
  final public func sort(by increasing: @escaping (Swift.AnyObject, Swift.AnyObject) -> Swift.Bool)
  final public func sorted() -> SAPOData.ObjectList
  final public func sorted(by increasing: @escaping (Swift.AnyObject, Swift.AnyObject) -> Swift.Bool) -> SAPOData.ObjectList
  open func toArray() -> Swift.Array<Swift.AnyObject>
  final public func update(at index: Swift.Int, item: Swift.AnyObject)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.AnyObject>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.AnyObject>>
  @objc deinit
}
open class ObjectMap : SAPOData.MapBase {
  public static let empty: SAPOData.ObjectMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.ObjectMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.ObjectMap
  open func entries() -> SAPOData.ObjectMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.ObjectMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.AnyObject
  open func sortedEntries() -> SAPOData.ObjectMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.ObjectList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.AnyObject)
  open func updateThis(key: Swift.String, value: Swift.AnyObject) -> SAPOData.ObjectMap
  open func updateValue(_ value: Swift.AnyObject, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.AnyObject?
  open func values() -> SAPOData.ObjectList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: Swift.AnyObject {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.ObjectMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.ObjectMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.ObjectMap.Entry)
    final public func append(contentsOf list: SAPOData.ObjectMap.EntryList)
    final public func appendThis(_ item: SAPOData.ObjectMap.Entry) -> SAPOData.ObjectMap.EntryList
    final public func copy() -> SAPOData.ObjectMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.ObjectMap.Entry) -> Swift.Bool) -> SAPOData.ObjectMap.EntryList
    final public func first() -> SAPOData.ObjectMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.ObjectMap.Entry>) -> SAPOData.ObjectMap.EntryList
    final public func includes(item: SAPOData.ObjectMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.ObjectMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.ObjectMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ObjectMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.ObjectMap.Entry
    final public func last() -> SAPOData.ObjectMap.Entry
    final public func lastIndexOf(item: SAPOData.ObjectMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ObjectMap.Entry>>
    open class func of(_ items: SAPOData.ObjectMap.Entry...) -> SAPOData.ObjectMap.EntryList
    open func reversed() -> SAPOData.ObjectMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.ObjectMap.EntryList
    final public func single() -> SAPOData.ObjectMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ObjectMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.ObjectMap.Entry, SAPOData.ObjectMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.ObjectMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.ObjectMap.Entry, SAPOData.ObjectMap.Entry) -> Swift.Bool) -> SAPOData.ObjectMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.ObjectMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.ObjectMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ObjectMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ObjectMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class Parameter : SAPOData.ObjectBase {
  public static let modeIn: (Swift.Int)
  public static let modeOut: (Swift.Int)
  public static let modeInOut: (Swift.Int)
  final public var name: Swift.String
  final public var mode: (Swift.Int)
  final public var value: SAPOData.DataValue?
  final public var sourceLine: (Swift.Int)
  final public var isUnicode: Swift.Bool
  final public var minLength: (Swift.Int)
  final public var maxLength: (Swift.Int)
  final public var precision: (Swift.Int)
  final public var scale: (Swift.Int)
  final public var srid: (Swift.Int)
  final public var isOptional: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var fixedLength: Swift.Bool {
    get
  }
  override open func toString() -> Swift.String
  final public var type: SAPOData.DataType {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ParameterList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.Parameter {
    get
    set
  }
  public static let empty: SAPOData.ParameterList
  override public init(capacity: Swift.Int = (4 as Int))
  open func addFormal(name: Swift.String, type: SAPOData.DataType)
  final public func append(_ item: SAPOData.Parameter)
  final public func append(contentsOf list: SAPOData.ParameterList)
  final public func appendThis(_ item: SAPOData.Parameter) -> SAPOData.ParameterList
  final public func copy() -> SAPOData.ParameterList
  final public func filter(_ predicate: @escaping (SAPOData.Parameter) -> Swift.Bool) -> SAPOData.ParameterList
  final public func first() -> SAPOData.Parameter
  open class func fromArray(_ array: Swift.Array<SAPOData.Parameter>) -> SAPOData.ParameterList
  final public func includes(item: SAPOData.Parameter) -> Swift.Bool
  final public func indexOf(item: SAPOData.Parameter, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.Parameter)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ParameterList)
  final public func item(at index: Swift.Int) -> SAPOData.Parameter
  final public func last() -> SAPOData.Parameter
  final public func lastIndexOf(item: SAPOData.Parameter, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.Parameter>>
  open class func of(_ items: SAPOData.Parameter...) -> SAPOData.ParameterList
  open func remove(name: Swift.String) -> Swift.Bool
  open func required(name: Swift.String) -> SAPOData.DataValue?
  open func requiredList(name: Swift.String) -> SAPOData.ListBase
  open func reversed() -> SAPOData.ParameterList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ParameterList
  final public func single() -> SAPOData.Parameter
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ParameterList
  final public func sort(by increasing: @escaping (SAPOData.Parameter, SAPOData.Parameter) -> Swift.Bool)
  final public func sorted() -> SAPOData.ParameterList
  final public func sorted(by increasing: @escaping (SAPOData.Parameter, SAPOData.Parameter) -> Swift.Bool) -> SAPOData.ParameterList
  open func toArray() -> Swift.Array<SAPOData.Parameter>
  open func toNameList() -> SAPOData.StringList
  final public func update(at index: Swift.Int, item: SAPOData.Parameter)
  open func with(name: Swift.String, value: SAPOData.DataValue?) -> SAPOData.ParameterList
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.Parameter>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.Parameter>>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PasswordHiding {
  public static func hide(password: Swift.String) throws -> Swift.String
  public static func unhide(text: Swift.String) throws -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class PathAnnotations : SAPOData.ObjectBase {
  final public var sourceLine: (Swift.Int)
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  final public var path: SAPOData.DataPath {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class PathAnnotationsList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PathAnnotations {
    get
    set
  }
  public static let empty: SAPOData.PathAnnotationsList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.PathAnnotations)
  final public func append(contentsOf list: SAPOData.PathAnnotationsList)
  final public func appendThis(_ item: SAPOData.PathAnnotations) -> SAPOData.PathAnnotationsList
  final public func copy() -> SAPOData.PathAnnotationsList
  final public func filter(_ predicate: @escaping (SAPOData.PathAnnotations) -> Swift.Bool) -> SAPOData.PathAnnotationsList
  final public func first() -> SAPOData.PathAnnotations
  open class func fromArray(_ array: Swift.Array<SAPOData.PathAnnotations>) -> SAPOData.PathAnnotationsList
  final public func includes(item: SAPOData.PathAnnotations) -> Swift.Bool
  final public func indexOf(item: SAPOData.PathAnnotations, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.PathAnnotations)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PathAnnotationsList)
  final public func item(at index: Swift.Int) -> SAPOData.PathAnnotations
  final public func last() -> SAPOData.PathAnnotations
  final public func lastIndexOf(item: SAPOData.PathAnnotations, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotations>>
  open class func of(_ items: SAPOData.PathAnnotations...) -> SAPOData.PathAnnotationsList
  open func reversed() -> SAPOData.PathAnnotationsList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PathAnnotationsList
  final public func single() -> SAPOData.PathAnnotations
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PathAnnotationsList
  final public func sort(by increasing: @escaping (SAPOData.PathAnnotations, SAPOData.PathAnnotations) -> Swift.Bool)
  final public func sorted() -> SAPOData.PathAnnotationsList
  final public func sorted(by increasing: @escaping (SAPOData.PathAnnotations, SAPOData.PathAnnotations) -> Swift.Bool) -> SAPOData.PathAnnotationsList
  open func toArray() -> Swift.Array<SAPOData.PathAnnotations>
  final public func update(at index: Swift.Int, item: SAPOData.PathAnnotations)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotations>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotations>>
  @objc deinit
}
open class PathAnnotationsMap : SAPOData.MapBase {
  public static let empty: SAPOData.PathAnnotationsMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.PathAnnotationsMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.PathAnnotationsMap
  open func entries() -> SAPOData.PathAnnotationsMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.PathAnnotationsMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.PathAnnotations
  open func sortedEntries() -> SAPOData.PathAnnotationsMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.PathAnnotationsList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.PathAnnotations)
  open func updateThis(key: Swift.String, value: SAPOData.PathAnnotations) -> SAPOData.PathAnnotationsMap
  open func updateValue(_ value: SAPOData.PathAnnotations, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.PathAnnotations?
  open func values() -> SAPOData.PathAnnotationsList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.PathAnnotations {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.PathAnnotationsMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.PathAnnotationsMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.PathAnnotationsMap.Entry)
    final public func append(contentsOf list: SAPOData.PathAnnotationsMap.EntryList)
    final public func appendThis(_ item: SAPOData.PathAnnotationsMap.Entry) -> SAPOData.PathAnnotationsMap.EntryList
    final public func copy() -> SAPOData.PathAnnotationsMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.PathAnnotationsMap.Entry) -> Swift.Bool) -> SAPOData.PathAnnotationsMap.EntryList
    final public func first() -> SAPOData.PathAnnotationsMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.PathAnnotationsMap.Entry>) -> SAPOData.PathAnnotationsMap.EntryList
    final public func includes(item: SAPOData.PathAnnotationsMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.PathAnnotationsMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.PathAnnotationsMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PathAnnotationsMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.PathAnnotationsMap.Entry
    final public func last() -> SAPOData.PathAnnotationsMap.Entry
    final public func lastIndexOf(item: SAPOData.PathAnnotationsMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotationsMap.Entry>>
    open class func of(_ items: SAPOData.PathAnnotationsMap.Entry...) -> SAPOData.PathAnnotationsMap.EntryList
    open func reversed() -> SAPOData.PathAnnotationsMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.PathAnnotationsMap.EntryList
    final public func single() -> SAPOData.PathAnnotationsMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PathAnnotationsMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.PathAnnotationsMap.Entry, SAPOData.PathAnnotationsMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.PathAnnotationsMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.PathAnnotationsMap.Entry, SAPOData.PathAnnotationsMap.Entry) -> Swift.Bool) -> SAPOData.PathAnnotationsMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.PathAnnotationsMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.PathAnnotationsMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotationsMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotationsMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class PointCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Double {
    get
    set
  }
  public static let empty: SAPOData.PointCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  open var altitude: Swift.Double {
    get
    set(value)
  }
  final public func append(_ item: Swift.Double)
  final public func append(contentsOf list: SAPOData.PointCoordinates)
  final public func appendThis(_ item: Swift.Double) -> SAPOData.PointCoordinates
  final public func copy() -> SAPOData.PointCoordinates
  final public func filter(_ predicate: @escaping (Swift.Double) -> Swift.Bool) -> SAPOData.PointCoordinates
  final public func first() -> Swift.Double
  open class func fromArray(_ array: Swift.Array<Swift.Double>) -> SAPOData.PointCoordinates
  final public func includes(item: Swift.Double) -> Swift.Bool
  final public func indexOf(item: Swift.Double, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Double)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PointCoordinates)
  final public func item(at index: Swift.Int) -> Swift.Double
  final public func last() -> Swift.Double
  final public func lastIndexOf(item: Swift.Double, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open var latitude: Swift.Double {
    get
    set(value)
  }
  open var longitude: Swift.Double {
    get
    set(value)
  }
  open var m: Swift.Double {
    get
  }
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Double>>
  open var measure: Swift.Double {
    get
  }
  open class func of(_ items: Swift.Double...) -> SAPOData.PointCoordinates
  open func reversed() -> SAPOData.PointCoordinates
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PointCoordinates
  final public func single() -> Swift.Double
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PointCoordinates
  final public func sort(by increasing: @escaping (Swift.Double, Swift.Double) -> Swift.Bool)
  final public func sorted() -> SAPOData.PointCoordinates
  final public func sorted(by increasing: @escaping (Swift.Double, Swift.Double) -> Swift.Bool) -> SAPOData.PointCoordinates
  open func toArray() -> Swift.Array<Swift.Double>
  final public func update(at index: Swift.Int, item: Swift.Double)
  open class func with(x: Swift.Double, y: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(x: Swift.Double, y: Swift.Double, m: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double, m: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(latitude: Swift.Double, longitude: Swift.Double) -> SAPOData.PointCoordinates
  open var x: Swift.Double {
    get
    set(value)
  }
  open var y: Swift.Double {
    get
    set(value)
  }
  open var z: Swift.Double {
    get
    set(value)
  }
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Double>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Double>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class PolygonCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LineStringCoordinates {
    get
    set
  }
  public static let empty: SAPOData.PolygonCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.LineStringCoordinates)
  final public func append(contentsOf list: SAPOData.PolygonCoordinates)
  final public func appendThis(_ item: SAPOData.LineStringCoordinates) -> SAPOData.PolygonCoordinates
  final public func copy() -> SAPOData.PolygonCoordinates
  final public func filter(_ predicate: @escaping (SAPOData.LineStringCoordinates) -> Swift.Bool) -> SAPOData.PolygonCoordinates
  final public func first() -> SAPOData.LineStringCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.LineStringCoordinates>) -> SAPOData.PolygonCoordinates
  final public func includes(item: SAPOData.LineStringCoordinates) -> Swift.Bool
  final public func indexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PolygonCoordinates)
  final public func item(at index: Swift.Int) -> SAPOData.LineStringCoordinates
  final public func last() -> SAPOData.LineStringCoordinates
  final public func lastIndexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
  open class func of(_ items: SAPOData.LineStringCoordinates...) -> SAPOData.PolygonCoordinates
  open func reversed() -> SAPOData.PolygonCoordinates
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PolygonCoordinates
  final public func single() -> SAPOData.LineStringCoordinates
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PolygonCoordinates
  final public func sort(by increasing: @escaping (SAPOData.LineStringCoordinates, SAPOData.LineStringCoordinates) -> Swift.Bool)
  final public func sorted() -> SAPOData.PolygonCoordinates
  final public func sorted(by increasing: @escaping (SAPOData.LineStringCoordinates, SAPOData.LineStringCoordinates) -> Swift.Bool) -> SAPOData.PolygonCoordinates
  open func toArray() -> Swift.Array<SAPOData.LineStringCoordinates>
  final public func update(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class Property : SAPOData.PropertyPath {
  public func path(child: SAPOData.Property) -> SAPOData.DataPath
  public static let onDeleteCascade: (Swift.Int)
  public static let onDeleteRestrict: (Swift.Int)
  public static let onDeleteSetDefault: (Swift.Int)
  public static let onDeleteSetNull: (Swift.Int)
  public static let hasNoForeignKeys: (Swift.Int)
  public static let hasForeignKeysInSource: (Swift.Int)
  public static let hasForeignKeysInTarget: (Swift.Int)
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var allowsFlattening: Swift.Bool
  final public var columnDefault: Swift.String?
  final public var hasColumnDefault: Swift.Bool
  final public var isGeneratedKey: Swift.Bool
  final public var id: (Swift.Int)
  final public var prettyText: Swift.Bool
  final public var owningType: Swift.String
  final public var sourceLine: (Swift.Int)
  final public var customPath: SAPOData.CustomPath?
  final public var column: Swift.String?
  final public var columnType: Swift.String?
  final public var systemFlags: (Swift.Int)
  final public var hasKeyPath: Swift.Bool
  final public var isKey: Swift.Bool
  final public var isForeignKey: Swift.Bool
  final public var isExtension: Swift.Bool
  final public var isOptimistic: Swift.Bool
  final public var isUnicode: Swift.Bool
  final public var minLength: (Swift.Int)
  final public var maxLength: (Swift.Int)
  final public var precision: (Swift.Int)
  final public var scale: (Swift.Int)
  final public var srid: (Swift.Int)
  final public var defaultValue: SAPOData.DataValue?
  final public var isOptional: Swift.Bool
  final public var isSynthesized: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open func basicList(from source: SAPOData.StructureBase) -> SAPOData.DataValueList
  open func binaryValue(from source: SAPOData.StructureBase) -> Foundation.Data
  open func booleanValue(from source: SAPOData.StructureBase) -> Swift.Bool
  open func byteValue(from source: SAPOData.StructureBase) -> Swift.Int
  open func complexList(from source: SAPOData.StructureBase) -> SAPOData.ComplexValueList
  open var complexType: SAPOData.ComplexType {
    get
  }
  open func complexValue(from source: SAPOData.StructureBase) -> SAPOData.ComplexValue
  open var containsTarget: Swift.Bool {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  open func dataValue(from source: SAPOData.StructureBase) -> SAPOData.DataValue?
  open func decimalValue(from source: SAPOData.StructureBase) -> SAPOData.BigDecimal
  open func dotString() -> Swift.String
  open func doubleValue(from source: SAPOData.StructureBase) -> Swift.Double
  open var encodedName: Swift.String {
    get
  }
  open func entityList(from source: SAPOData.StructureBase) -> SAPOData.EntityValueList
  open var entityType: SAPOData.EntityType {
    get
  }
  open func entityValue(from source: SAPOData.StructureBase) -> SAPOData.EntityValue
  open var enumType: SAPOData.EnumType {
    get
  }
  open func enumValue(from source: SAPOData.StructureBase) -> SAPOData.EnumValue
  open var fixedLength: Swift.Bool {
    get
  }
  open func floatValue(from source: SAPOData.StructureBase) -> Swift.Float
  open func guidValue(from source: SAPOData.StructureBase) -> SAPOData.GuidValue
  open var hasForeignKeys: Swift.Int {
    get
    set(value)
  }
  open func intValue(from source: SAPOData.StructureBase) -> Swift.Int
  open func integerValue(from source: SAPOData.StructureBase) -> SAPOData.BigInteger
  open var isBinary: Swift.Bool {
    get
  }
  open var isCollection: Swift.Bool {
    get
  }
  open var isComplex: Swift.Bool {
    get
  }
  open var isComplexList: Swift.Bool {
    get
  }
  open var isEntity: Swift.Bool {
    get
  }
  open var isEntityList: Swift.Bool {
    get
  }
  open var isImmutable: Swift.Bool {
    get
    set(value)
  }
  open var isNavigation: Swift.Bool {
    get
  }
  open var isPersistent: Swift.Bool {
    get
  }
  open var isStream: Swift.Bool {
    get
  }
  open var isStructural: Swift.Bool {
    get
  }
  open var isStructure: Swift.Bool {
    get
  }
  open var isStructureList: Swift.Bool {
    get
  }
  open var itemComplexType: SAPOData.ComplexType {
    get
  }
  open var itemEntityType: SAPOData.EntityType {
    get
  }
  open var itemStructureType: SAPOData.StructureType {
    get
  }
  open var itemType: SAPOData.DataType {
    get
  }
  @inline(__always) final public var jsonField: Swift.String {
    get
    set(value)
  }
  final public var keyPath: SAPOData.DataPath {
    get
    set(value)
  }
  open func longValue(from source: SAPOData.StructureBase) -> Swift.Int64
  @inline(__always) final public var name: Swift.String {
    get
    set(value)
  }
  open var onDeleteAction: Swift.Int {
    get
    set(value)
  }
  open func optionalBinary(from source: SAPOData.StructureBase) -> Foundation.Data?
  open func optionalBoolean(from source: SAPOData.StructureBase) -> Swift.Bool?
  open func optionalByte(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalComplex(from source: SAPOData.StructureBase) -> SAPOData.ComplexValue?
  open func optionalDecimal(from source: SAPOData.StructureBase) -> SAPOData.BigDecimal?
  open func optionalDouble(from source: SAPOData.StructureBase) -> Swift.Double?
  open func optionalEntity(from source: SAPOData.StructureBase) -> SAPOData.EntityValue?
  open func optionalEnum(from source: SAPOData.StructureBase) -> SAPOData.EnumValue?
  open func optionalFloat(from source: SAPOData.StructureBase) -> Swift.Float?
  open func optionalGuid(from source: SAPOData.StructureBase) -> SAPOData.GuidValue?
  open func optionalInt(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalInteger(from source: SAPOData.StructureBase) -> SAPOData.BigInteger?
  open func optionalLong(from source: SAPOData.StructureBase) -> Swift.Int64?
  open func optionalShort(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalString(from source: SAPOData.StructureBase) -> Swift.String?
  open func optionalUnsignedByte(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalValue(from source: SAPOData.StructureBase) -> SAPOData.DataValue?
  open var partnerPath: Swift.String? {
    get
    set(value)
  }
  open func path(_ child: SAPOData.Property) -> SAPOData.DataPath
  open var qualifiedName: Swift.String {
    get
  }
  open var referentialConstraints: SAPOData.StringMap {
    get
    set(value)
  }
  open var relatedEntityType: SAPOData.EntityType {
    get
  }
  open func requiredValue(from source: SAPOData.StructureBase) -> SAPOData.DataValue
  open func setBasicList(in target: SAPOData.StructureBase, to value: SAPOData.DataValueList)
  open func setBinaryValue(in target: SAPOData.StructureBase, to value: Foundation.Data)
  open func setBinaryValue(in target: SAPOData.StructureBase, to value: Foundation.Data?)
  open func setBooleanValue(in target: SAPOData.StructureBase, to value: Swift.Bool)
  open func setBooleanValue(in target: SAPOData.StructureBase, to value: Swift.Bool?)
  open func setByteValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setByteValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func setComplexList(in target: SAPOData.StructureBase, to value: SAPOData.ComplexValueList)
  open func setComplexValue(in target: SAPOData.StructureBase, to value: SAPOData.ComplexValue)
  open func setComplexValue(in target: SAPOData.StructureBase, to value: SAPOData.ComplexValue?)
  open func setDataValue(in target: SAPOData.StructureBase, to value: SAPOData.DataValue?)
  open func setDecimalValue(in target: SAPOData.StructureBase, to value: SAPOData.BigDecimal)
  open func setDecimalValue(in target: SAPOData.StructureBase, to value: SAPOData.BigDecimal?)
  open func setDoubleValue(in target: SAPOData.StructureBase, to value: Swift.Double)
  open func setDoubleValue(in target: SAPOData.StructureBase, to value: Swift.Double?)
  open func setEntityList(in target: SAPOData.StructureBase, to value: SAPOData.EntityValueList)
  open func setEntityValue(in target: SAPOData.StructureBase, to value: SAPOData.EntityValue)
  open func setEntityValue(in target: SAPOData.StructureBase, to value: SAPOData.EntityValue?)
  open func setEnumValue(in target: SAPOData.StructureBase, to value: SAPOData.EnumValue)
  open func setEnumValue(in target: SAPOData.StructureBase, to value: SAPOData.EnumValue?)
  open func setFloatValue(in target: SAPOData.StructureBase, to value: Swift.Float)
  open func setFloatValue(in target: SAPOData.StructureBase, to value: Swift.Float?)
  open func setGuidValue(in target: SAPOData.StructureBase, to value: SAPOData.GuidValue)
  open func setGuidValue(in target: SAPOData.StructureBase, to value: SAPOData.GuidValue?)
  open func setIntValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setIntValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func setIntegerValue(in target: SAPOData.StructureBase, to value: SAPOData.BigInteger)
  open func setIntegerValue(in target: SAPOData.StructureBase, to value: SAPOData.BigInteger?)
  open func setLongValue(in target: SAPOData.StructureBase, to value: Swift.Int64)
  open func setLongValue(in target: SAPOData.StructureBase, to value: Swift.Int64?)
  open func setShortValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setShortValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func setStringValue(in target: SAPOData.StructureBase, to value: Swift.String)
  open func setStringValue(in target: SAPOData.StructureBase, to value: Swift.String?)
  open func setUnsignedByteValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setUnsignedByteValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func shortValue(from source: SAPOData.StructureBase) -> Swift.Int
  open func streamLink(from source: SAPOData.StructureBase) -> SAPOData.StreamLink
  open func stringValue(from source: SAPOData.StructureBase) -> Swift.String
  open var structureType: SAPOData.StructureType {
    get
  }
  override open func toPath() -> SAPOData.DataPath
  override open func toString() -> Swift.String
  final public var type: SAPOData.DataType {
    get
    set(value)
  }
  override final public var typeCode: Swift.Int {
    get
  }
  open func unsignedByteValue(from source: SAPOData.StructureBase) -> Swift.Int
  override open func unwrap() -> SAPOData.DataValue
  open func urlString() -> Swift.String
  @objc deinit
}
open class PropertyArray : SAPOData.ObjectBase {
  @objc deinit
  public static let empty: SAPOData.PropertyArray
  public init(length: Swift.Int, initial: SAPOData.Property)
  @inline(__always) final public func item(at index: Swift.Int) -> SAPOData.Property
  @inline(__always) final public var length: Swift.Int {
    get
  }
  @inline(__always) final public func update(at index: Swift.Int, item value: SAPOData.Property)
}
@_inheritsConvenienceInitializers open class PropertyList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.Property {
    get
    set
  }
  public static let empty: SAPOData.PropertyList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.Property)
  final public func append(contentsOf list: SAPOData.PropertyList)
  final public func appendThis(_ item: SAPOData.Property) -> SAPOData.PropertyList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.PropertyList
  override open var equality: SAPOData.Equality {
    get
  }
  final public func filter(_ predicate: @escaping (SAPOData.Property) -> Swift.Bool) -> SAPOData.PropertyList
  final public func first() -> SAPOData.Property
  open class func fromArray(_ array: Swift.Array<SAPOData.Property>) -> SAPOData.PropertyList
  final public func includes(item: SAPOData.Property) -> Swift.Bool
  final public func indexOf(item: SAPOData.Property, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.Property)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PropertyList)
  final public func item(at index: Swift.Int) -> SAPOData.Property
  final public func last() -> SAPOData.Property
  final public func lastIndexOf(item: SAPOData.Property, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.Property>>
  open class func of(_ items: SAPOData.Property...) -> SAPOData.PropertyList
  open func reversed() -> SAPOData.PropertyList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PropertyList
  final public func single() -> SAPOData.Property
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PropertyList
  final public func sort(by increasing: @escaping (SAPOData.Property, SAPOData.Property) -> Swift.Bool)
  final public func sorted() -> SAPOData.PropertyList
  final public func sorted(by increasing: @escaping (SAPOData.Property, SAPOData.Property) -> Swift.Bool) -> SAPOData.PropertyList
  open func sortedByKind() throws -> SAPOData.PropertyList
  open func sortedByLine() throws -> SAPOData.PropertyList
  open func sortedByName() throws -> SAPOData.PropertyList
  open func toArray() -> Swift.Array<SAPOData.Property>
  open func toNameList() throws -> SAPOData.StringList
  open func toPropertyArray() throws -> SAPOData.PropertyArray
  open func toPropertyMap() throws -> SAPOData.PropertyMap
  final public func update(at index: Swift.Int, item: SAPOData.Property)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.Property>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.Property>>
  @objc deinit
}
open class PropertyMap : SAPOData.MapBase {
  public static let empty: SAPOData.PropertyMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.Property)
  open class func concurrent() -> SAPOData.PropertyMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.PropertyMap
  open func entries() -> SAPOData.PropertyMap.EntryList
  open func filterByName(names: SAPOData.StringList) -> SAPOData.PropertyMap
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.PropertyMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.Property
  open func sortedEntries() -> SAPOData.PropertyMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.PropertyList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.Property)
  open func updateThis(key: Swift.String, value: SAPOData.Property) -> SAPOData.PropertyMap
  open func updateValue(_ value: SAPOData.Property, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.Property?
  open func values() -> SAPOData.PropertyList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.Property {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.PropertyMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.PropertyMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.PropertyMap.Entry)
    final public func append(contentsOf list: SAPOData.PropertyMap.EntryList)
    final public func appendThis(_ item: SAPOData.PropertyMap.Entry) -> SAPOData.PropertyMap.EntryList
    final public func copy() -> SAPOData.PropertyMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.PropertyMap.Entry) -> Swift.Bool) -> SAPOData.PropertyMap.EntryList
    final public func first() -> SAPOData.PropertyMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.PropertyMap.Entry>) -> SAPOData.PropertyMap.EntryList
    final public func includes(item: SAPOData.PropertyMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.PropertyMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.PropertyMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PropertyMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.PropertyMap.Entry
    final public func last() -> SAPOData.PropertyMap.Entry
    final public func lastIndexOf(item: SAPOData.PropertyMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PropertyMap.Entry>>
    open class func of(_ items: SAPOData.PropertyMap.Entry...) -> SAPOData.PropertyMap.EntryList
    open func reversed() -> SAPOData.PropertyMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.PropertyMap.EntryList
    final public func single() -> SAPOData.PropertyMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PropertyMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.PropertyMap.Entry, SAPOData.PropertyMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.PropertyMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.PropertyMap.Entry, SAPOData.PropertyMap.Entry) -> Swift.Bool) -> SAPOData.PropertyMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.PropertyMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.PropertyMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class PropertyPath : SAPOData.QueryValue {
  override public init()
  open func toPath() -> SAPOData.DataPath
  @objc deinit
}
@_inheritsConvenienceInitializers open class PropertyPathList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PropertyPath {
    get
    set
  }
  public static let empty: SAPOData.PropertyPathList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.PropertyPath)
  final public func append(contentsOf list: SAPOData.PropertyPathList)
  final public func appendThis(_ item: SAPOData.PropertyPath) -> SAPOData.PropertyPathList
  final public func copy() -> SAPOData.PropertyPathList
  final public func filter(_ predicate: @escaping (SAPOData.PropertyPath) -> Swift.Bool) -> SAPOData.PropertyPathList
  final public func first() -> SAPOData.PropertyPath
  open class func fromArray(_ array: Swift.Array<SAPOData.PropertyPath>) -> SAPOData.PropertyPathList
  final public func includes(item: SAPOData.PropertyPath) -> Swift.Bool
  final public func indexOf(item: SAPOData.PropertyPath, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.PropertyPath)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PropertyPathList)
  final public func item(at index: Swift.Int) -> SAPOData.PropertyPath
  final public func last() -> SAPOData.PropertyPath
  final public func lastIndexOf(item: SAPOData.PropertyPath, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPath>>
  open class func of(_ items: SAPOData.PropertyPath...) -> SAPOData.PropertyPathList
  open func reversed() -> SAPOData.PropertyPathList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PropertyPathList
  final public func single() -> SAPOData.PropertyPath
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PropertyPathList
  final public func sort(by increasing: @escaping (SAPOData.PropertyPath, SAPOData.PropertyPath) -> Swift.Bool)
  final public func sorted() -> SAPOData.PropertyPathList
  final public func sorted(by increasing: @escaping (SAPOData.PropertyPath, SAPOData.PropertyPath) -> Swift.Bool) -> SAPOData.PropertyPathList
  open func toArray() -> Swift.Array<SAPOData.PropertyPath>
  final public func update(at index: Swift.Int, item: SAPOData.PropertyPath)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPath>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPath>>
  @objc deinit
}
open class PropertyPathMap : SAPOData.MapBase {
  public static let empty: SAPOData.PropertyPathMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.PropertyPathMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.PropertyPathMap
  open func entries() -> SAPOData.PropertyPathMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.PropertyPathMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.PropertyPath
  open func sortedEntries() -> SAPOData.PropertyPathMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.PropertyPathList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.PropertyPath)
  open func updateThis(key: Swift.String, value: SAPOData.PropertyPath) -> SAPOData.PropertyPathMap
  open func updateValue(_ value: SAPOData.PropertyPath, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.PropertyPath?
  open func values() -> SAPOData.PropertyPathList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.PropertyPath {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.PropertyPathMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.PropertyPathMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.PropertyPathMap.Entry)
    final public func append(contentsOf list: SAPOData.PropertyPathMap.EntryList)
    final public func appendThis(_ item: SAPOData.PropertyPathMap.Entry) -> SAPOData.PropertyPathMap.EntryList
    final public func copy() -> SAPOData.PropertyPathMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.PropertyPathMap.Entry) -> Swift.Bool) -> SAPOData.PropertyPathMap.EntryList
    final public func first() -> SAPOData.PropertyPathMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.PropertyPathMap.Entry>) -> SAPOData.PropertyPathMap.EntryList
    final public func includes(item: SAPOData.PropertyPathMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.PropertyPathMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.PropertyPathMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PropertyPathMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.PropertyPathMap.Entry
    final public func last() -> SAPOData.PropertyPathMap.Entry
    final public func lastIndexOf(item: SAPOData.PropertyPathMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPathMap.Entry>>
    open class func of(_ items: SAPOData.PropertyPathMap.Entry...) -> SAPOData.PropertyPathMap.EntryList
    open func reversed() -> SAPOData.PropertyPathMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.PropertyPathMap.EntryList
    final public func single() -> SAPOData.PropertyPathMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PropertyPathMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.PropertyPathMap.Entry, SAPOData.PropertyPathMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.PropertyPathMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.PropertyPathMap.Entry, SAPOData.PropertyPathMap.Entry) -> Swift.Bool) -> SAPOData.PropertyPathMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.PropertyPathMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.PropertyPathMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPathMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPathMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryAlias : SAPOData.DataValue {
  final public var alias: Swift.String
  override public init()
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryConverter : SAPOData.ObjectBase {
  final public var sourceType: Swift.String
  final public var targetType: Swift.String
  final public var propertyMap: SAPOData.PropertyPathMap
  override public init()
  open func convertDataValue(_ value: SAPOData.DataValue?) throws -> SAPOData.DataValue?
  open func convertQueryFilter(_ filter: SAPOData.QueryFilter?) throws -> SAPOData.QueryFilter?
  open func convertQueryValue(_ value: SAPOData.QueryValue) throws -> SAPOData.QueryValue
  open func convertSortItem(_ item: SAPOData.SortItem) throws -> SAPOData.SortItem
  open func convertSortItems(_ items: SAPOData.SortItemList?) throws -> SAPOData.SortItemList?
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryFilter : SAPOData.DataValue {
  override public init()
  open func and(_ filter: SAPOData.DataValue) -> SAPOData.QueryFilter
  override open var dataType: SAPOData.DataType {
    get
  }
  open func find(property: SAPOData.Property, operatorCode: Swift.Int) -> SAPOData.DataValue?
  open class func from(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func not() -> SAPOData.QueryFilter
  open func or(_ filter: SAPOData.DataValue) -> SAPOData.QueryFilter
  override open func toString() -> Swift.String
  final public var value: SAPOData.DataValue {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryFunction : SAPOData.ObjectBase {
  final public var code: (Swift.Int)
  final public var name: Swift.String
  final public var method: Swift.String
  final public var minArity: (Swift.Int)
  final public var maxArity: (Swift.Int)
  public static let functionMap: SAPOData.QueryFunctionMap
  override public init()
  open class func asType(_ type: SAPOData.DataType, value: SAPOData.DataValue? = nil) -> SAPOData.QueryValue
  open class func ceiling(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func concat(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func contains(_ value: SAPOData.DataValue, searchValue: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func custom(name: Swift.String, arguments: SAPOData.DataValueList) -> SAPOData.QueryValue
  open class func date(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func day(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func endsWith(_ value: SAPOData.DataValue, suffix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func floor(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func forCode(_ code: Swift.Int) -> SAPOData.QueryFunction
  open class func forName(_ name: Swift.String) throws -> SAPOData.QueryFunction
  open class func fractionalSeconds(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func geoDistance(from: SAPOData.DataValue, to: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func geoIntersects(point: SAPOData.DataValue, polygon: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func geoLength(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func hour(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func indexOf(_ value: SAPOData.DataValue, searchValue: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func isType(_ type: SAPOData.DataType, value: SAPOData.DataValue? = nil) -> SAPOData.QueryFilter
  open class func length(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func maxDateTime() -> SAPOData.QueryValue
  open class func minDateTime() -> SAPOData.QueryValue
  open class func minute(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func month(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func now() -> SAPOData.QueryValue
  open class func round(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func second(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func startsWith(_ value: SAPOData.DataValue, prefix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func substring(_ value: SAPOData.DataValue, start: SAPOData.DataValue, length: SAPOData.DataValue? = nil) -> SAPOData.QueryValue
  open class func time(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func toLower(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  override open func toString() -> Swift.String
  open class func toUpper(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func totalOffsetMinutes(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func trim(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func year(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  @objc deinit
}
open class QueryFunctionCall : SAPOData.DataValue {
  final public var callEvaluator: SAPOData.QueryFunctionCall.Evaluator?
  public init(queryFunction: SAPOData.QueryFunction, callArguments: SAPOData.DataValueList)
  final public var callArguments: SAPOData.DataValueList {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  final public var queryFunction: SAPOData.QueryFunction {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @_inheritsConvenienceInitializers open class Evaluator : SAPOData.ObjectBase {
    override public init()
    open func evaluate(call: SAPOData.QueryFunctionCall, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueryFunctionCode {
  public static let contains: (Swift.Int)
  public static let endsWith: (Swift.Int)
  public static let startsWith: (Swift.Int)
  public static let length: (Swift.Int)
  public static let indexOf: (Swift.Int)
  public static let substring: (Swift.Int)
  public static let toLower: (Swift.Int)
  public static let toUpper: (Swift.Int)
  public static let trim: (Swift.Int)
  public static let concat: (Swift.Int)
  public static let year: (Swift.Int)
  public static let month: (Swift.Int)
  public static let day: (Swift.Int)
  public static let hour: (Swift.Int)
  public static let minute: (Swift.Int)
  public static let second: (Swift.Int)
  public static let fractionalSeconds: (Swift.Int)
  public static let date: (Swift.Int)
  public static let time: (Swift.Int)
  public static let totalOffsetMinutes: (Swift.Int)
  public static let now: (Swift.Int)
  public static let minDateTime: (Swift.Int)
  public static let maxDateTime: (Swift.Int)
  public static let round: (Swift.Int)
  public static let floor: (Swift.Int)
  public static let ceiling: (Swift.Int)
  public static let cast: (Swift.Int)
  public static let isof: (Swift.Int)
  public static let geoDistance: (Swift.Int)
  public static let geoIntersects: (Swift.Int)
  public static let geoLength: (Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryFunctionList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.QueryFunction {
    get
    set
  }
  public static let empty: SAPOData.QueryFunctionList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.QueryFunction)
  final public func append(contentsOf list: SAPOData.QueryFunctionList)
  final public func appendThis(_ item: SAPOData.QueryFunction) -> SAPOData.QueryFunctionList
  final public func copy() -> SAPOData.QueryFunctionList
  final public func filter(_ predicate: @escaping (SAPOData.QueryFunction) -> Swift.Bool) -> SAPOData.QueryFunctionList
  final public func first() -> SAPOData.QueryFunction
  open class func fromArray(_ array: Swift.Array<SAPOData.QueryFunction>) -> SAPOData.QueryFunctionList
  final public func includes(item: SAPOData.QueryFunction) -> Swift.Bool
  final public func indexOf(item: SAPOData.QueryFunction, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.QueryFunction)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryFunctionList)
  final public func item(at index: Swift.Int) -> SAPOData.QueryFunction
  final public func last() -> SAPOData.QueryFunction
  final public func lastIndexOf(item: SAPOData.QueryFunction, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunction>>
  open class func of(_ items: SAPOData.QueryFunction...) -> SAPOData.QueryFunctionList
  open func reversed() -> SAPOData.QueryFunctionList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryFunctionList
  final public func single() -> SAPOData.QueryFunction
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryFunctionList
  final public func sort(by increasing: @escaping (SAPOData.QueryFunction, SAPOData.QueryFunction) -> Swift.Bool)
  final public func sorted() -> SAPOData.QueryFunctionList
  final public func sorted(by increasing: @escaping (SAPOData.QueryFunction, SAPOData.QueryFunction) -> Swift.Bool) -> SAPOData.QueryFunctionList
  open func toArray() -> Swift.Array<SAPOData.QueryFunction>
  final public func update(at index: Swift.Int, item: SAPOData.QueryFunction)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunction>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunction>>
  @objc deinit
}
open class QueryFunctionMap : SAPOData.MapBase {
  public static let empty: SAPOData.QueryFunctionMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.QueryFunctionMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.QueryFunctionMap
  open func entries() -> SAPOData.QueryFunctionMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.QueryFunctionMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.QueryFunction
  open func sortedEntries() -> SAPOData.QueryFunctionMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.QueryFunctionList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.QueryFunction)
  open func updateThis(key: Swift.String, value: SAPOData.QueryFunction) -> SAPOData.QueryFunctionMap
  open func updateValue(_ value: SAPOData.QueryFunction, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.QueryFunction?
  open func values() -> SAPOData.QueryFunctionList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.QueryFunction {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.QueryFunctionMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.QueryFunctionMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.QueryFunctionMap.Entry)
    final public func append(contentsOf list: SAPOData.QueryFunctionMap.EntryList)
    final public func appendThis(_ item: SAPOData.QueryFunctionMap.Entry) -> SAPOData.QueryFunctionMap.EntryList
    final public func copy() -> SAPOData.QueryFunctionMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.QueryFunctionMap.Entry) -> Swift.Bool) -> SAPOData.QueryFunctionMap.EntryList
    final public func first() -> SAPOData.QueryFunctionMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.QueryFunctionMap.Entry>) -> SAPOData.QueryFunctionMap.EntryList
    final public func includes(item: SAPOData.QueryFunctionMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.QueryFunctionMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.QueryFunctionMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryFunctionMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.QueryFunctionMap.Entry
    final public func last() -> SAPOData.QueryFunctionMap.Entry
    final public func lastIndexOf(item: SAPOData.QueryFunctionMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunctionMap.Entry>>
    open class func of(_ items: SAPOData.QueryFunctionMap.Entry...) -> SAPOData.QueryFunctionMap.EntryList
    open func reversed() -> SAPOData.QueryFunctionMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryFunctionMap.EntryList
    final public func single() -> SAPOData.QueryFunctionMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryFunctionMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.QueryFunctionMap.Entry, SAPOData.QueryFunctionMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.QueryFunctionMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.QueryFunctionMap.Entry, SAPOData.QueryFunctionMap.Entry) -> Swift.Bool) -> SAPOData.QueryFunctionMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.QueryFunctionMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.QueryFunctionMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunctionMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunctionMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueryInternal {
  public static func applyFunction(call: SAPOData.QueryFunctionCall, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func applyOperator(call: SAPOData.QueryOperatorCall, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func clearFlagRecursively(query: SAPOData.DataQuery, flag: Swift.Int)
  public static func evaluate(_ value: SAPOData.DataValue?, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func evaluateBoolean(_ value: SAPOData.DataValue?, context: SAPOData.StructureBase?) throws -> SAPOData.BooleanValue?
  public static func evaluatePath(_ path: SAPOData.DataPath, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func evaluateString(_ value: SAPOData.DataValue?, context: SAPOData.StructureBase?) throws -> SAPOData.StringValue?
  public static func immutableFilter(entityType: SAPOData.EntityType, queryFilter: SAPOData.QueryFilter?) -> Swift.Bool
  public static func matchFilter(_ filter: SAPOData.QueryFilter?, context: SAPOData.StructureBase) throws -> Swift.Bool
  public static func referenced(properties: SAPOData.StringSet, functions: SAPOData.StringSet?, operators: SAPOData.StringSet?, value: SAPOData.DataValue?)
  public static func setFlagRecursively(query: SAPOData.DataQuery, flag: Swift.Int)
  public static func sparseIndexMap(query: SAPOData.DataQuery) -> SAPOData.SparseIndexMap?
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryOperator : SAPOData.ObjectBase {
  public static let operatorMap: SAPOData.QueryOperatorMap
  override public init()
  open class func add(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func all(_ value: SAPOData.DataValue, lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  open class func and(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func any(_ value: SAPOData.DataValue, lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  @inline(__always) final public var arity: Swift.Int {
    get
  }
  @inline(__always) final public var code: Swift.Int {
    get
  }
  open class func divide(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func equal(_ left: SAPOData.DataValue?, _ right: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open class func forCode(_ code: Swift.Int) -> SAPOData.QueryOperator
  open class func forName(_ name: Swift.String) throws -> SAPOData.QueryOperator
  open class func greaterEqual(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func greaterThan(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func has(_ value: SAPOData.DataValue, _ flags: SAPOData.EnumValue) -> SAPOData.QueryFilter
  open class func inList(_ value: SAPOData.DataValue, _ list: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func lessEqual(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func lessThan(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  @inline(__always) final public var method: Swift.String {
    get
  }
  open class func modulo(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func multiply(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  @inline(__always) final public var name: Swift.String {
    get
  }
  open class func negate(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func not(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func notEqual(_ left: SAPOData.DataValue?, _ right: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open class func or(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  @inline(__always) final public var priority: Swift.Int {
    get
  }
  open class func subtract(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  override open func toString() -> Swift.String
  @objc deinit
}
open class QueryOperatorCall : SAPOData.DataValue {
  public init(queryOperator: SAPOData.QueryOperator, callArguments: SAPOData.DataValueList)
  final public var callArguments: SAPOData.DataValueList {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  final public var queryOperator: SAPOData.QueryOperator {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueryOperatorCode {
  public static let equal: (Swift.Int)
  public static let notEqual: (Swift.Int)
  public static let greaterThan: (Swift.Int)
  public static let greaterEqual: (Swift.Int)
  public static let lessThan: (Swift.Int)
  public static let lessEqual: (Swift.Int)
  public static let and: (Swift.Int)
  public static let or: (Swift.Int)
  public static let not: (Swift.Int)
  public static let negate: (Swift.Int)
  public static let add: (Swift.Int)
  public static let subtract: (Swift.Int)
  public static let multiply: (Swift.Int)
  public static let divide: (Swift.Int)
  public static let modulo: (Swift.Int)
  public static let any: (Swift.Int)
  public static let all: (Swift.Int)
  public static let has: (Swift.Int)
  public static let inList: (Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryOperatorList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.QueryOperator {
    get
    set
  }
  public static let empty: SAPOData.QueryOperatorList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.QueryOperator)
  final public func append(contentsOf list: SAPOData.QueryOperatorList)
  final public func appendThis(_ item: SAPOData.QueryOperator) -> SAPOData.QueryOperatorList
  final public func copy() -> SAPOData.QueryOperatorList
  final public func filter(_ predicate: @escaping (SAPOData.QueryOperator) -> Swift.Bool) -> SAPOData.QueryOperatorList
  final public func first() -> SAPOData.QueryOperator
  open class func fromArray(_ array: Swift.Array<SAPOData.QueryOperator>) -> SAPOData.QueryOperatorList
  final public func includes(item: SAPOData.QueryOperator) -> Swift.Bool
  final public func indexOf(item: SAPOData.QueryOperator, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.QueryOperator)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryOperatorList)
  final public func item(at index: Swift.Int) -> SAPOData.QueryOperator
  final public func last() -> SAPOData.QueryOperator
  final public func lastIndexOf(item: SAPOData.QueryOperator, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperator>>
  open class func of(_ items: SAPOData.QueryOperator...) -> SAPOData.QueryOperatorList
  open func reversed() -> SAPOData.QueryOperatorList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryOperatorList
  final public func single() -> SAPOData.QueryOperator
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryOperatorList
  final public func sort(by increasing: @escaping (SAPOData.QueryOperator, SAPOData.QueryOperator) -> Swift.Bool)
  final public func sorted() -> SAPOData.QueryOperatorList
  final public func sorted(by increasing: @escaping (SAPOData.QueryOperator, SAPOData.QueryOperator) -> Swift.Bool) -> SAPOData.QueryOperatorList
  open func toArray() -> Swift.Array<SAPOData.QueryOperator>
  final public func update(at index: Swift.Int, item: SAPOData.QueryOperator)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperator>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperator>>
  @objc deinit
}
open class QueryOperatorMap : SAPOData.MapBase {
  public static let empty: SAPOData.QueryOperatorMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.QueryOperatorMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.QueryOperatorMap
  open func entries() -> SAPOData.QueryOperatorMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.QueryOperatorMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.QueryOperator
  open func sortedEntries() -> SAPOData.QueryOperatorMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.QueryOperatorList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.QueryOperator)
  open func updateThis(key: Swift.String, value: SAPOData.QueryOperator) -> SAPOData.QueryOperatorMap
  open func updateValue(_ value: SAPOData.QueryOperator, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.QueryOperator?
  open func values() -> SAPOData.QueryOperatorList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.QueryOperator {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.QueryOperatorMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.QueryOperatorMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.QueryOperatorMap.Entry)
    final public func append(contentsOf list: SAPOData.QueryOperatorMap.EntryList)
    final public func appendThis(_ item: SAPOData.QueryOperatorMap.Entry) -> SAPOData.QueryOperatorMap.EntryList
    final public func copy() -> SAPOData.QueryOperatorMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.QueryOperatorMap.Entry) -> Swift.Bool) -> SAPOData.QueryOperatorMap.EntryList
    final public func first() -> SAPOData.QueryOperatorMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.QueryOperatorMap.Entry>) -> SAPOData.QueryOperatorMap.EntryList
    final public func includes(item: SAPOData.QueryOperatorMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.QueryOperatorMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.QueryOperatorMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryOperatorMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.QueryOperatorMap.Entry
    final public func last() -> SAPOData.QueryOperatorMap.Entry
    final public func lastIndexOf(item: SAPOData.QueryOperatorMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperatorMap.Entry>>
    open class func of(_ items: SAPOData.QueryOperatorMap.Entry...) -> SAPOData.QueryOperatorMap.EntryList
    open func reversed() -> SAPOData.QueryOperatorMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryOperatorMap.EntryList
    final public func single() -> SAPOData.QueryOperatorMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryOperatorMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.QueryOperatorMap.Entry, SAPOData.QueryOperatorMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.QueryOperatorMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.QueryOperatorMap.Entry, SAPOData.QueryOperatorMap.Entry) -> Swift.Bool) -> SAPOData.QueryOperatorMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.QueryOperatorMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.QueryOperatorMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperatorMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperatorMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
open class QueryResult : SAPOData.ObjectBase {
  public init(query: SAPOData.DataQuery, result: SAPOData.DataValue?, status: Swift.Int = (200 as Int), error: SAPOData.DataServiceError? = nil)
  open func basicList() throws -> SAPOData.DataValueList
  open func byteStream() throws -> SAPOData.ByteStream
  open func charStream() throws -> SAPOData.CharStream
  open func check(fixOptions: Swift.Int = (0 as Int)) throws
  open func checkedResult() throws -> SAPOData.DataValue?
  open func complexList() throws -> SAPOData.ComplexValueList
  open func count() throws -> Swift.Int64
  open func deltaLink() throws -> Swift.String?
  open func deltaStream() throws -> SAPOData.DeltaStream
  open func entityList() throws -> SAPOData.EntityValueList
  open func entityStream() throws -> SAPOData.EntityStream
  open var error: SAPOData.DataServiceError? {
    get
  }
  open func inlineCount() throws -> Swift.Int64
  open func nextLink() throws -> Swift.String?
  open func nextQuery() throws -> SAPOData.DataQuery
  open func optionalBasic() throws -> SAPOData.DataValue?
  open func optionalComplex() throws -> SAPOData.ComplexValue?
  open func optionalEntity() throws -> SAPOData.EntityValue?
  open var query: SAPOData.DataQuery {
    get
  }
  open func requiredBasic() throws -> SAPOData.DataValue
  open func requiredComplex() throws -> SAPOData.ComplexValue
  open func requiredEntity() throws -> SAPOData.EntityValue
  open var result: SAPOData.DataValue? {
    get
  }
  open var status: Swift.Int {
    get
  }
  open func withDefaults() throws -> SAPOData.QueryResult
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryResultError : SAPOData.DataError {
  override public init()
  open class func withCause(_ cause: (any Swift.Error)?) -> SAPOData.QueryResultError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.QueryResultError
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryType : SAPOData.DataValue {
  override public init()
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func of(type: SAPOData.DataType) throws -> SAPOData.QueryType
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryValue : SAPOData.DataValue {
  public func concat(_ text: Swift.String) -> SAPOData.QueryValue
  public func contains(_ text: Swift.String) -> SAPOData.QueryFilter
  public func endsWith(_ suffix: Swift.String) -> SAPOData.QueryFilter
  public func indexOf(_ text: Swift.String) -> SAPOData.QueryValue
  public func startsWith(_ prefix: Swift.String) -> SAPOData.QueryFilter
  public func substring(_ start: Swift.Int, _ length: Swift.Int? = nil) -> SAPOData.QueryValue
  public func equal(_ value: Swift.Bool) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func equal(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func equal(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.String) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Bool) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func notEqual(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func notEqual(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.String) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func lessThan(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func lessThan(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.String) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func lessEqual(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func lessEqual(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.String) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func greaterThan(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func greaterThan(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.String) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.String) -> SAPOData.QueryFilter
  public func add(_ value: Swift.Int) -> SAPOData.QueryValue
  public func add(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func add(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func add(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func add(_ value: Swift.Float) -> SAPOData.QueryValue
  public func add(_ value: Swift.Double) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Int) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func subtract(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func subtract(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Float) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Double) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Int) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func multiply(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func multiply(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Float) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Double) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Int) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func divide(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func divide(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Float) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Double) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Int) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func modulo(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func modulo(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Float) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Double) -> SAPOData.QueryValue
  @available(swift, deprecated: 4.0, message: "Use the variant with unlabelld parameters.")
  public func any(lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  @available(swift, deprecated: 4.0, message: "Use the variant with unlabeled parameters.")
  public func all(lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  override public init()
  open func add(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func all(_ lambda: SAPOData.DataPath, _ match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  open func any(_ lambda: SAPOData.DataPath, _ match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  open func asType(_ type: SAPOData.DataType) -> SAPOData.QueryValue
  open func average(as alias: Swift.String) -> SAPOData.AggregateValue
  open func ceiling() -> SAPOData.QueryValue
  open func concat(_ text: SAPOData.DataValue) -> SAPOData.QueryValue
  open func contains(_ text: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func countDistinct(as alias: Swift.String) -> SAPOData.AggregateValue
  override open var dataType: SAPOData.DataType {
    get
  }
  open func date() -> SAPOData.QueryValue
  open func day() -> SAPOData.QueryValue
  open func divide(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func endsWith(_ suffix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func equal(_ value: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open func floor() -> SAPOData.QueryValue
  open func fractionalSeconds() -> SAPOData.QueryValue
  open func geoDistance(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func geoIntersects(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func geoLength() -> SAPOData.QueryValue
  open func greaterEqual(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func greaterThan(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func has(_ flag: Swift.Int) -> SAPOData.QueryFilter
  open func hour() -> SAPOData.QueryValue
  open func inList(_ list: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func indexOf(_ text: SAPOData.DataValue) -> SAPOData.QueryValue
  open func isNull() -> SAPOData.QueryFilter
  open func isType(_ type: SAPOData.DataType) -> SAPOData.QueryFilter
  open func length() -> SAPOData.QueryValue
  open func lessEqual(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func lessThan(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func maximum(as alias: Swift.String) -> SAPOData.AggregateValue
  open func minimum(as alias: Swift.String) -> SAPOData.AggregateValue
  open func minute() -> SAPOData.QueryValue
  open func modulo(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func month() -> SAPOData.QueryValue
  open func multiply(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func negate() -> SAPOData.QueryValue
  open func notEqual(_ value: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open func notNull() -> SAPOData.QueryFilter
  open func round() -> SAPOData.QueryValue
  open func second() -> SAPOData.QueryValue
  open func startsWith(_ prefix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func substring(_ start: SAPOData.DataValue, _ length: SAPOData.DataValue? = nil) -> SAPOData.QueryValue
  open func subtract(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func sum(as alias: Swift.String) -> SAPOData.AggregateValue
  open func time() -> SAPOData.QueryValue
  open func toLower() -> SAPOData.QueryValue
  override open func toString() -> Swift.String
  open func toUpper() -> SAPOData.QueryValue
  open func totalOffsetMinutes() -> SAPOData.QueryValue
  open func trim() -> SAPOData.QueryValue
  open func unwrap() -> SAPOData.DataValue
  open class func wrap(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func year() -> SAPOData.QueryValue
  @objc deinit
}
@_inheritsConvenienceInitializers open class RequestCancelledError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class RequestOptions : SAPOData.ObjectBase {
  public static let none: SAPOData.RequestOptions
  override public init()
  open var canCombineRequests: Swift.Bool {
    get
    set(value)
  }
  open var cancelToken: SAPOData.CancelToken? {
    get
    set(value)
  }
  open func cancelable(_ token: SAPOData.CancelToken = CancelToken()) -> SAPOData.RequestOptions
  open var captureResponseHeaders: Swift.AnyObject? {
    get
    set(value)
  }
  open var changeSet: Swift.String? {
    get
    set(value)
  }
  open func copy() -> SAPOData.RequestOptions
  open func custom(_ tag: Swift.String) -> SAPOData.RequestOptions
  open var customTag: Swift.String? {
    get
    set(value)
  }
  open var mustRetainCreates: Swift.Bool {
    get
    set(value)
  }
  open func noCombine() -> SAPOData.RequestOptions
  open func noRetain() -> SAPOData.RequestOptions
  open class func noneIfNull(options: SAPOData.RequestOptions?) -> SAPOData.RequestOptions
  open var preferNoContent: Swift.Bool {
    get
    set(value)
  }
  open var repeatabilityFirstSent: SAPOData.GlobalDateTime? {
    get
    set(value)
  }
  open var repeatabilityRequestID: SAPOData.GuidValue? {
    get
    set(value)
  }
  open func repeatable(requestID: SAPOData.GuidValue, firstSent: SAPOData.GlobalDateTime) -> SAPOData.RequestOptions
  open var sendEmptyUpdate: Swift.Bool {
    get
    set(value)
  }
  open func transaction(_ id: Swift.String) -> SAPOData.RequestOptions
  open func update(_ mode: SAPOData.UpdateMode) -> SAPOData.RequestOptions
  open var updateMode: SAPOData.UpdateMode {
    get
    set(value)
  }
  open func upload(_ group: Swift.String) -> SAPOData.RequestOptions
  open var uploadGroup: Swift.String? {
    get
    set(value)
  }
  open func useBatch() -> SAPOData.RequestOptions
  open var useBatchRequest: Swift.Bool {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ResourcePath : SAPOData.ObjectBase {
  override public init()
  open var dataPath: SAPOData.DataPath? {
    get
    set(value)
  }
  open var entityKey: SAPOData.EntityKey? {
    get
    set(value)
  }
  open var entitySet: SAPOData.EntitySet? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SearchExpression : SAPOData.ObjectBase {
  public static let operatorNot: (Swift.Int)
  public static let operatorAnd: (Swift.Int)
  public static let operatorOr: (Swift.Int)
  override public init()
  @inline(__always) open var `operator`: Swift.Int {
    get
  }
  open func and(_ other: SAPOData.SearchExpression) -> SAPOData.SearchExpression
  open var isPhrase: Swift.Bool {
    get
  }
  open var isTerm: Swift.Bool {
    get
  }
  open var isWord: Swift.Bool {
    get
  }
  open func matches(words: SAPOData.StringList) -> Swift.Bool
  open func matchesWithOptions(words: SAPOData.StringList, options: SAPOData.SearchOptions) -> Swift.Bool
  open func not() -> SAPOData.SearchExpression
  open var operands: SAPOData.SearchExpressionList {
    get
  }
  open func or(_ other: SAPOData.SearchExpression) -> SAPOData.SearchExpression
  open func urlString() -> Swift.String
  open class func with(operator: Swift.Int, operands: SAPOData.SearchExpressionList) -> SAPOData.SearchExpression
  open var words: SAPOData.StringList {
    get
  }
  open class func wordsInText(_ text: Swift.String) -> SAPOData.StringList
  @objc deinit
}
@_inheritsConvenienceInitializers open class SearchExpressionList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SearchExpression {
    get
    set
  }
  public static let empty: SAPOData.SearchExpressionList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.SearchExpression)
  final public func append(contentsOf list: SAPOData.SearchExpressionList)
  final public func appendThis(_ item: SAPOData.SearchExpression) -> SAPOData.SearchExpressionList
  final public func copy() -> SAPOData.SearchExpressionList
  final public func filter(_ predicate: @escaping (SAPOData.SearchExpression) -> Swift.Bool) -> SAPOData.SearchExpressionList
  final public func first() -> SAPOData.SearchExpression
  open class func fromArray(_ array: Swift.Array<SAPOData.SearchExpression>) -> SAPOData.SearchExpressionList
  final public func includes(item: SAPOData.SearchExpression) -> Swift.Bool
  final public func indexOf(item: SAPOData.SearchExpression, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.SearchExpression)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.SearchExpressionList)
  final public func item(at index: Swift.Int) -> SAPOData.SearchExpression
  final public func last() -> SAPOData.SearchExpression
  final public func lastIndexOf(item: SAPOData.SearchExpression, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SearchExpression>>
  open class func of(_ items: SAPOData.SearchExpression...) -> SAPOData.SearchExpressionList
  open func reversed() -> SAPOData.SearchExpressionList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SearchExpressionList
  final public func single() -> SAPOData.SearchExpression
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SearchExpressionList
  final public func sort(by increasing: @escaping (SAPOData.SearchExpression, SAPOData.SearchExpression) -> Swift.Bool)
  final public func sorted() -> SAPOData.SearchExpressionList
  final public func sorted(by increasing: @escaping (SAPOData.SearchExpression, SAPOData.SearchExpression) -> Swift.Bool) -> SAPOData.SearchExpressionList
  open func toArray() -> Swift.Array<SAPOData.SearchExpression>
  final public func update(at index: Swift.Int, item: SAPOData.SearchExpression)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SearchExpression>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SearchExpression>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SearchOptions : SAPOData.ObjectBase {
  public static let none: SAPOData.SearchOptions
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class SearchTerm : SAPOData.SearchExpression {
  public static let empty: SAPOData.SearchTerm
  override open var `operator`: Swift.Int {
    get
  }
  open var isEmpty: Swift.Bool {
    get
  }
  override open var isPhrase: Swift.Bool {
    get
  }
  override open var isTerm: Swift.Bool {
    get
  }
  override open var isWord: Swift.Bool {
    get
  }
  override open func matchesWithOptions(words: SAPOData.StringList, options: SAPOData.SearchOptions) -> Swift.Bool
  override open var operands: SAPOData.SearchExpressionList {
    get
  }
  open class func phrase(_ words: SAPOData.StringList) -> SAPOData.SearchTerm
  open class func prefix(_ text: Swift.String, limit: Swift.Int = (0 as Int)) -> SAPOData.SearchTerm
  override open func toString() -> Swift.String
  override open func urlString() -> Swift.String
  open class func word(_ text: Swift.String) -> SAPOData.SearchTerm
  override open var words: SAPOData.StringList {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SelectItem : SAPOData.ObjectBase {
  public static func of(property: SAPOData.Property) -> SAPOData.SelectItem
  final public var isHidden: Swift.Bool
  override public init()
  open class func of(_ item: SAPOData.PropertyPath) -> SAPOData.SelectItem
  final public var path: SAPOData.DataPath {
    get
    set(value)
  }
  open func toProperty() -> SAPOData.Property?
  open func toRequiredProperty() -> SAPOData.Property
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class SelectItemList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SelectItem {
    get
    set
  }
  public static let empty: SAPOData.SelectItemList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.SelectItem)
  final public func append(contentsOf list: SAPOData.SelectItemList)
  final public func appendThis(_ item: SAPOData.SelectItem) -> SAPOData.SelectItemList
  final public func copy() -> SAPOData.SelectItemList
  final public func filter(_ predicate: @escaping (SAPOData.SelectItem) -> Swift.Bool) -> SAPOData.SelectItemList
  final public func first() -> SAPOData.SelectItem
  open func forProperty(_ property: SAPOData.Property) throws -> SAPOData.SelectItem?
  open class func fromArray(_ array: Swift.Array<SAPOData.SelectItem>) -> SAPOData.SelectItemList
  open func hasProperty(_ property: SAPOData.Property) throws -> Swift.Bool
  final public func includes(item: SAPOData.SelectItem) -> Swift.Bool
  final public func indexOf(item: SAPOData.SelectItem, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.SelectItem)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.SelectItemList)
  final public func item(at index: Swift.Int) -> SAPOData.SelectItem
  final public func last() -> SAPOData.SelectItem
  final public func lastIndexOf(item: SAPOData.SelectItem, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SelectItem>>
  open class func of(_ items: SAPOData.SelectItem...) -> SAPOData.SelectItemList
  open func reversed() -> SAPOData.SelectItemList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SelectItemList
  final public func single() -> SAPOData.SelectItem
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SelectItemList
  final public func sort(by increasing: @escaping (SAPOData.SelectItem, SAPOData.SelectItem) -> Swift.Bool)
  final public func sorted() -> SAPOData.SelectItemList
  final public func sorted(by increasing: @escaping (SAPOData.SelectItem, SAPOData.SelectItem) -> Swift.Bool) -> SAPOData.SelectItemList
  open func toArray() -> Swift.Array<SAPOData.SelectItem>
  final public func update(at index: Swift.Int, item: SAPOData.SelectItem)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SelectItem>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SelectItem>>
  @objc deinit
}
open class SetBase : SAPOData.DataValue {
  final public var count: Swift.Int {
    get
  }
  public init(capacity: Swift.Int)
  override open var dataType: SAPOData.DataType {
    get
  }
  @inline(__always) final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) final public var isNotEmpty: Swift.Bool {
    get
  }
  open func makeImmutable()
  open func removeAll()
  @inline(__always) final public var size: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  @inline(__always) final public var untypedSet: SAPOData.UntypedSet {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ShortList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.ShortList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Int)
  final public func append(contentsOf list: SAPOData.ShortList)
  final public func appendThis(_ item: Swift.Int) -> SAPOData.ShortList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.ShortList
  final public func filter(_ predicate: @escaping (Swift.Int) -> Swift.Bool) -> SAPOData.ShortList
  final public func first() -> Swift.Int
  open class func fromArray(_ array: Swift.Array<Swift.Int>) -> SAPOData.ShortList
  final public func includes(item: Swift.Int) -> Swift.Bool
  final public func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Int)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.ShortList)
  final public func item(at index: Swift.Int) -> Swift.Int
  final public func last() -> Swift.Int
  final public func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func of(_ items: Swift.Int...) -> SAPOData.ShortList
  open func reversed() -> SAPOData.ShortList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ShortList
  final public func single() -> Swift.Int
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ShortList
  final public func sort(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool)
  final public func sorted() -> SAPOData.ShortList
  final public func sorted(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool) -> SAPOData.ShortList
  open func toArray() -> Swift.Array<Swift.Int>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Swift.Int)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ShortValue : SAPOData.DataValue {
  public static let zero: SAPOData.ShortValue
  open class func compare(_ left: SAPOData.ShortValue, _ right: SAPOData.ShortValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.ShortValue?, _ right: SAPOData.ShortValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.ShortValue
  open class func of(optional value: Swift.Int?) -> SAPOData.ShortValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  @inline(__always) final public var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SimpleSQLParser : SAPOData.ObjectBase {
  override public init()
  open class func addNewlineBefore(token: Swift.String, tokens: SAPOData.StringList, atAnyLevel: Swift.Bool = false) throws
  open class func findAnyLevel(token: Swift.String, tokens: SAPOData.StringList, start: Swift.Int = (0 as Int)) throws -> Swift.Int
  open class func findTopLevel(token: Swift.String, tokens: SAPOData.StringList, start: Swift.Int = (0 as Int)) throws -> Swift.Int
  open class func hasTopLevel(token: Swift.String, tokens: SAPOData.StringList) throws -> Swift.Bool
  open class func intoBindings(tokens: SAPOData.StringList) throws -> SAPOData.StringList
  open class func joinTokensWithMinimalSpaces(text: Swift.String, lowerKeywords: Swift.Bool = true) throws -> Swift.String
  open class func joinTokensWithRegularSpaces(text: Swift.String, lowerKeywords: Swift.Bool = true) throws -> Swift.String
  open class func selectColumns(tokens: SAPOData.StringList) throws -> SAPOData.StringList
  open class func tokensWithMinimalSpaces(text: Swift.String, lowerKeywords: Swift.Bool = true) throws -> SAPOData.StringList
  open class func tokensWithRegularSpaces(text: Swift.String, lowerKeywords: Swift.Bool = true) throws -> SAPOData.StringList
  open class func tokensWithoutSpaces(text: Swift.String, lowerKeywords: Swift.Bool = true) throws -> SAPOData.StringList
  @objc deinit
}
@_inheritsConvenienceInitializers open class SimpleType : SAPOData.DataType {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  public static let undefined: SAPOData.EnumType
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var isClientOnly: Swift.Bool
  final public var sourceLine: (Swift.Int)
  final public var typeFacets: SAPOData.TypeFacets?
  final public var isExtension: Swift.Bool
  final public var isInferred: Swift.Bool
  final public var isUnicode: Swift.Bool
  final public var minLength: (Swift.Int)
  final public var maxLength: (Swift.Int)
  final public var precision: (Swift.Int)
  final public var scale: (Swift.Int)
  final public var srid: (Swift.Int)
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  override open var code: Swift.Int {
    get
  }
  open var derivedFrom: SAPOData.DataType {
    get
    set(value)
  }
  open var fixedLength: Swift.Bool {
    get
  }
  override open var isDerived: Swift.Bool {
    get
  }
  open var isOpenEnum: Swift.Bool {
    get
  }
  override open var name: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class SimpleTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SimpleType {
    get
    set
  }
  public static let empty: SAPOData.SimpleTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.SimpleType)
  final public func append(contentsOf list: SAPOData.SimpleTypeList)
  final public func appendThis(_ item: SAPOData.SimpleType) -> SAPOData.SimpleTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.SimpleTypeList
  final public func filter(_ predicate: @escaping (SAPOData.SimpleType) -> Swift.Bool) -> SAPOData.SimpleTypeList
  final public func first() -> SAPOData.SimpleType
  open class func fromArray(_ array: Swift.Array<SAPOData.SimpleType>) -> SAPOData.SimpleTypeList
  final public func includes(item: SAPOData.SimpleType) -> Swift.Bool
  final public func indexOf(item: SAPOData.SimpleType, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.SimpleType)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.SimpleTypeList)
  final public func item(at index: Swift.Int) -> SAPOData.SimpleType
  final public func last() -> SAPOData.SimpleType
  final public func lastIndexOf(item: SAPOData.SimpleType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SimpleType>>
  open class func of(_ items: SAPOData.SimpleType...) -> SAPOData.SimpleTypeList
  open func reversed() -> SAPOData.SimpleTypeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SimpleTypeList
  final public func single() -> SAPOData.SimpleType
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SimpleTypeList
  final public func sort(by increasing: @escaping (SAPOData.SimpleType, SAPOData.SimpleType) -> Swift.Bool)
  final public func sorted() -> SAPOData.SimpleTypeList
  final public func sorted(by increasing: @escaping (SAPOData.SimpleType, SAPOData.SimpleType) -> Swift.Bool) -> SAPOData.SimpleTypeList
  open func toArray() -> Swift.Array<SAPOData.SimpleType>
  final public func update(at index: Swift.Int, item: SAPOData.SimpleType)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleType>>
  @objc deinit
}
open class SimpleTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.SimpleTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.SimpleType)
  open class func concurrent() -> SAPOData.SimpleTypeMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.SimpleTypeMap
  open func entries() -> SAPOData.SimpleTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.SimpleTypeMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.SimpleType
  open func sortedEntries() -> SAPOData.SimpleTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.SimpleTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.SimpleType)
  open func updateThis(key: Swift.String, value: SAPOData.SimpleType) -> SAPOData.SimpleTypeMap
  open func updateValue(_ value: SAPOData.SimpleType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.SimpleType?
  open func values() -> SAPOData.SimpleTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.SimpleType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.SimpleTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.SimpleTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.SimpleTypeMap.Entry)
    final public func append(contentsOf list: SAPOData.SimpleTypeMap.EntryList)
    final public func appendThis(_ item: SAPOData.SimpleTypeMap.Entry) -> SAPOData.SimpleTypeMap.EntryList
    final public func copy() -> SAPOData.SimpleTypeMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.SimpleTypeMap.Entry) -> Swift.Bool) -> SAPOData.SimpleTypeMap.EntryList
    final public func first() -> SAPOData.SimpleTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.SimpleTypeMap.Entry>) -> SAPOData.SimpleTypeMap.EntryList
    final public func includes(item: SAPOData.SimpleTypeMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.SimpleTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.SimpleTypeMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.SimpleTypeMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.SimpleTypeMap.Entry
    final public func last() -> SAPOData.SimpleTypeMap.Entry
    final public func lastIndexOf(item: SAPOData.SimpleTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SimpleTypeMap.Entry>>
    open class func of(_ items: SAPOData.SimpleTypeMap.Entry...) -> SAPOData.SimpleTypeMap.EntryList
    open func reversed() -> SAPOData.SimpleTypeMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.SimpleTypeMap.EntryList
    final public func single() -> SAPOData.SimpleTypeMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SimpleTypeMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.SimpleTypeMap.Entry, SAPOData.SimpleTypeMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.SimpleTypeMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.SimpleTypeMap.Entry, SAPOData.SimpleTypeMap.Entry) -> Swift.Bool) -> SAPOData.SimpleTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.SimpleTypeMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.SimpleTypeMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleTypeMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SortItem : SAPOData.ObjectBase {
  public static func of(property: SAPOData.Property) -> SAPOData.SortItem
  final public var order: SAPOData.SortOrder
  override public init()
  open class func of(_ value: SAPOData.QueryValue) -> SAPOData.SortItem
  open var path: SAPOData.DataPath? {
    get
  }
  open func toPath() -> SAPOData.DataPath?
  open func toProperty() -> SAPOData.Property?
  open func toRequiredProperty() -> SAPOData.Property
  override open func toString() -> Swift.String
  final public var value: SAPOData.QueryValue {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SortItemList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SortItem {
    get
    set
  }
  public static let empty: SAPOData.SortItemList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.SortItem)
  final public func append(contentsOf list: SAPOData.SortItemList)
  final public func appendThis(_ item: SAPOData.SortItem) -> SAPOData.SortItemList
  final public func copy() -> SAPOData.SortItemList
  final public func filter(_ predicate: @escaping (SAPOData.SortItem) -> Swift.Bool) -> SAPOData.SortItemList
  final public func first() -> SAPOData.SortItem
  open class func fromArray(_ array: Swift.Array<SAPOData.SortItem>) -> SAPOData.SortItemList
  final public func includes(item: SAPOData.SortItem) -> Swift.Bool
  final public func indexOf(item: SAPOData.SortItem, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.SortItem)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.SortItemList)
  final public func item(at index: Swift.Int) -> SAPOData.SortItem
  final public func last() -> SAPOData.SortItem
  final public func lastIndexOf(item: SAPOData.SortItem, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SortItem>>
  open class func of(_ items: SAPOData.SortItem...) -> SAPOData.SortItemList
  open func reversed() -> SAPOData.SortItemList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SortItemList
  final public func single() -> SAPOData.SortItem
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SortItemList
  final public func sort(by increasing: @escaping (SAPOData.SortItem, SAPOData.SortItem) -> Swift.Bool)
  final public func sorted() -> SAPOData.SortItemList
  final public func sorted(by increasing: @escaping (SAPOData.SortItem, SAPOData.SortItem) -> Swift.Bool) -> SAPOData.SortItemList
  open func toArray() -> Swift.Array<SAPOData.SortItem>
  final public func update(at index: Swift.Int, item: SAPOData.SortItem)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SortItem>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SortItem>>
  @objc deinit
}
public enum SortOrder : Swift.Int {
  case ascending
  case descending
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers open class StreamBase : SAPOData.DataValue {
  override public init()
  open func check() throws
  open func close() throws
  open var entityTag: Swift.String? {
    get
    set(value)
  }
  open var fileName: Swift.String? {
    get
    set(value)
  }
  open func flush() throws
  open var mediaType: Swift.String? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StreamLink : SAPOData.DataValue {
  final public var entitySet: SAPOData.EntitySet?
  final public var mediaType: Swift.String?
  final public var entityTag: Swift.String?
  final public var editLink: Swift.String?
  final public var readLink: Swift.String?
  final public var isDeleted: Swift.Bool
  final public var isOffline: Swift.Bool
  override public init()
  open func copyLink() -> SAPOData.StreamLink
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.StreamLink?, b: SAPOData.StreamLink?) -> Swift.Bool
  open var inlineData: Foundation.Data? {
    get
    set(value)
  }
  open var inlineText: Swift.String? {
    get
    set(value)
  }
  final public var owningType: SAPOData.StructureType {
    get
    set(value)
  }
  final public var streamProperty: SAPOData.StreamProperty {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  @inline(__always) final public var valuePath: Swift.String? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StreamProperty : SAPOData.Property {
  override public init()
  final public var entityTag: SAPOData.Property {
    get
    set(value)
  }
  final public var mediaType: SAPOData.Property {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StringList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.String {
    get
    set
  }
  public static let empty: SAPOData.StringList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.String)
  final public func append(contentsOf list: SAPOData.StringList)
  final public func appendThis(_ item: Swift.String) -> SAPOData.StringList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func concat() -> Swift.String
  final public func copy() -> SAPOData.StringList
  open func dropEmpty() -> SAPOData.StringList
  final public func filter(_ predicate: @escaping (Swift.String) -> Swift.Bool) -> SAPOData.StringList
  final public func first() -> Swift.String
  open class func fromArray(_ array: Swift.Array<Swift.String>) -> SAPOData.StringList
  final public func includes(item: Swift.String) -> Swift.Bool
  final public func indexOf(item: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.String)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.StringList)
  final public func item(at index: Swift.Int) -> Swift.String
  open func join(separator: Swift.String? = nil, afterLast: Swift.String? = nil) -> Swift.String
  open func joinLines() -> Swift.String
  final public func last() -> Swift.String
  final public func lastIndexOf(item: Swift.String, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open class func lines(_ value: Swift.String) -> SAPOData.StringList
  open func lowerAll() -> SAPOData.StringList
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.String>>
  open class func of(_ items: Swift.String...) -> SAPOData.StringList
  open func reversed() -> SAPOData.StringList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.StringList
  final public func single() -> Swift.String
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StringList
  final public func sort(by increasing: @escaping (Swift.String, Swift.String) -> Swift.Bool)
  open func sortIgnoreCase() -> SAPOData.StringList
  final public func sorted() -> SAPOData.StringList
  final public func sorted(by increasing: @escaping (Swift.String, Swift.String) -> Swift.Bool) -> SAPOData.StringList
  open class func split(_ value: Swift.String, separator: Swift.String, limit: Swift.Int = (2147483647 as Int)) -> SAPOData.StringList
  open func toArray() -> Swift.Array<Swift.String>
  override open func toDynamic() -> SAPOData.ListBase?
  open func toSet() -> SAPOData.StringSet
  open func trimAll() -> SAPOData.StringList
  final public func update(at index: Swift.Int, item: Swift.String)
  open func upperAll() -> SAPOData.StringList
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.String>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.String>>
  @objc deinit
}
open class StringMap : SAPOData.MapBase {
  public static let empty: SAPOData.StringMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.StringMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.StringMap
  open func entries() -> SAPOData.StringMap.EntryList
  open func inverse() -> SAPOData.StringMap
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.StringMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.String
  open func sortedEntries() -> SAPOData.StringMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.StringList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.String)
  open func updateThis(key: Swift.String, value: Swift.String) -> SAPOData.StringMap
  open func updateValue(_ value: Swift.String, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.String?
  open func values() -> SAPOData.StringList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    @inline(__always) final public var value: Swift.String {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.StringMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.StringMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.StringMap.Entry)
    final public func append(contentsOf list: SAPOData.StringMap.EntryList)
    final public func appendThis(_ item: SAPOData.StringMap.Entry) -> SAPOData.StringMap.EntryList
    final public func copy() -> SAPOData.StringMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.StringMap.Entry) -> Swift.Bool) -> SAPOData.StringMap.EntryList
    final public func first() -> SAPOData.StringMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.StringMap.Entry>) -> SAPOData.StringMap.EntryList
    final public func includes(item: SAPOData.StringMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.StringMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.StringMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.StringMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.StringMap.Entry
    final public func last() -> SAPOData.StringMap.Entry
    final public func lastIndexOf(item: SAPOData.StringMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.StringMap.Entry>>
    open class func of(_ items: SAPOData.StringMap.Entry...) -> SAPOData.StringMap.EntryList
    open func reversed() -> SAPOData.StringMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.StringMap.EntryList
    final public func single() -> SAPOData.StringMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StringMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.StringMap.Entry, SAPOData.StringMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.StringMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.StringMap.Entry, SAPOData.StringMap.Entry) -> Swift.Bool) -> SAPOData.StringMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.StringMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.StringMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.StringMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.StringMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StringSet : SAPOData.SetBase {
  public static let empty: SAPOData.StringSet
  override public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.StringSet
  open func contains(_ value: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.StringSet
  open func insert(_ value: Swift.String)
  open func insert(contentsOf from: SAPOData.StringSet)
  open func insertThis(_ value: Swift.String) -> SAPOData.StringSet
  open func remove(_ value: Swift.String) -> Swift.Bool
  open func remove(contentsOf values: SAPOData.StringSet)
  open func sortedValues() -> SAPOData.StringList
  open func values() -> SAPOData.StringList
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class StringValue : SAPOData.DataValue {
  public static let empty: SAPOData.StringValue
  open class func compare(_ left: SAPOData.StringValue, _ right: SAPOData.StringValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.StringValue?, _ right: SAPOData.StringValue?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.String) -> SAPOData.StringValue
  open class func of(optional value: Swift.String?) -> SAPOData.StringValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.String?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.String
  @inline(__always) final public var value: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StructuralProperty : SAPOData.Property {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class StructureBase : SAPOData.DataValue, Swift.Codable, @unchecked Swift.Sendable {
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  override public init()
  final public var annotations: SAPOData.AnnotationMap {
    get
    set(value)
  }
  final public func dataValue(for path: SAPOData.PropertyPath) -> SAPOData.DataValue?
  final public var dynamicProperties: SAPOData.DataValueMap {
    get
    set(value)
  }
  final public func dynamicValue(name: Swift.String) -> SAPOData.DataValue?
  open func hasChangedProperties() -> Swift.Bool
  final public func hasDataType(_ type: SAPOData.DataType) -> Swift.Bool
  final public func hasDataValue(for property: SAPOData.Property) -> Swift.Bool
  final public var hasDynamicProperties: Swift.Bool {
    get
  }
  final public func hasNextLink(for property: SAPOData.Property) -> Swift.Bool
  open var isProxy: Swift.Bool {
    get
  }
  final public func nextLink(for path: SAPOData.PropertyPath) -> Swift.String?
  final public func optionalValue(for path: SAPOData.PropertyPath) -> SAPOData.DataValue?
  final public func requiredValue(for path: SAPOData.PropertyPath) -> SAPOData.DataValue
  open func searchWords(select: SAPOData.PropertyList? = nil, tabs: Swift.Bool = true) -> SAPOData.StringList
  final public func setDataValue(for property: SAPOData.Property, to value: SAPOData.DataValue?)
  final public func setDefaultValues(nestedComplex: Swift.Bool = true, nestedEntity: Swift.Bool = false, defaultOptional: Swift.Bool = true, defaultRequired: Swift.Bool = true, skipConstraints: Swift.Bool = false)
  final public func setDynamicValue(name: Swift.String, value: SAPOData.DataValue?)
  final public func setOptionalValue(for property: SAPOData.Property, to value: SAPOData.DataValue?)
  final public func setRequiredValue(for property: SAPOData.Property, to value: SAPOData.DataValue)
  final public func setUnsafeValue(for property: SAPOData.Property, to value: SAPOData.DataValue?)
  final public func streamLink(for property: SAPOData.Property) -> SAPOData.StreamLink
  open var structureType: SAPOData.StructureType {
    get
  }
  final public func unsetDataValue(for property: SAPOData.Property)
  final public var valuePath: Swift.String? {
    get
    set(value)
  }
  final public func withLock(work: @escaping () throws -> Swift.Void)
  @objc deinit
}
open class StructureData : SAPOData.ObjectBase {
  @objc deinit
  public static let empty: SAPOData.StructureData
  public init(length: Swift.Int)
  @inline(__always) final public func item(at index: Swift.Int) -> SAPOData.DataValue?
  @inline(__always) final public var length: Swift.Int {
    get
  }
  @inline(__always) final public func update(at index: Swift.Int, item value: SAPOData.DataValue?)
}
@_inheritsConvenienceInitializers open class StructureType : SAPOData.DataType {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var objectFactory: SAPOData.ObjectFactory?
  final public var isAbstract: Swift.Bool
  final public var isClientOnly: Swift.Bool
  final public var isOpenType: Swift.Bool
  final public var isSynthesized: Swift.Bool
  final public var sourceLine: (Swift.Int)
  final public var propertyArray: SAPOData.PropertyArray
  final public var propertyList: SAPOData.PropertyList
  final public var propertyMap: SAPOData.PropertyMap
  final public var jsonFieldMap: SAPOData.PropertyMap
  final public var streamProperties: SAPOData.PropertyList
  final public var complexProperties: SAPOData.PropertyList
  final public var collectionProperties: SAPOData.PropertyList
  final public var persistentProperties: SAPOData.PropertyList
  final public var structuralProperties: SAPOData.PropertyList
  final public var navigationProperties: SAPOData.PropertyList
  final public var extensionProperties: SAPOData.PropertyList
  final public var isExtension: Swift.Bool
  final public var isInferred: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  @inline(__always) open var hasSubtypes: Swift.Bool {
    get
  }
  @inline(__always) open var hasSupertype: Swift.Bool {
    get
  }
  open var isAspect: Swift.Bool {
    get
    set(value)
  }
  open var isEvent: Swift.Bool {
    get
    set(value)
  }
  override open var name: Swift.String {
    get
  }
  open func property(withName name: Swift.String) -> SAPOData.Property
  @objc deinit
}
@_inheritsConvenienceInitializers open class StructureTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.StructureType {
    get
    set
  }
  public static let empty: SAPOData.StructureTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.StructureType)
  final public func append(contentsOf list: SAPOData.StructureTypeList)
  final public func appendThis(_ item: SAPOData.StructureType) -> SAPOData.StructureTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  final public func copy() -> SAPOData.StructureTypeList
  final public func filter(_ predicate: @escaping (SAPOData.StructureType) -> Swift.Bool) -> SAPOData.StructureTypeList
  final public func first() -> SAPOData.StructureType
  open class func fromArray(_ array: Swift.Array<SAPOData.StructureType>) -> SAPOData.StructureTypeList
  final public func includes(item: SAPOData.StructureType) -> Swift.Bool
  final public func indexOf(item: SAPOData.StructureType, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.StructureType)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.StructureTypeList)
  final public func item(at index: Swift.Int) -> SAPOData.StructureType
  final public func last() -> SAPOData.StructureType
  final public func lastIndexOf(item: SAPOData.StructureType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.StructureType>>
  open class func of(_ items: SAPOData.StructureType...) -> SAPOData.StructureTypeList
  open func reversed() -> SAPOData.StructureTypeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.StructureTypeList
  final public func single() -> SAPOData.StructureType
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StructureTypeList
  final public func sort(by increasing: @escaping (SAPOData.StructureType, SAPOData.StructureType) -> Swift.Bool)
  final public func sorted() -> SAPOData.StructureTypeList
  final public func sorted(by increasing: @escaping (SAPOData.StructureType, SAPOData.StructureType) -> Swift.Bool) -> SAPOData.StructureTypeList
  open func toArray() -> Swift.Array<SAPOData.StructureType>
  final public func update(at index: Swift.Int, item: SAPOData.StructureType)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.StructureType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.StructureType>>
  @objc deinit
}
open class StructureTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.StructureTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.StructureType) throws
  open class func concurrent() -> SAPOData.StructureTypeMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.StructureTypeMap
  open func entries() -> SAPOData.StructureTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.StructureTypeMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.StructureType
  open func sortedEntries() -> SAPOData.StructureTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.StructureTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.StructureType)
  open func updateThis(key: Swift.String, value: SAPOData.StructureType) -> SAPOData.StructureTypeMap
  open func updateValue(_ value: SAPOData.StructureType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.StructureType?
  open func values() -> SAPOData.StructureTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.StructureType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.StructureTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.StructureTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.StructureTypeMap.Entry)
    final public func append(contentsOf list: SAPOData.StructureTypeMap.EntryList)
    final public func appendThis(_ item: SAPOData.StructureTypeMap.Entry) -> SAPOData.StructureTypeMap.EntryList
    final public func copy() -> SAPOData.StructureTypeMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.StructureTypeMap.Entry) -> Swift.Bool) -> SAPOData.StructureTypeMap.EntryList
    final public func first() -> SAPOData.StructureTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.StructureTypeMap.Entry>) -> SAPOData.StructureTypeMap.EntryList
    final public func includes(item: SAPOData.StructureTypeMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.StructureTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.StructureTypeMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.StructureTypeMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.StructureTypeMap.Entry
    final public func last() -> SAPOData.StructureTypeMap.Entry
    final public func lastIndexOf(item: SAPOData.StructureTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.StructureTypeMap.Entry>>
    open class func of(_ items: SAPOData.StructureTypeMap.Entry...) -> SAPOData.StructureTypeMap.EntryList
    open func reversed() -> SAPOData.StructureTypeMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.StructureTypeMap.EntryList
    final public func single() -> SAPOData.StructureTypeMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StructureTypeMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.StructureTypeMap.Entry, SAPOData.StructureTypeMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.StructureTypeMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.StructureTypeMap.Entry, SAPOData.StructureTypeMap.Entry) -> Swift.Bool) -> SAPOData.StructureTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.StructureTypeMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.StructureTypeMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.StructureTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.StructureTypeMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SystemKey {
  public static let anyOfflineState: Swift.Int64
  public static let anyPendingState: Swift.Int64
  public static let notLocalCreated: Swift.Int64
  public static let offlineLatestDownload: Swift.Int64
  public static let offlineOriginalEntity: Swift.Int64
  public static let offlinePendingDeleted: Swift.Int64
  public static let offlinePendingUpdated: Swift.Int64
  public static let offlinePendingCreated: Swift.Int64
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class TopTransform : SAPOData.AmountTransform {
  open class func count(amount: Swift.Int, value: SAPOData.DataValue) throws -> SAPOData.TopTransform
  open class func percent(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.TopTransform
  open class func sum(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.TopTransform
  @objc deinit
}
@_inheritsConvenienceInitializers open class TransformValue : SAPOData.QueryValue {
  final public var items: SAPOData.TransformValueList
  override public init()
  open func chain(_ item: SAPOData.TransformValue) -> SAPOData.TransformValue
  @objc deinit
}
@_inheritsConvenienceInitializers open class TransformValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.TransformValue {
    get
    set
  }
  public static let empty: SAPOData.TransformValueList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.TransformValue)
  final public func append(contentsOf list: SAPOData.TransformValueList)
  final public func appendThis(_ item: SAPOData.TransformValue) -> SAPOData.TransformValueList
  final public func copy() -> SAPOData.TransformValueList
  final public func filter(_ predicate: @escaping (SAPOData.TransformValue) -> Swift.Bool) -> SAPOData.TransformValueList
  final public func first() -> SAPOData.TransformValue
  open class func fromArray(_ array: Swift.Array<SAPOData.TransformValue>) -> SAPOData.TransformValueList
  final public func includes(item: SAPOData.TransformValue) -> Swift.Bool
  final public func indexOf(item: SAPOData.TransformValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.TransformValue)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.TransformValueList)
  final public func item(at index: Swift.Int) -> SAPOData.TransformValue
  final public func last() -> SAPOData.TransformValue
  final public func lastIndexOf(item: SAPOData.TransformValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.TransformValue>>
  open class func of(_ items: SAPOData.TransformValue...) -> SAPOData.TransformValueList
  open func reversed() -> SAPOData.TransformValueList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.TransformValueList
  final public func single() -> SAPOData.TransformValue
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.TransformValueList
  final public func sort(by increasing: @escaping (SAPOData.TransformValue, SAPOData.TransformValue) -> Swift.Bool)
  final public func sorted() -> SAPOData.TransformValueList
  final public func sorted(by increasing: @escaping (SAPOData.TransformValue, SAPOData.TransformValue) -> Swift.Bool) -> SAPOData.TransformValueList
  open func toArray() -> Swift.Array<SAPOData.TransformValue>
  final public func update(at index: Swift.Int, item: SAPOData.TransformValue)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.TransformValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.TransformValue>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class TypeFacets : SAPOData.ObjectBase {
  public static let anyLength: (Swift.Int)
  public static let anyPrecision: (Swift.Int)
  public static let floatingScale: Swift.Int
  public static let variableScale: (Swift.Int)
  public static let variableSrid: (Swift.Int)
  final public var isOptional: Swift.Bool?
  final public var isUnicode: Swift.Bool?
  final public var minLength: Swift.Int?
  final public var maxLength: Swift.Int?
  final public var precision: Swift.Int?
  final public var scale: Swift.Int?
  final public var srid: Swift.Int?
  final public var defaultValue: SAPOData.DataValue?
  override public init()
  open class func merge(from: SAPOData.TypeFacets?, to: SAPOData.TypeFacets?) throws -> SAPOData.TypeFacets?
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UnsignedByte : SAPOData.DataValue {
  public static let maxValue: (Swift.Int)
  public static let zero: SAPOData.UnsignedByte
  open class func compare(_ left: SAPOData.UnsignedByte, _ right: SAPOData.UnsignedByte) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.UnsignedByte?, _ right: SAPOData.UnsignedByte?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.UnsignedByte
  open class func of(optional value: Swift.Int?) -> SAPOData.UnsignedByte?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  open class func toInt(_ value: Swift.Int) -> Swift.Int
  override open func toString() -> Swift.String
  open class func truncateIfNeeded(_ value: Swift.Int) -> Swift.Int
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  @inline(__always) final public var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class UnsignedByteList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.UnsignedByteList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Int)
  final public func append(contentsOf list: SAPOData.UnsignedByteList)
  final public func appendThis(_ item: Swift.Int) -> SAPOData.UnsignedByteList
  final public func copy() -> SAPOData.UnsignedByteList
  final public func filter(_ predicate: @escaping (Swift.Int) -> Swift.Bool) -> SAPOData.UnsignedByteList
  final public func first() -> Swift.Int
  open class func fromArray(_ array: Swift.Array<Swift.Int>) -> SAPOData.UnsignedByteList
  final public func includes(item: Swift.Int) -> Swift.Bool
  final public func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Int)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.UnsignedByteList)
  final public func item(at index: Swift.Int) -> Swift.Int
  final public func last() -> Swift.Int
  final public func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func of(_ items: Swift.Int...) -> SAPOData.UnsignedByteList
  open func reversed() -> SAPOData.UnsignedByteList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.UnsignedByteList
  final public func single() -> Swift.Int
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.UnsignedByteList
  final public func sort(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool)
  final public func sorted() -> SAPOData.UnsignedByteList
  final public func sorted(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool) -> SAPOData.UnsignedByteList
  open func toArray() -> Swift.Array<Swift.Int>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Swift.Int)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UnsignedShort : SAPOData.DataValue {
  public static let maxValue: (Swift.Int)
  public static let zero: SAPOData.UnsignedShort
  open class func compare(_ left: SAPOData.UnsignedShort, _ right: SAPOData.UnsignedShort) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.UnsignedShort?, _ right: SAPOData.UnsignedShort?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.UnsignedShort
  open class func of(optional value: Swift.Int?) -> SAPOData.UnsignedShort?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  open class func toInt(_ value: Swift.Int) -> Swift.Int
  override open func toString() -> Swift.String
  open class func truncateIfNeeded(_ value: Swift.Int) -> Swift.Int
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  @inline(__always) final public var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class UnsignedShortList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.UnsignedShortList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: Swift.Int)
  final public func append(contentsOf list: SAPOData.UnsignedShortList)
  final public func appendThis(_ item: Swift.Int) -> SAPOData.UnsignedShortList
  final public func copy() -> SAPOData.UnsignedShortList
  final public func filter(_ predicate: @escaping (Swift.Int) -> Swift.Bool) -> SAPOData.UnsignedShortList
  final public func first() -> Swift.Int
  open class func fromArray(_ array: Swift.Array<Swift.Int>) -> SAPOData.UnsignedShortList
  final public func includes(item: Swift.Int) -> Swift.Bool
  final public func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.Int)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.UnsignedShortList)
  final public func item(at index: Swift.Int) -> Swift.Int
  final public func last() -> Swift.Int
  final public func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func of(_ items: Swift.Int...) -> SAPOData.UnsignedShortList
  open func reversed() -> SAPOData.UnsignedShortList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.UnsignedShortList
  final public func single() -> Swift.Int
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.UnsignedShortList
  final public func sort(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool)
  final public func sorted() -> SAPOData.UnsignedShortList
  final public func sorted(by increasing: @escaping (Swift.Int, Swift.Int) -> Swift.Bool) -> SAPOData.UnsignedShortList
  open func toArray() -> Swift.Array<Swift.Int>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: Swift.Int)
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
  @objc deinit
}
public enum UpdateMode : Swift.Int {
  case merge
  case replace
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class YearMonthDuration : SAPOData.DataValue {
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.YearMonthDuration?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.YearMonthDuration
  open class func compare(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Int
  open func compareTo(_ value: SAPOData.YearMonthDuration) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.YearMonthDuration?, _ right: SAPOData.YearMonthDuration?) -> Swift.Bool
  override open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open func lessEqual(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  open func lessThan(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.YearMonthDuration
  open var months: Swift.Int {
    get
  }
  open func normalize() -> SAPOData.YearMonthDuration
  open func notEqual(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.YearMonthDuration?, _ right: SAPOData.YearMonthDuration?) -> Swift.Bool
  open class func of(sign: Swift.Int, years: Swift.Int, months: Swift.Int) -> SAPOData.YearMonthDuration
  open class func parse(_ text: Swift.String) -> SAPOData.YearMonthDuration?
  open var sign: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open var years: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class YearMonthDurationList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.YearMonthDuration {
    get
    set
  }
  public static let empty: SAPOData.YearMonthDurationList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.YearMonthDuration)
  final public func append(contentsOf list: SAPOData.YearMonthDurationList)
  final public func appendThis(_ item: SAPOData.YearMonthDuration) -> SAPOData.YearMonthDurationList
  final public func copy() -> SAPOData.YearMonthDurationList
  final public func filter(_ predicate: @escaping (SAPOData.YearMonthDuration) -> Swift.Bool) -> SAPOData.YearMonthDurationList
  final public func first() -> SAPOData.YearMonthDuration
  open class func fromArray(_ array: Swift.Array<SAPOData.YearMonthDuration>) -> SAPOData.YearMonthDurationList
  final public func includes(item: SAPOData.YearMonthDuration) -> Swift.Bool
  final public func indexOf(item: SAPOData.YearMonthDuration, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.YearMonthDuration)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.YearMonthDurationList)
  final public func item(at index: Swift.Int) -> SAPOData.YearMonthDuration
  final public func last() -> SAPOData.YearMonthDuration
  final public func lastIndexOf(item: SAPOData.YearMonthDuration, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.YearMonthDuration>>
  open class func of(_ items: SAPOData.YearMonthDuration...) -> SAPOData.YearMonthDurationList
  open func reversed() -> SAPOData.YearMonthDurationList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.YearMonthDurationList
  final public func single() -> SAPOData.YearMonthDuration
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.YearMonthDurationList
  final public func sort(by increasing: @escaping (SAPOData.YearMonthDuration, SAPOData.YearMonthDuration) -> Swift.Bool)
  final public func sorted() -> SAPOData.YearMonthDurationList
  final public func sorted(by increasing: @escaping (SAPOData.YearMonthDuration, SAPOData.YearMonthDuration) -> Swift.Bool) -> SAPOData.YearMonthDurationList
  open func toArray() -> Swift.Array<SAPOData.YearMonthDuration>
  override open func toDynamic() -> SAPOData.ListBase?
  final public func update(at index: Swift.Int, item: SAPOData.YearMonthDuration)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.YearMonthDuration>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.YearMonthDuration>>
  @objc deinit
}
public func xs_immortalize<T>(_ o: T) -> T where T : AnyObject
@_inheritsConvenienceInitializers open class AtOData : SAPOData.ObjectBase {
  override public init()
  @inline(__always) open var associationLink: Swift.String {
    get
  }
  @inline(__always) open var bind: Swift.String {
    get
  }
  @inline(__always) open var context: Swift.String {
    get
  }
  @inline(__always) open var count: Swift.String {
    get
  }
  @inline(__always) open var delta: Swift.String {
    get
  }
  @inline(__always) open var deltaLink: Swift.String {
    get
  }
  @inline(__always) open var editLink: Swift.String {
    get
  }
  @inline(__always) open var etag: Swift.String {
    get
  }
  open class func forVersion(_ version: Swift.Int) throws -> SAPOData.AtOData
  @inline(__always) open var id: Swift.String {
    get
  }
  @inline(__always) open var mediaContentType: Swift.String {
    get
  }
  @inline(__always) open var mediaEditLink: Swift.String {
    get
  }
  @inline(__always) open var mediaEtag: Swift.String {
    get
  }
  @inline(__always) open var mediaReadLink: Swift.String {
    get
  }
  @inline(__always) open var navigationLink: Swift.String {
    get
  }
  @inline(__always) open var nextLink: Swift.String {
    get
  }
  @inline(__always) open var readLink: Swift.String {
    get
  }
  @inline(__always) open var removed: Swift.String {
    get
  }
  @inline(__always) open var type: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AtODataV300 : SAPOData.AtOData {
  override public init()
  override open var associationLink: Swift.String {
    get
  }
  override open var bind: Swift.String {
    get
  }
  override open var context: Swift.String {
    get
  }
  override open var count: Swift.String {
    get
  }
  override open var delta: Swift.String {
    get
  }
  override open var deltaLink: Swift.String {
    get
  }
  override open var editLink: Swift.String {
    get
  }
  override open var etag: Swift.String {
    get
  }
  override open var id: Swift.String {
    get
  }
  override open var mediaContentType: Swift.String {
    get
  }
  override open var mediaEditLink: Swift.String {
    get
  }
  override open var mediaEtag: Swift.String {
    get
  }
  override open var mediaReadLink: Swift.String {
    get
  }
  override open var navigationLink: Swift.String {
    get
  }
  override open var nextLink: Swift.String {
    get
  }
  override open var readLink: Swift.String {
    get
  }
  override open var removed: Swift.String {
    get
  }
  override open var type: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AtODataV400 : SAPOData.AtOData {
  override public init()
  override open var associationLink: Swift.String {
    get
  }
  override open var bind: Swift.String {
    get
  }
  override open var context: Swift.String {
    get
  }
  override open var count: Swift.String {
    get
  }
  override open var delta: Swift.String {
    get
  }
  override open var deltaLink: Swift.String {
    get
  }
  override open var editLink: Swift.String {
    get
  }
  override open var etag: Swift.String {
    get
  }
  override open var id: Swift.String {
    get
  }
  override open var mediaContentType: Swift.String {
    get
  }
  override open var mediaEditLink: Swift.String {
    get
  }
  override open var mediaEtag: Swift.String {
    get
  }
  override open var mediaReadLink: Swift.String {
    get
  }
  override open var navigationLink: Swift.String {
    get
  }
  override open var nextLink: Swift.String {
    get
  }
  override open var readLink: Swift.String {
    get
  }
  override open var removed: Swift.String {
    get
  }
  override open var type: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AtODataV401 : SAPOData.AtOData {
  override public init()
  override open var associationLink: Swift.String {
    get
  }
  override open var bind: Swift.String {
    get
  }
  override open var context: Swift.String {
    get
  }
  override open var count: Swift.String {
    get
  }
  override open var delta: Swift.String {
    get
  }
  override open var deltaLink: Swift.String {
    get
  }
  override open var editLink: Swift.String {
    get
  }
  override open var etag: Swift.String {
    get
  }
  override open var id: Swift.String {
    get
  }
  override open var mediaContentType: Swift.String {
    get
  }
  override open var mediaEditLink: Swift.String {
    get
  }
  override open var mediaEtag: Swift.String {
    get
  }
  override open var mediaReadLink: Swift.String {
    get
  }
  override open var navigationLink: Swift.String {
    get
  }
  override open var nextLink: Swift.String {
    get
  }
  override open var readLink: Swift.String {
    get
  }
  override open var removed: Swift.String {
    get
  }
  override open var type: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GeoJson {
  public static func format(_ value: SAPOData.DataValue?) -> Swift.String
  public static func formatObject(_ value: SAPOData.DataValue) -> SAPOData.JsonObject
  public static func parse(_ text: Swift.String, type: SAPOData.DataType) throws -> SAPOData.DataValue?
  public static func parseObject(geo: SAPOData.JsonObject, type: SAPOData.DataType) throws -> SAPOData.DataValue
  @objc deinit
}
open class JsonArray : SAPOData.JsonElement {
  final public var count: Swift.Int {
    get
  }
  public static let empty: SAPOData.JsonArray
  public init(capacity: Swift.Int = (4 as Int))
  final public func addAll(list: SAPOData.JsonArray)
  final public func append(_ item: SAPOData.JsonElement?)
  final public func appendThis(_ item: SAPOData.JsonElement?) -> SAPOData.JsonArray
  open func array(index: Swift.Int) throws -> SAPOData.JsonArray
  final public func copy() -> SAPOData.JsonArray
  final public func filter(_ predicate: @escaping (SAPOData.JsonElement?) -> Swift.Bool) -> SAPOData.JsonArray
  final public func first() -> SAPOData.JsonElement?
  open class func fromElement(_ value: SAPOData.JsonElement?) throws -> SAPOData.JsonArray
  final public func includes(item: SAPOData.JsonElement?) -> Swift.Bool
  final public func indexOf(item: SAPOData.JsonElement?, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.JsonElement?)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.JsonArray)
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var isMutable: Swift.Bool {
    get
  }
  final public var isNotEmpty: Swift.Bool {
    get
  }
  final public func item(at index: Swift.Int) -> SAPOData.JsonElement?
  final public func last() -> SAPOData.JsonElement?
  final public func lastIndexOf(item: Swift.AnyObject?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  final public var length: Swift.Int {
    get
  }
  final public func makeImmutable()
  open func objectValue(index: Swift.Int) throws -> SAPOData.JsonObject
  open class func of(_ items: SAPOData.JsonElement?...) -> SAPOData.JsonArray
  final public func remove(at index: Swift.Int)
  final public func removeAll()
  final public func removeRange(start: Swift.Int, end: Swift.Int)
  final public func reverse()
  final public func single() -> SAPOData.JsonElement?
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.JsonArray
  open func sort()
  open func stringValue(index: Swift.Int) throws -> Swift.String
  open func stringValues() -> SAPOData.StringList
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  final public var untypedList: SAPOData.UntypedList {
    get
  }
  final public func update(at index: Swift.Int, item: SAPOData.JsonElement?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonBatch : SAPOData.ObjectBase {
  final public var ids: SAPOData.StringSet
  final public var atomicityGroups: SAPOData.StringList
  final public var batchParts: SAPOData.JsonBatchPartList
  final public var isRequest: Swift.Bool
  final public var isResponse: Swift.Bool
  override public init()
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonBatchPart : SAPOData.ObjectBase {
  final public var id: Swift.String
  final public var httpMethod: Swift.String
  final public var url: Swift.String
  final public var dependsOn: SAPOData.JsonArray?
  final public var headers: SAPOData.JsonObject?
  final public var bodyObject: SAPOData.JsonObject?
  final public var bodyString: Swift.String?
  final public var bodyBinary: Foundation.Data?
  final public var atomicityGroup: SAPOData.JsonBatchPartList?
  final public var atomicityGroupName: Swift.String?
  final public var isAtomicityGroup: Swift.Bool
  final public var isRequest: Swift.Bool
  final public var isResponse: Swift.Bool
  final public var statusCode: (Swift.Int)
  override public init()
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonBatchPartList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.JsonBatchPart {
    get
    set
  }
  public static let empty: SAPOData.JsonBatchPartList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.JsonBatchPart)
  final public func append(contentsOf list: SAPOData.JsonBatchPartList)
  final public func appendThis(_ item: SAPOData.JsonBatchPart) -> SAPOData.JsonBatchPartList
  final public func copy() -> SAPOData.JsonBatchPartList
  final public func filter(_ predicate: @escaping (SAPOData.JsonBatchPart) -> Swift.Bool) -> SAPOData.JsonBatchPartList
  final public func first() -> SAPOData.JsonBatchPart
  open class func fromArray(_ array: Swift.Array<SAPOData.JsonBatchPart>) -> SAPOData.JsonBatchPartList
  final public func includes(item: SAPOData.JsonBatchPart) -> Swift.Bool
  final public func indexOf(item: SAPOData.JsonBatchPart, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.JsonBatchPart)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.JsonBatchPartList)
  final public func item(at index: Swift.Int) -> SAPOData.JsonBatchPart
  final public func last() -> SAPOData.JsonBatchPart
  final public func lastIndexOf(item: SAPOData.JsonBatchPart, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.JsonBatchPart>>
  open class func of(_ items: SAPOData.JsonBatchPart...) -> SAPOData.JsonBatchPartList
  open func reversed() -> SAPOData.JsonBatchPartList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.JsonBatchPartList
  final public func single() -> SAPOData.JsonBatchPart
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.JsonBatchPartList
  final public func sort(by increasing: @escaping (SAPOData.JsonBatchPart, SAPOData.JsonBatchPart) -> Swift.Bool)
  final public func sorted() -> SAPOData.JsonBatchPartList
  final public func sorted(by increasing: @escaping (SAPOData.JsonBatchPart, SAPOData.JsonBatchPart) -> Swift.Bool) -> SAPOData.JsonBatchPartList
  open func toArray() -> Swift.Array<SAPOData.JsonBatchPart>
  final public func update(at index: Swift.Int, item: SAPOData.JsonBatchPart)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.JsonBatchPart>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.JsonBatchPart>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonBoolean : SAPOData.JsonElement {
  public static let FALSE: SAPOData.JsonBoolean
  public static let TRUE: SAPOData.JsonBoolean
  open class func of(_ value: Swift.Bool) -> SAPOData.JsonBoolean
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  @inline(__always) final public var value: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JsonBooleanToken : SAPOData.JsonToken {
  open class func of(_ value: Swift.Bool) -> SAPOData.JsonBooleanToken
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonDeltaStream : SAPOData.DeltaStream {
  override open func abort() throws
  override open func close() throws
  open class func fromStream(_ stream: SAPOData.CharStream, context: SAPOData.DataContext) throws -> SAPOData.JsonDeltaStream
  override open func next() throws -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonElement : SAPOData.ObjectBase {
  public static let typeBoolean: (Swift.Int)
  public static let typeNumber: (Swift.Int)
  public static let typeString: (Swift.Int)
  public static let typeArray: (Swift.Int)
  public static let typeObject: (Swift.Int)
  override public init()
  open class func applyVersion(_ version: Swift.Int, toElement: SAPOData.JsonElement?) -> SAPOData.JsonElement?
  open class func format(element: SAPOData.JsonElement?) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.JsonElement?
  open class func parseArray(_ text: Swift.String) throws -> SAPOData.JsonArray
  open class func parseObject(_ text: Swift.String) throws -> SAPOData.JsonObject
  open class func parseWithOrderedObjects(_ text: Swift.String) throws -> SAPOData.JsonElement?
  @inline(__always) open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonElementStream : SAPOData.ObjectBase {
  open func beginArray() throws
  open func beginObject() throws
  open func endArray() throws
  open func endObject() throws
  open func expectBoolean() throws -> SAPOData.JsonBooleanToken
  open func expectColon() throws
  open func expectComma() throws
  open func expectNumber() throws -> SAPOData.JsonNumberToken
  open func expectString() throws -> SAPOData.JsonStringToken
  open class func fromStream(_ stream: SAPOData.CharStream, withOrderedObjects: Swift.Bool = false) throws -> SAPOData.JsonElementStream
  open class func fromString(text: Swift.String, withOrderedObjects: Swift.Bool = false) throws -> SAPOData.JsonElementStream
  open class func fromTokens(_ tokens: SAPOData.JsonTokenStream, withOrderedObjects: Swift.Bool = false) throws -> SAPOData.JsonElementStream
  open func isEndArray() throws -> Swift.Bool
  open func isEndObject() throws -> Swift.Bool
  open func lookingAt(type: Swift.Int) throws -> Swift.Bool
  open func readArray() throws -> SAPOData.JsonArray
  open func readElement() throws -> SAPOData.JsonElement?
  open func readObject() throws -> SAPOData.JsonObject
  open func readString() throws -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonError : SAPOData.DataFormatError {
  override public init()
  open class func cannotParse(_ value: Swift.String, type: Swift.String) -> SAPOData.JsonError
  open class func withCause(_ cause: any Swift.Error) -> SAPOData.JsonError
  open class func withCauseAndMessage(cause: (any Swift.Error)?, message: Swift.String?) -> SAPOData.JsonError
  open class func withMessage(_ message: Swift.String) -> SAPOData.JsonError
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonNumber : SAPOData.JsonElement {
  public static let zero: SAPOData.JsonNumber
  open class func of(_ value: Swift.String) -> SAPOData.JsonNumber
  open class func ofInt(_ value: Swift.Int) -> SAPOData.JsonNumber
  open class func ofLong(_ value: Swift.Int) -> SAPOData.JsonNumber
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  @inline(__always) final public var value: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JsonNumberToken : SAPOData.JsonToken {
  open class func of(_ value: Swift.String) -> SAPOData.JsonNumberToken
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.String {
    get
  }
  @objc deinit
}
open class JsonObject : SAPOData.JsonElement {
  final public var count: Swift.Int {
    get
  }
  public static let empty: SAPOData.JsonObject
  final public var customOrdering: SAPOData.JsonObject.FieldOrdering?
  public init(capacity: Swift.Int = (16 as Int))
  open func array(name: Swift.String) throws -> SAPOData.JsonArray
  open func booleanValue(name: Swift.String) throws -> Swift.Bool
  open class func concurrent() -> SAPOData.JsonObject
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.JsonObject
  open func entries() -> SAPOData.JsonObject.EntryList
  open class func fromElement(_ value: SAPOData.JsonElement?) throws -> SAPOData.JsonObject
  @inline(__always) final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) final public var isNotEmpty: Swift.Bool {
    get
  }
  open func keys() -> SAPOData.StringList
  open func makeImmutable()
  open func merge(contentsOf from: SAPOData.JsonObject)
  open func objectValue(name: Swift.String) throws -> SAPOData.JsonObject
  open func optionalArray(name: Swift.String) throws -> SAPOData.JsonArray?
  open func optionalBoolean(name: Swift.String) throws -> Swift.Bool?
  open func optionalObject(name: Swift.String) throws -> SAPOData.JsonObject?
  open func optionalString(name: Swift.String) throws -> Swift.String?
  open func orderedEntries() -> SAPOData.JsonObject.EntryList
  open func removeAll()
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredField(_ field: Swift.String) throws -> SAPOData.JsonElement?
  open func requiredValue(forKey key: Swift.String) -> SAPOData.JsonElement?
  open func setArray(name: Swift.String, value: SAPOData.JsonArray)
  open func setBooleanValue(name: Swift.String, value: Swift.Bool)
  open func setNumber(name: Swift.String, value: Swift.String)
  open func setObjectValue(name: Swift.String, value: SAPOData.JsonObject)
  open func setStringValue(name: Swift.String, value: Swift.String)
  @inline(__always) final public var size: Swift.Int {
    get
  }
  open func sortedEntries() -> SAPOData.JsonObject.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.JsonArray
  open func stringValue(name: Swift.String) throws -> Swift.String
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  @inline(__always) final public var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.JsonElement?)
  open func updateThis(key: Swift.String, value: SAPOData.JsonElement?) -> SAPOData.JsonObject
  open func updateValue(_ value: SAPOData.JsonElement?, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.JsonElement?
  open func values() -> SAPOData.JsonArray
  open func withVersion(_ version: Swift.Int) -> SAPOData.JsonObject
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    @inline(__always) final public var value: SAPOData.JsonElement? {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.JsonObject.Entry {
      get
      set
    }
    public static let empty: SAPOData.JsonObject.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.JsonObject.Entry)
    final public func append(contentsOf list: SAPOData.JsonObject.EntryList)
    final public func appendThis(_ item: SAPOData.JsonObject.Entry) -> SAPOData.JsonObject.EntryList
    final public func copy() -> SAPOData.JsonObject.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.JsonObject.Entry) -> Swift.Bool) -> SAPOData.JsonObject.EntryList
    final public func first() -> SAPOData.JsonObject.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.JsonObject.Entry>) -> SAPOData.JsonObject.EntryList
    final public func includes(item: SAPOData.JsonObject.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.JsonObject.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.JsonObject.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.JsonObject.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.JsonObject.Entry
    final public func last() -> SAPOData.JsonObject.Entry
    final public func lastIndexOf(item: SAPOData.JsonObject.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.JsonObject.Entry>>
    open class func of(_ items: SAPOData.JsonObject.Entry...) -> SAPOData.JsonObject.EntryList
    open func reversed() -> SAPOData.JsonObject.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.JsonObject.EntryList
    final public func single() -> SAPOData.JsonObject.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.JsonObject.EntryList
    final public func sort(by increasing: @escaping (SAPOData.JsonObject.Entry, SAPOData.JsonObject.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.JsonObject.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.JsonObject.Entry, SAPOData.JsonObject.Entry) -> Swift.Bool) -> SAPOData.JsonObject.EntryList
    open func toArray() -> Swift.Array<SAPOData.JsonObject.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.JsonObject.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.JsonObject.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.JsonObject.Entry>>
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class FieldOrdering : SAPOData.Comparer {
    final public var propertyMap: SAPOData.PropertyMap?
    override public init()
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonOrderedObject : SAPOData.JsonObject {
  override public init(capacity: Swift.Int = (16 as Int))
  override open func orderedEntries() -> SAPOData.JsonObject.EntryList
  override open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func replaceAtIndex(_ index: Swift.Int, value: SAPOData.JsonElement?)
  open func replaceWithKey(_ key: Swift.String, value: SAPOData.JsonElement?)
  override open func toString() -> Swift.String
  override open func update(key: Swift.String, value: SAPOData.JsonElement?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonOutputStream : SAPOData.ObjectBase {
  override public init()
  open func clear() throws
  @inline(__always) open var length: Swift.Int {
    get
  }
  open class func withBuffer() throws -> SAPOData.JsonOutputStream
  open func writeChar(c: Foundation.unichar) throws
  open func writeElement(_ element: SAPOData.JsonElement?) throws
  open func writeString(text: Swift.String) throws
  open func writeVerbatim(text: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JsonPretty {
  public static func print(_ value: SAPOData.JsonElement?, indent: Swift.Int = (0 as Int)) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonString : SAPOData.JsonElement {
  public static let empty: SAPOData.JsonString
  open class func of(_ value: Swift.String) -> SAPOData.JsonString
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JsonStringToken : SAPOData.JsonToken {
  open class func of(_ value: Swift.String) -> SAPOData.JsonStringToken
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonToken : SAPOData.ObjectBase {
  public static let nullValue: (Swift.Int)
  public static let booleanValue: (Swift.Int)
  public static let numberValue: (Swift.Int)
  public static let stringValue: (Swift.Int)
  public static let colonChar: (Swift.Int)
  public static let commaChar: (Swift.Int)
  public static let beginArray: (Swift.Int)
  public static let endArray: (Swift.Int)
  public static let beginObject: (Swift.Int)
  public static let endObject: (Swift.Int)
  public static let endStream: (Swift.Int)
  override public init()
  @inline(__always) open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonTokenStream : SAPOData.ObjectBase {
  open func endArray() throws -> Swift.Bool
  open func endObject() throws -> Swift.Bool
  open class func fromStream(_ stream: SAPOData.CharStream) throws -> SAPOData.JsonTokenStream
  open class func fromString(text: Swift.String) throws -> SAPOData.JsonTokenStream
  open func nextIs(type: Swift.Int) throws -> Swift.Bool
  open func peek() throws -> SAPOData.JsonToken
  open func read() throws -> SAPOData.JsonToken
  open func undoRead(token: SAPOData.JsonToken) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JsonValue {
  public static func errorResponse(document: SAPOData.JsonElement, context: SAPOData.DataContext) throws -> SAPOData.ErrorResponse
  public static func formatCall(_ call: SAPOData.DataMethodCall, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func formatDocument(_ value: SAPOData.DataValue, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func formatLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromBasicList(_ list: SAPOData.DataValueList, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromBinary(_ value: Foundation.Data) -> SAPOData.JsonElement
  public static func fromBoolean(_ value: Swift.Bool) -> SAPOData.JsonElement
  public static func fromByte(_ value: Swift.Int) -> SAPOData.JsonElement
  public static func fromChar(_ value: Foundation.unichar) -> SAPOData.JsonElement
  public static func fromComplexList(_ list: SAPOData.ComplexValueList, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromComplexValue(_ complex: SAPOData.ComplexValue?, context: SAPOData.DataContext) -> SAPOData.JsonElement?
  public static func fromDataValue(_ value: SAPOData.DataValue?, context: SAPOData.DataContext) -> SAPOData.JsonElement?
  public static func fromDecimal(_ value: SAPOData.BigDecimal) -> SAPOData.JsonElement
  public static func fromDouble(_ value: Swift.Double) -> SAPOData.JsonElement
  public static func fromEntityList(_ list: SAPOData.EntityValueList, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromEntityValue(_ entity: SAPOData.EntityValue?, context: SAPOData.DataContext) -> SAPOData.JsonElement?
  public static func fromFloat(_ value: Swift.Float) -> SAPOData.JsonElement
  public static func fromInt(_ value: Swift.Int) -> SAPOData.JsonElement
  public static func fromInteger(_ value: SAPOData.BigInteger) -> SAPOData.JsonElement
  public static func fromLong(_ value: Swift.Int64) -> SAPOData.JsonElement
  public static func fromOptionalBinary(_ value: Foundation.Data?) -> SAPOData.JsonElement?
  public static func fromOptionalBoolean(_ value: Swift.Bool?) -> SAPOData.JsonElement?
  public static func fromOptionalByte(_ value: Swift.Int?) -> SAPOData.JsonElement?
  public static func fromOptionalChar(_ value: Foundation.unichar?) -> SAPOData.JsonElement?
  public static func fromOptionalDecimal(_ value: SAPOData.BigDecimal?) -> SAPOData.JsonElement?
  public static func fromOptionalDouble(_ value: Swift.Double?) -> SAPOData.JsonElement?
  public static func fromOptionalFloat(_ value: Swift.Float?) -> SAPOData.JsonElement?
  public static func fromOptionalInt(_ value: Swift.Int?) -> SAPOData.JsonElement?
  public static func fromOptionalInteger(_ value: SAPOData.BigInteger?) -> SAPOData.JsonElement?
  public static func fromOptionalLong(_ value: Swift.Int64?) -> SAPOData.JsonElement?
  public static func fromOptionalShort(_ value: Swift.Int?) -> SAPOData.JsonElement?
  public static func fromOptionalString(_ value: Swift.String?) -> SAPOData.JsonElement?
  public static func fromShort(_ value: Swift.Int) -> SAPOData.JsonElement
  public static func fromString(_ value: Swift.String) -> SAPOData.JsonElement
  public static func optionalBinary(element: SAPOData.JsonElement?) throws -> Foundation.Data?
  public static func optionalBoolean(element: SAPOData.JsonElement?) throws -> Swift.Bool?
  public static func optionalByte(element: SAPOData.JsonElement?) throws -> Swift.Int?
  public static func optionalChar(element: SAPOData.JsonElement?) throws -> Foundation.unichar?
  public static func optionalDecimal(element: SAPOData.JsonElement?) throws -> SAPOData.BigDecimal?
  public static func optionalDouble(element: SAPOData.JsonElement?) throws -> Swift.Double?
  public static func optionalFloat(element: SAPOData.JsonElement?) throws -> Swift.Float?
  public static func optionalInt(element: SAPOData.JsonElement?) throws -> Swift.Int?
  public static func optionalInteger(element: SAPOData.JsonElement?) throws -> SAPOData.BigInteger?
  public static func optionalLong(element: SAPOData.JsonElement?) throws -> Swift.Int64?
  public static func optionalShort(element: SAPOData.JsonElement?) throws -> Swift.Int?
  public static func optionalString(element: SAPOData.JsonElement?) throws -> Swift.String?
  public static func parseDocument(_ document: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func parseLink(document: SAPOData.JsonElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue
  public static func parseLinks(document: SAPOData.JsonElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func parseReference(uri: Swift.String, entityType: SAPOData.EntityType, entitySet: SAPOData.EntitySet, context: SAPOData.DataContext, binding: Swift.Bool = false) throws -> SAPOData.EntityValue
  public static func parseTicksGDT(_ text: Swift.String) -> SAPOData.GlobalDateTime?
  public static func parseTicksLDT(_ text: Swift.String) -> SAPOData.LocalDateTime?
  public static func toBasicList(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValueList
  public static func toBinary(element: SAPOData.JsonElement?) throws -> Foundation.Data
  public static func toBoolean(element: SAPOData.JsonElement?) throws -> Swift.Bool
  public static func toByte(element: SAPOData.JsonElement?) throws -> Swift.Int
  public static func toChar(element: SAPOData.JsonElement?) throws -> Foundation.unichar
  public static func toComplexList(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValueList
  public static func toComplexValue(element: SAPOData.JsonElement?, type: SAPOData.ComplexType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValue?
  public static func toDataValue(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func toDecimal(element: SAPOData.JsonElement?) throws -> SAPOData.BigDecimal
  public static func toDouble(element: SAPOData.JsonElement?) throws -> Swift.Double
  public static func toEntityList(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func toEntityValue(element: SAPOData.JsonElement?, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  public static func toFloat(element: SAPOData.JsonElement?) throws -> Swift.Float
  public static func toInt(element: SAPOData.JsonElement?) throws -> Swift.Int
  public static func toInteger(element: SAPOData.JsonElement?) throws -> SAPOData.BigInteger
  public static func toLong(element: SAPOData.JsonElement?) throws -> Swift.Int64
  public static func toShort(element: SAPOData.JsonElement?) throws -> Swift.Int
  public static func toString(element: SAPOData.JsonElement?) throws -> Swift.String
  @objc deinit
}
public struct Internal {
}
open class DataContext : SAPOData.ObjectBase {
  public static let keyOnly: (Swift.Int)
  public static let changesOnly: (Swift.Int)
  public static let keyAndChanges: (Swift.Int)
  public static let sendToClient: (Swift.Int)
  public static let valueToString: (Swift.Int)
  public static let fullMetadata: (Swift.Int)
  public static let requiresType: (Swift.Int)
  public static let supportsAlias: (Swift.Int)
  public static let inRequestPath: (Swift.Int)
  public static let inQueryString: (Swift.Int)
  public static let isDeltaResponse: (Swift.Int)
  public static let sapEntityStateAnnotations: (Swift.Int)
  public static let sapOldEntityValues: (Swift.Int)
  public static let requiresId: (Swift.Int)
  public static let IEEE_754_COMPATIBLE: (Swift.Int)
  public static let isRequestPayload: (Swift.Int)
  public static let receiveFromClient: (Swift.Int)
  public static let ISO_8601_COMPATIBLE: (Swift.Int)
  public static let zonelessDateTime: (Swift.Int)
  public static let isOfflineDownload: (Swift.Int)
  public static let sapCompactJson: (Swift.Int)
  public static let deepUpdateDelta: (Swift.Int)
  public static let keyAsSegment: (Swift.Int)
  public static let ignoreTenantVariants: (Swift.Int)
  public static let openApiCompatible: (Swift.Int)
  final public var versionCode: (Swift.Int)
  final public var bindOptions: (Swift.Int)
  final public var dataQuery: SAPOData.DataQuery?
  final public var derivedType: SAPOData.StructureType?
  final public var aliasValues: SAPOData.DataValueMap?
  final public var avoidInPaths: Swift.String?
  final public var compactItems: SAPOData.DataContext.CompactItemList
  final public var entityListWrapper: Swift.String?
  final public var entityValueWrapper: Swift.String?
  public init(csdl: SAPOData.CSDLDocument)
  @inline(__always) final public func bindOption(_ option: Swift.Int) -> Swift.Bool
  open func complexType(name: Swift.String) throws -> SAPOData.ComplexType
  final public var csdlDocument: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open func dataMethod(name: Swift.String) throws -> SAPOData.DataMethod
  open func entitySet(name: Swift.String) throws -> SAPOData.EntitySet
  open func entityType(name: Swift.String) throws -> SAPOData.EntityType
  open class func findActualComplex(formalType: SAPOData.ComplexType, typeName: Swift.String) -> SAPOData.ComplexType?
  open class func findActualEntity(formalType: SAPOData.EntityType, typeName: Swift.String) -> SAPOData.EntityType?
  open class func forConversionToString() -> SAPOData.DataContext
  open func hasMetadata() -> Swift.Bool
  open func hasStructureType(name: Swift.String) -> Swift.Bool
  open func inRequest() -> SAPOData.DataContext
  open func inResponse() -> SAPOData.DataContext
  open func inferEntitySet(url: Swift.String?) -> Swift.Bool
  open func makeRelative(url: Swift.String?) -> Swift.String?
  open func maybeRelative(url: Swift.String?) -> Swift.String?
  open func optionalDataMethod(name: Swift.String) -> SAPOData.DataMethod?
  open func optionalEntitySet(name: Swift.String) -> SAPOData.EntitySet?
  open func popExpected()
  open func prepareToFormat(_ value: SAPOData.DataValue?)
  open func prepareToPatch(_ value: SAPOData.DataValue?, old: SAPOData.DataValue?)
  open func pushExpected(entitySet: SAPOData.EntitySet, derivedType: SAPOData.StructureType? = nil)
  open func resolveAnyType(name: Swift.String) -> SAPOData.DataType?
  open func serviceRoot() -> Swift.String
  @inline(__always) final public func setBindOption(_ option: Swift.Int, value: Swift.Bool)
  open func topExpected() -> SAPOData.ExpectedItem
  open func withExpected(entitySet: SAPOData.EntitySet, derivedType: SAPOData.StructureType? = nil) -> SAPOData.DataContext
  open func withOptions(_ options: Swift.Int) -> SAPOData.DataContext
  open func withVersion(_ version: Swift.Int) -> SAPOData.DataContext
  @_inheritsConvenienceInitializers open class CompactItem : SAPOData.ObjectBase {
    override public init()
    final public var orderedObject: Swift.AnyObject {
      get
      set(value)
    }
    final public var propertyList: SAPOData.UntypedList {
      get
      set(value)
    }
    final public var structureType: SAPOData.StructureType {
      get
      set(value)
    }
    override open func toString() -> Swift.String
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class CompactItemList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataContext.CompactItem {
      get
      set
    }
    public static let empty: SAPOData.DataContext.CompactItemList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.DataContext.CompactItem)
    final public func append(contentsOf list: SAPOData.DataContext.CompactItemList)
    final public func appendThis(_ item: SAPOData.DataContext.CompactItem) -> SAPOData.DataContext.CompactItemList
    final public func copy() -> SAPOData.DataContext.CompactItemList
    final public func filter(_ predicate: @escaping (SAPOData.DataContext.CompactItem) -> Swift.Bool) -> SAPOData.DataContext.CompactItemList
    final public func first() -> SAPOData.DataContext.CompactItem
    open class func fromArray(_ array: Swift.Array<SAPOData.DataContext.CompactItem>) -> SAPOData.DataContext.CompactItemList
    final public func includes(item: SAPOData.DataContext.CompactItem) -> Swift.Bool
    final public func indexOf(item: SAPOData.DataContext.CompactItem, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.DataContext.CompactItem)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DataContext.CompactItemList)
    final public func item(at index: Swift.Int) -> SAPOData.DataContext.CompactItem
    final public func last() -> SAPOData.DataContext.CompactItem
    final public func lastIndexOf(item: SAPOData.DataContext.CompactItem, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataContext.CompactItem>>
    open class func of(_ items: SAPOData.DataContext.CompactItem...) -> SAPOData.DataContext.CompactItemList
    open func reversed() -> SAPOData.DataContext.CompactItemList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataContext.CompactItemList
    final public func single() -> SAPOData.DataContext.CompactItem
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataContext.CompactItemList
    final public func sort(by increasing: @escaping (SAPOData.DataContext.CompactItem, SAPOData.DataContext.CompactItem) -> Swift.Bool)
    final public func sorted() -> SAPOData.DataContext.CompactItemList
    final public func sorted(by increasing: @escaping (SAPOData.DataContext.CompactItem, SAPOData.DataContext.CompactItem) -> Swift.Bool) -> SAPOData.DataContext.CompactItemList
    open func toArray() -> Swift.Array<SAPOData.DataContext.CompactItem>
    final public func update(at index: Swift.Int, item: SAPOData.DataContext.CompactItem)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataContext.CompactItem>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataContext.CompactItem>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ExpectedItem : SAPOData.ObjectBase {
  final public var derivedType: SAPOData.StructureType?
  override public init()
  final public var entitySet: SAPOData.EntitySet {
    get
    set(value)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueryFormatter {
  public static func format(query: SAPOData.DataQuery, context: SAPOData.DataContext) -> Swift.String
  public static func formatCanonicalURL(entity: SAPOData.EntityValue, context: SAPOData.DataContext, absolute: Swift.Bool = false) -> Swift.String
  public static func formatDataValue(_ value: SAPOData.DataValue?, context: SAPOData.DataContext) -> Swift.String
  public static func formatEditLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> Swift.String
  public static func formatEntityID(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> Swift.String
  public static func formatEntityKey(_ entityKey: SAPOData.EntityKey, entityType: SAPOData.EntityType, context: SAPOData.DataContext) -> Swift.String
  public static func formatReadLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> Swift.String
  @objc deinit
}
open class QueryParser : SAPOData.ObjectBase {
  public init(context: SAPOData.DataContext)
  open class func inferEntitySet(url: Swift.String, context: SAPOData.DataContext) -> SAPOData.EntitySet?
  open func parse(requestPath: Swift.String?, queryString: Swift.String?) throws -> SAPOData.DataQuery
  open class func parseCanonicalURL(_ url: Swift.String, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  open class func parseEntityID(uri: Swift.String, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  open func parseURL(_ url: Swift.String) throws -> SAPOData.DataQuery
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BigDecimal : SAPOData.ObjectBase {
  @objc deinit
  convenience public init(_ value: Swift.Int)
  public func decimalValue() -> Foundation.Decimal
  convenience public init(_ value: Foundation.Decimal)
  convenience public init(_ text: Swift.String)
  public static let roundNone: (Swift.Int)
  public static let roundDown: (Swift.Int)
  public static let roundEven: (Swift.Int)
  public static let roundUp: (Swift.Int)
  final public func abs() -> SAPOData.BigDecimal
  final public func add(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  final public func byteValue() -> Swift.Int
  final public func ceiling() -> SAPOData.BigDecimal
  final public func compareTo(_ p_y: SAPOData.BigDecimal) -> Swift.Int
  final public func divide(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  final public func doubleValue() -> Swift.Double
  final public func equalTo(_ y: SAPOData.BigDecimal) -> Swift.Bool
  final public func floatValue() -> Swift.Float
  final public func floor() -> SAPOData.BigDecimal
  open class func fromByte(_ value: Swift.Int) -> SAPOData.BigDecimal
  open class func fromDouble(_ value: Swift.Double) -> SAPOData.BigDecimal
  open class func fromFloat(_ value: Swift.Float) -> SAPOData.BigDecimal
  open class func fromInt(_ value: Swift.Int) -> SAPOData.BigDecimal
  open class func fromLong(_ value: Swift.Int64) -> SAPOData.BigDecimal
  open class func fromShort(_ value: Swift.Int) -> SAPOData.BigDecimal
  final public func greaterEqual(_ y: SAPOData.BigDecimal) -> Swift.Bool
  final public func greaterThan(_ y: SAPOData.BigDecimal) -> Swift.Bool
  final public func intValue() -> Swift.Int
  final public func lessEqual(_ y: SAPOData.BigDecimal) -> Swift.Bool
  final public func lessThan(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open class func literal(_ text: Swift.String) -> SAPOData.BigDecimal
  final public func longValue() -> Swift.Int64
  final public func multiply(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  final public func negate() -> SAPOData.BigDecimal
  final public func notEqual(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open class func parse(_ text: Swift.String) -> SAPOData.BigDecimal?
  final public func remainder(_ y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  final public func round(_ scale: Swift.Int = (0 as Int)) -> SAPOData.BigDecimal
  final public func scale() -> Swift.Int
  final public func shortValue() -> Swift.Int
  final public func sign() -> Swift.Int
  final public func subtract(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  override final public func toString() -> Swift.String
  final public func truncate() -> SAPOData.BigDecimal
}
public class ErrorObject : SAPOData.ErrorBase {
  public init(_ error: any Swift.Error)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ArrayConverter {
  public static func convert<T, U>(_ value: Swift.Array<T>, _ target: Swift.Array<U>) -> Swift.Array<U>
  @objc deinit
}
@_inheritsConvenienceInitializers open class HTTPError : SAPOData.DataNetworkError {
  override public init()
  open class func withCause(_ cause: any Swift.Error) -> SAPOData.HTTPError
  open class func withCauseAndMessage(cause: (any Swift.Error)?, message: Swift.String) -> SAPOData.HTTPError
  open class func withMessage(_ message: Swift.String) -> SAPOData.HTTPError
  @objc deinit
}
prefix public func ! (value: SAPOData.QueryFilter) -> SAPOData.QueryFilter
public func && (left: SAPOData.QueryFilter, right: SAPOData.QueryFilter) -> SAPOData.QueryFilter
public func || (left: SAPOData.QueryFilter, right: SAPOData.QueryFilter) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Bool) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Bool) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func + (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public enum CastRequired<T> where T : AnyObject {
  public static func from(_ value: Swift.AnyObject?) -> T
}
public enum CastOptional<T> where T : AnyObject {
  public static func from(_ value: Swift.AnyObject?) -> T?
}
@_inheritsConvenienceInitializers open class HTTPCookies : SAPOData.ObjectBase {
  public static let empty: SAPOData.HTTPCookies
  override public init()
  open func addAll(other: SAPOData.HTTPCookies)
  open func concurrent() -> SAPOData.HTTPCookies
  open func cookie(withName name: Swift.String) -> Swift.String?
  open func copy() -> SAPOData.HTTPCookies
  open func entries() -> SAPOData.StringMap.EntryList
  open func hasCookie(withName name: Swift.String) -> Swift.Bool
  open var isEmpty: Swift.Bool {
    get
  }
  open func keys() -> SAPOData.StringList
  open func removeAll()
  open func removeCookie(withName name: Swift.String) -> Swift.Bool
  open func setCookie(withName name: Swift.String, value: Swift.String)
  open var size: Swift.Int {
    get
  }
  open func sortedEntries() -> SAPOData.StringMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class HTTPHandler : SAPOData.ObjectBase {
  override public init()
  open func close(request: SAPOData.HTTPRequest) throws
  open var hasCookieHandling: Swift.Bool {
    get
  }
  open func send(request: SAPOData.HTTPRequest) throws
  open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class HTTPHeaders : SAPOData.ObjectBase {
  public static let empty: SAPOData.HTTPHeaders
  override public init()
  open func addAll(other: SAPOData.HTTPHeaders)
  open func concurrent() -> SAPOData.HTTPHeaders
  open func copy() -> SAPOData.HTTPHeaders
  open class func emptyIfNull(headers: SAPOData.HTTPHeaders?) -> SAPOData.HTTPHeaders
  open func entries() -> SAPOData.StringMap.EntryList
  open func equals(_ other: Swift.AnyObject?) -> Swift.Bool
  open func hasHeader(withName name: Swift.String) -> Swift.Bool
  open func hashCode() -> Swift.Int
  open func header(withName name: Swift.String) -> Swift.String?
  open var isEmpty: Swift.Bool {
    get
  }
  open func keys() -> SAPOData.StringList
  open func parse(_ text: Swift.String, request: SAPOData.HTTPRequest?)
  open func removeAll()
  open func removeHeader(withName name: Swift.String) -> Swift.Bool
  open func setHeader(withName name: Swift.String, value: Swift.String)
  open var size: Swift.Int {
    get
  }
  open func sortedEntries() -> SAPOData.StringMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  override open func toString() -> Swift.String
  open func toStringLowerCaseKeys() -> Swift.String
  open func withClientCredentials(_ credentials: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  open func withCreateParameters(_ parameters: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  open func withData(header: Swift.String, value: Swift.AnyObject?) -> SAPOData.HTTPHeaders
  open func withDeleteParameters(_ parameters: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  open func withHeader(_ name: Swift.String, value: Swift.String) -> SAPOData.HTTPHeaders
  open func withUpdateParameters(_ parameters: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  @objc deinit
}
@_inheritsConvenienceInitializers open class HTTPRequest : SAPOData.ObjectBase {
  final public var requestBytes: SAPOData.ByteStream?
  final public var requestChars: SAPOData.CharStream?
  final public var requestText: Swift.String?
  final public var isActive: Swift.Bool
  final public var handler: SAPOData.HTTPHandler?
  final public var version: Swift.Int
  final public var method: Swift.String
  final public var url: Swift.String
  final public var username: Swift.String?
  final public var password: Swift.String?
  final public var backgroundFile: Swift.String?
  final public var backgroundName: Swift.String?
  final public var compressRequest: Swift.Bool
  final public var compressResponse: Swift.Bool
  final public var streamRequest: Swift.Bool
  final public var streamResponse: Swift.Bool
  final public var unzipResponse: Swift.Bool
  final public var requestOptions: SAPOData.RequestOptions
  final public var requestCookies: SAPOData.HTTPCookies
  final public var requestHeaders: SAPOData.HTTPHeaders
  final public var responseCookies: SAPOData.HTTPCookies
  final public var responseHeaders: SAPOData.HTTPHeaders
  final public var status: (Swift.Int)
  final public var statusText: Swift.String
  final public var traceRequest: Swift.Bool
  final public var traceHeaders: Swift.Bool
  final public var traceContent: Swift.Bool
  final public var prettyPrint: Swift.Bool
  override public init()
  open class var canTrustAllServerCertificates: Swift.Bool {
    get
  }
  open func close() throws
  open func enableTrace(serviceName: Swift.String?, traceRequest: Swift.Bool, traceHeaders: Swift.Bool, traceContent: Swift.Bool, prettyPrint: Swift.Bool)
  open var hasResponseBytes: Swift.Bool {
    get
  }
  open var hasResponseChars: Swift.Bool {
    get
  }
  open var hasResponseData: Swift.Bool {
    get
  }
  open var hasResponseText: Swift.Bool {
    get
  }
  open func login(username: Swift.String, password: Swift.String)
  open func open(method: Swift.String, url: Swift.String)
  open func requestCookie(name: Swift.String) -> Swift.String?
  open var requestData: Foundation.Data? {
    get
    set(value)
  }
  open func requestHeader(name: Swift.String) -> Swift.String?
  open var responseBytes: SAPOData.ByteStream {
    get
    set(value)
  }
  open var responseChars: SAPOData.CharStream {
    get
    set(value)
  }
  open func responseCookie(name: Swift.String) -> Swift.String?
  open var responseData: Foundation.Data {
    get
    set(value)
  }
  open var responseDataCount: Swift.Int64 {
    get
  }
  open var responseGzipCount: Swift.Int64 {
    get
  }
  open func responseHeader(name: Swift.String) -> Swift.String?
  open var responseText: Swift.String {
    get
    set(value)
  }
  open func send() throws
  open func setRequestCookie(name: Swift.String, value: Swift.String)
  open func setRequestHeader(name: Swift.String, value: Swift.String)
  open func setResponseCookie(name: Swift.String, value: Swift.String)
  open func setResponseHeader(name: Swift.String, value: Swift.String)
  open class func trustAllServerCertificates() throws
  @objc deinit
}
extension SAPOData.BigDecimal : Swift.Equatable, Swift.Comparable {
}
public func + (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func - (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func * (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func / (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func % (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func += (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func -= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func *= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func /= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func %= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func > (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func >= (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func < (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func <= (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func != (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func == (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
extension SAPOData.BigInteger : Swift.Equatable, Swift.Comparable {
}
public func + (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func - (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func * (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func / (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func % (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func += (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func -= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func *= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func /= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func %= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func > (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func >= (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func < (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func <= (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func != (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func == (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
open class ActionObject : SAPOData.ObjectBase {
  public init(action: @escaping () throws -> Swift.Void)
  open var action: () throws -> Swift.Void {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnyAsObject {
  public static func castError(_ error: (any Swift.Error)?) -> Swift.AnyObject?
  public static func cast(_ value: Swift.AnyObject?) -> Swift.AnyObject
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnyIsObject {
  public static func check(_ value: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Assert {
  public static func error(_ message: Swift.String, _ cause: (any Swift.Error)? = nil)
  public static func isFalse(_ condition: Swift.Bool, _ message: Swift.String)
  public static func isTrue(_ condition: Swift.Bool, _ message: Swift.String)
  public static func mustThrow(_ action: @escaping () throws -> Swift.Void, _ check: @escaping (any Swift.Error) -> Swift.Bool, _ message: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers open class AssertException : SAPOData.PanicError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.AssertException
  @objc deinit
}
@_inheritsConvenienceInitializers open class AtomicBoolean : SAPOData.ObjectBase {
  override public init()
  open func andSet(newValue: Swift.Bool) -> Swift.Bool
  open func compareAndSet(expect: Swift.Bool, update: Swift.Bool) -> Swift.Bool
  open func get() -> Swift.Bool
  open func set(newValue: Swift.Bool)
  override open func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Base16Binary {
  public static func charAsInt(c: Foundation.unichar) -> Swift.Int
  public static func convert(_ text: Swift.String) -> Foundation.Data
  public static func dump(data: Foundation.Data, truncate: Swift.Int? = nil) -> Swift.String
  public static func format(_ data: Foundation.Data) -> Swift.String
  public static func intAsChar(i: Swift.Int) -> Foundation.unichar
  public static func literal(_ text: Swift.String) -> Foundation.Data
  public static func parse(_ text: Swift.String) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Base64Binary {
  public static func charAsInt(c: Foundation.unichar) -> Swift.Int
  public static func convert(_ text: Swift.String) -> Foundation.Data
  public static func format(_ data: Foundation.Data) -> Swift.String
  public static func formatPadSafe(data: Foundation.Data, pad: Swift.Bool, safe: Swift.Bool) -> Swift.String
  public static func intAsChar(i: Swift.Int, safe: Swift.Bool) -> Foundation.unichar
  public static func literal(_ text: Swift.String) -> Foundation.Data
  public static func parse(_ text: Swift.String) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BinaryConstant {
  public static let empty: Foundation.Data
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BinaryFunction {
  public static func byteAt(_ value: Foundation.Data, index: Swift.Int) -> Swift.Int
  public static func compareTo(_ value: Foundation.Data, other: Foundation.Data) -> Swift.Int
  public static func hashCode(_ value: Foundation.Data) -> Swift.Int
  public static func indexOf(_ value: Foundation.Data, find: Foundation.Data, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func slice(_ value: Foundation.Data, start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> Foundation.Data
  public static func toString(_ value: Foundation.Data) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BinaryOperator {
  public static func compare(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Int
  public static func equal(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func greaterEqual(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func greaterThan(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func lessEqual(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func lessThan(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func notEqual(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  @objc deinit
}
open class BinarySemaphore : SAPOData.CountingSemaphore {
  public init(name: Swift.String? = nil)
  @objc deinit
}
open class BooleanArray : SAPOData.ObjectBase {
  @objc deinit
  public static let empty: SAPOData.BooleanArray
  public init(length: Swift.Int)
  @inline(__always) final public func item(at index: Swift.Int) -> Swift.Bool
  @inline(__always) final public var length: Swift.Int {
    get
  }
  @inline(__always) final public func update(at index: Swift.Int, item value: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class BooleanFunction {
  public static func toString(_ value: Swift.Bool) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BooleanOperator {
  public static func compare(_ left: Swift.Bool, _ right: Swift.Bool) -> Swift.Int
  public static func equal(_ left: Swift.Bool, _ right: Swift.Bool) -> Swift.Bool
  public static func notEqual(_ left: Swift.Bool, _ right: Swift.Bool) -> Swift.Bool
  @objc deinit
}
final public class ByteBuffer : SAPOData.ObjectBase {
  @objc deinit
  public init(capacity: Swift.Int = (16 as Int))
  final public func add(_ value: Swift.Int)
  final public func append(_ data: Foundation.Data?)
  final public func clear()
  final public func insert(at index: Swift.Int, item value: Swift.Int)
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var isNotEmpty: Swift.Bool {
    get
  }
  final public func item(at index: Swift.Int) -> Swift.Int
  final public var length: Swift.Int {
    get
    set(value)
  }
  final public func range(start: Swift.Int, end: Swift.Int) -> Foundation.Data
  final public func reverse()
  final public func setRange(index: Swift.Int, value: Foundation.Data)
  final public func toBinary() -> Foundation.Data
  final public func update(at index: Swift.Int, item value: Swift.Int)
}
@_hasMissingDesignatedInitializers public class ByteConstant {
  public static let minValue: (Swift.Int)
  public static let maxValue: (Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ByteFunction {
  public static func toString(_ value: Swift.Int, radix: Swift.Int = (10 as Int)) -> Swift.String
  public static func toUnsigned(_ value: Swift.Int) -> Swift.Int
  public static func truncateIfNeeded(_ value: Swift.Int) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ByteOperator {
  public static func add(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func compare(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func divide(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func equal(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func multiply(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func negate(_ value: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func remainder(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func subtract(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers open class CastException : SAPOData.PanicError {
  override public init()
  open class func cannotCast(_ value: Swift.AnyObject?, type: Swift.String) -> SAPOData.CastException
  open class func withMessage(_ message: Swift.String) -> SAPOData.CastException
  @objc deinit
}
final public class CharBuffer : SAPOData.ObjectBase {
  @objc deinit
  public init(capacity: Swift.Int = (16 as Int))
  final public func add(_ value: Foundation.unichar)
  final public func append(_ text: Swift.String?)
  final public func clear()
  final public func insert(at index: Swift.Int, item value: Foundation.unichar)
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var isNotEmpty: Swift.Bool {
    get
  }
  final public func item(at index: Swift.Int) -> Foundation.unichar
  final public class func join2(_ text1: Swift.String?, _ text2: Swift.String?) -> Swift.String
  final public class func join3(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?) -> Swift.String
  final public class func join4(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?) -> Swift.String
  final public class func join5(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?) -> Swift.String
  final public class func join6(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?) -> Swift.String
  final public class func join7(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?, _ text7: Swift.String?) -> Swift.String
  final public class func join8(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?, _ text7: Swift.String?, _ text8: Swift.String?) -> Swift.String
  final public class func join9(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?, _ text7: Swift.String?, _ text8: Swift.String?, _ text9: Swift.String?) -> Swift.String
  final public var length: Swift.Int {
    get
    set(value)
  }
  final public func range(start: Swift.Int, end: Swift.Int) -> Swift.String
  final public func reverse()
  final public func setRange(index: Swift.Int, value: Swift.String)
  override final public func toString() -> Swift.String
  final public func update(at index: Swift.Int, item value: Foundation.unichar)
}
@_hasMissingDesignatedInitializers public class CharFunction {
  @inline(__always) public static func isASCII(_ value: Foundation.unichar) -> Swift.Bool
  public static func isDigit(_ value: Foundation.unichar) -> Swift.Bool
  public static func isHexDigit(_ value: Foundation.unichar) -> Swift.Bool
  public static func isLowerCase(_ value: Foundation.unichar) -> Swift.Bool
  @inline(__always) public static func isReservedInGenDelims(_ value: Foundation.unichar) -> Swift.Bool
  @inline(__always) public static func isReservedInSubDelims(_ value: Foundation.unichar) -> Swift.Bool
  public static func isReservedInURI(_ value: Foundation.unichar) -> Swift.Bool
  @inline(__always) public static func isReservedInURIPath(_ value: Foundation.unichar) -> Swift.Bool
  @inline(__always) public static func isReservedInURIQuery(_ value: Foundation.unichar) -> Swift.Bool
  public static func isUnreservedInURI(_ value: Foundation.unichar) -> Swift.Bool
  public static func isUpperCase(_ value: Foundation.unichar) -> Swift.Bool
  public static func isWhitespace(_ value: Foundation.unichar) -> Swift.Bool
  public static func toLowerCase(_ value: Foundation.unichar) -> Foundation.unichar
  public static func toString(_ value: Foundation.unichar) -> Swift.String
  public static func toUpperCase(_ value: Foundation.unichar) -> Foundation.unichar
  public static func unicodePlus(_ value: Foundation.unichar) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CharOperator {
  public static func compare(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Int
  public static func equal(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func greaterEqual(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func greaterThan(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func lessEqual(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func lessThan(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func notEqual(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CheckProperty {
  public static func isDefined<T>(_ owner: Swift.AnyClass, _ name: Swift.String, _ value: T?) -> T
  public static func isDefined<T>(_ owner: Swift.AnyObject, _ name: Swift.String, _ value: T?) -> T
  @objc deinit
}
@_inheritsConvenienceInitializers open class Comparer : SAPOData.ObjectBase {
  public static let undefined: SAPOData.Comparer
  override public init()
  open func compare(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Int
  @objc deinit
}
open class ConditionVariable : SAPOData.ObjectBase {
  public init(mutex: SAPOData.ReentrantMutex)
  open func await()
  open func signal()
  @objc deinit
}
open class CountdownLatch : SAPOData.ObjectBase {
  public init(count: Swift.Int, name: Swift.String? = nil)
  open func await(timeout: Swift.Int = (2147483647 as Int)) -> Swift.Bool
  open var count: Swift.Int {
    get
  }
  open func countdown()
  @objc deinit
}
open class CountingSemaphore : SAPOData.ObjectBase {
  @objc deinit
  public init(permits: Swift.Int, name: Swift.String? = nil)
  open func acquire()
  open func release()
  open func tryAcquire(timeout: Swift.Int) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class DebugAddress {
  public static func at(_ value: Swift.AnyObject?) -> Swift.String
  public static func of(_ value: Swift.AnyObject?) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DebugConsole {
  public static func append(file: Swift.String)
  public static func captured() -> Swift.String
  public static func close()
  public static func debug(message: Swift.String, cause: (any Swift.Error)? = nil, dump: Swift.Bool = false)
  public static func dumpStack(message: Swift.String = "Stack Dump")
  public static func error(message: Swift.String, cause: (any Swift.Error)? = nil, dump: Swift.Bool = false)
  public static func flush()
  public static func info(message: Swift.String, cause: (any Swift.Error)? = nil, dump: Swift.Bool = false)
  public static func log(message: Swift.String, cause: (any Swift.Error)? = nil, dump: Swift.Bool = false)
  public static func mainException(_ cause: any Swift.Error)
  public static func open(file: Swift.String)
  public static func startCapture()
  public static func stopCapture()
  public static func trace(message: Swift.String, cause: (any Swift.Error)? = nil, dump: Swift.Bool = false)
  public static func traceEx(cause: any Swift.Error)
  public static func traceIn(_ method: Swift.String)
  public static func traceOut(_ method: Swift.String)
  public static func warn(message: Swift.String, cause: (any Swift.Error)? = nil, dump: Swift.Bool = false)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecimalConstant {
  public static let zero: SAPOData.BigDecimal
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecimalFunction {
  public static func fromByte(_ value: Swift.Int) -> SAPOData.BigDecimal
  public static func fromDouble(_ value: Swift.Double) -> SAPOData.BigDecimal
  public static func fromFloat(_ value: Swift.Float) -> SAPOData.BigDecimal
  public static func fromInt(_ value: Swift.Int) -> SAPOData.BigDecimal
  public static func fromInteger(_ value: SAPOData.BigInteger) -> SAPOData.BigDecimal
  public static func fromLong(_ value: Swift.Int64) -> SAPOData.BigDecimal
  public static func fromShort(_ value: Swift.Int) -> SAPOData.BigDecimal
  public static func toByte(_ value: SAPOData.BigDecimal) -> Swift.Int
  public static func toDouble(_ value: SAPOData.BigDecimal) -> Swift.Double
  public static func toFloat(_ value: SAPOData.BigDecimal) -> Swift.Float
  public static func toInt(_ value: SAPOData.BigDecimal) -> Swift.Int
  public static func toInteger(_ value: SAPOData.BigDecimal) -> SAPOData.BigInteger
  public static func toLong(_ value: SAPOData.BigDecimal) -> Swift.Int64
  public static func toShort(_ value: SAPOData.BigDecimal) -> Swift.Int
  public static func toString(_ value: SAPOData.BigDecimal) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecimalOperator {
  public static func add(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func compare(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Int
  public static func divide(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func equal(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func greaterEqual(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func greaterThan(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func lessEqual(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func lessThan(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func multiply(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func negate(_ value: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func notEqual(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func remainder(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func subtract(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleConstant {
  public static func nan() -> Swift.Double
  public static func negativeInfinity() -> Swift.Double
  public static func positiveInfinity() -> Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleFunction {
  public static func byteValue(_ value: Swift.Double) -> Swift.Int
  public static func intValue(_ value: Swift.Double) -> Swift.Int
  public static func isFinite(_ value: Swift.Double) -> Swift.Bool
  public static func isInfinite(_ value: Swift.Double) -> Swift.Bool
  public static func isNaN(_ value: Swift.Double) -> Swift.Bool
  public static func longValue(_ value: Swift.Double) -> Swift.Int64
  public static func shortValue(_ value: Swift.Double) -> Swift.Int
  public static func toExponential(_ value: Swift.Double, fractionDigits: Swift.Int = (16 as Int)) -> Swift.String
  public static func toFixed(_ value: Swift.Double, fractionDigits: Swift.Int) -> Swift.String
  public static func toString(_ value: Swift.Double) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleOperator {
  public static func add(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func compare(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Int
  public static func divide(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func equal(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func lessThan(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func multiply(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func negate(_ value: Swift.Double) -> Swift.Double
  public static func notEqual(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func remainder(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func subtract(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  @objc deinit
}
@_inheritsConvenienceInitializers open class EmptyListException : SAPOData.PanicError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.EmptyListException
  @objc deinit
}
@_inheritsConvenienceInitializers open class Equality : SAPOData.ObjectBase {
  public static let undefined: SAPOData.Equality
  override public init()
  open func equal(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
open class ErrorBase : Swift.Error, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Foundation.LocalizedError {
  public var callStack: [Swift.String]?
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public func captureStack()
  final public var cause: (any Swift.Error)?
  final public var message: Swift.String?
  public init()
  open func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ErrorFunction {
  public static func equal(_ left: (any Swift.Error)?, _ right: (any Swift.Error)?) -> Swift.Bool
  public static func hasValue(_ left: (any Swift.Error)?, _ right: any Swift.Error) -> Swift.Bool
  public static func isNull(_ value: (any Swift.Error)?) -> Swift.Bool
  public static func notEqual(_ left: (any Swift.Error)?, _ right: (any Swift.Error)?) -> Swift.Bool
  public static func notNull(_ value: (any Swift.Error)?) -> Swift.Bool
  public static func nullValue() -> (any Swift.Error)?
  public static func toString(_ value: (any Swift.Error)?) -> Swift.String
  public static func value(_ value: (any Swift.Error)?) -> any Swift.Error
  public static func withValue(_ value: any Swift.Error) -> (any Swift.Error)?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FloatConstant {
  public static func nan() -> Swift.Float
  public static func negativeInfinity() -> Swift.Float
  public static func positiveInfinity() -> Swift.Float
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FloatFunction {
  public static func byteValue(_ value: Swift.Float) -> Swift.Int
  public static func intValue(_ value: Swift.Float) -> Swift.Int
  public static func isFinite(_ value: Swift.Float) -> Swift.Bool
  public static func isInfinite(_ value: Swift.Float) -> Swift.Bool
  public static func isNaN(_ value: Swift.Float) -> Swift.Bool
  public static func longValue(_ value: Swift.Float) -> Swift.Int64
  public static func shortValue(_ value: Swift.Float) -> Swift.Int
  public static func toExponential(_ value: Swift.Float, fractionDigits: Swift.Int = (8 as Int)) -> Swift.String
  public static func toFixed(_ value: Swift.Float, fractionDigits: Swift.Int) -> Swift.String
  public static func toString(_ value: Swift.Float) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FloatOperator {
  public static func add(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func compare(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Int
  public static func divide(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func equal(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func lessThan(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func multiply(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func negate(_ value: Swift.Float) -> Swift.Float
  public static func notEqual(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func remainder(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func subtract(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GUID : SAPOData.ObjectBase {
  open class func fromBinary(data: Foundation.Data) -> SAPOData.GUID?
  open class func fromString(text: Swift.String) -> SAPOData.GUID?
  open class func newRandom() -> SAPOData.GUID
  open func toBinary() -> Foundation.Data
  override open func toString() -> Swift.String
  open func toString32() -> Swift.String
  open func toString36() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Ignore {
  @inline(__always) public static func valueOf_any(_ value: Swift.AnyObject?)
  @inline(__always) public static func valueOf_binary(_ value: Foundation.Data)
  @inline(__always) public static func valueOf_boolean(_ value: Swift.Bool)
  @inline(__always) public static func valueOf_byte(_ value: Swift.Int)
  @inline(__always) public static func valueOf_char(_ value: Foundation.unichar)
  @inline(__always) public static func valueOf_decimal(_ value: SAPOData.BigDecimal)
  @inline(__always) public static func valueOf_double(_ value: Swift.Double)
  @inline(__always) public static func valueOf_error(_ value: (any Swift.Error)?)
  @inline(__always) public static func valueOf_float(_ value: Swift.Float)
  @inline(__always) public static func valueOf_int(_ value: Swift.Int)
  @inline(__always) public static func valueOf_integer(_ value: SAPOData.BigInteger)
  @inline(__always) public static func valueOf_long(_ value: Swift.Int64)
  @inline(__always) public static func valueOf_nullableBinary(_ value: Foundation.Data?)
  @inline(__always) public static func valueOf_nullableBoolean(_ value: Swift.Bool?)
  @inline(__always) public static func valueOf_nullableByte(_ value: Swift.Int?)
  @inline(__always) public static func valueOf_nullableChar(_ value: Foundation.unichar?)
  @inline(__always) public static func valueOf_nullableDecimal(_ value: SAPOData.BigDecimal?)
  @inline(__always) public static func valueOf_nullableDouble(_ value: Swift.Double?)
  @inline(__always) public static func valueOf_nullableFloat(_ value: Swift.Float?)
  @inline(__always) public static func valueOf_nullableInt(_ value: Swift.Int?)
  @inline(__always) public static func valueOf_nullableInteger(_ value: SAPOData.BigInteger?)
  @inline(__always) public static func valueOf_nullableLong(_ value: Swift.Int64?)
  @inline(__always) public static func valueOf_nullableShort(_ value: Swift.Int?)
  @inline(__always) public static func valueOf_nullableString(_ value: Swift.String?)
  @inline(__always) public static func valueOf_short(_ value: Swift.Int)
  @inline(__always) public static func valueOf_string(_ value: Swift.String)
  @objc deinit
}
open class IntArray : SAPOData.ObjectBase {
  @objc deinit
  public static let empty: SAPOData.IntArray
  public init(length: Swift.Int)
  @inline(__always) final public func item(at index: Swift.Int) -> Swift.Int
  @inline(__always) final public var length: Swift.Int {
    get
  }
  @inline(__always) final public func update(at index: Swift.Int, item value: Swift.Int)
}
@_hasMissingDesignatedInitializers public class IntConstant {
  public static let minValue: Swift.Int
  public static let maxValue: (Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntFunction {
  public static func fromBytes(_ a: Swift.Int, _ b: Swift.Int, _ c: Swift.Int, _ d: Swift.Int) -> Swift.Int
  public static func toString(_ value: Swift.Int, radix: Swift.Int = (10 as Int)) -> Swift.String
  public static func truncateIfNeeded(_ value: Swift.Int) -> Swift.Int
  public static func unicodePlus(_ value: Swift.Int) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntOperator {
  @inline(__always) public static func prefixDecrement(_ value: inout Swift.Int) -> Swift.Int
  @inline(__always) public static func prefixIncrement(_ value: inout Swift.Int) -> Swift.Int
  @inline(__always) public static func postfixDecrement(_ value: inout Swift.Int) -> Swift.Int
  @inline(__always) public static func postfixIncrement(_ value: inout Swift.Int) -> Swift.Int
  public static func add(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func compare(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func divide(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func equal(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func multiply(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func negate(_ value: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func remainder(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func subtract(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntegerConstant {
  public static let zero: SAPOData.BigInteger
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntegerFunction {
  public static func fromByte(_ value: Swift.Int) -> SAPOData.BigInteger
  public static func fromDecimal(_ value: SAPOData.BigDecimal) -> SAPOData.BigInteger
  public static func fromDouble(_ value: Swift.Double) -> SAPOData.BigInteger
  public static func fromFloat(_ value: Swift.Float) -> SAPOData.BigInteger
  public static func fromInt(_ value: Swift.Int) -> SAPOData.BigInteger
  public static func fromLong(_ value: Swift.Int64) -> SAPOData.BigInteger
  public static func fromShort(_ value: Swift.Int) -> SAPOData.BigInteger
  public static func toByte(_ value: SAPOData.BigInteger) -> Swift.Int
  public static func toDecimal(_ value: SAPOData.BigInteger) -> SAPOData.BigDecimal
  public static func toDouble(_ value: SAPOData.BigInteger) -> Swift.Double
  public static func toFloat(_ value: SAPOData.BigInteger) -> Swift.Float
  public static func toInt(_ value: SAPOData.BigInteger) -> Swift.Int
  public static func toLong(_ value: SAPOData.BigInteger) -> Swift.Int64
  public static func toShort(_ value: SAPOData.BigInteger) -> Swift.Int
  public static func toString(_ value: SAPOData.BigInteger) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntegerOperator {
  public static func add(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func compare(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Int
  public static func divide(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func equal(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func greaterEqual(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func greaterThan(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func lessEqual(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func lessThan(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func multiply(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func negate(_ value: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func notEqual(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func remainder(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func subtract(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  @objc deinit
}
@_inheritsConvenienceInitializers open class ListIndexException : SAPOData.PanicError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.ListIndexException
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongConstant {
  public static let minValue: Swift.Int64
  public static let maxValue: (Swift.Int64)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongFunction {
  @inline(__always) public static func and(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  @inline(__always) public static func or(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func toString(_ value: Swift.Int64, radix: Swift.Int = (10 as Int)) -> Swift.String
  public static func truncateIfNeeded(_ value: Swift.Int64) -> Swift.Int64
  @inline(__always) public static func xor(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongOperator {
  public static func add(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func compare(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int
  public static func divide(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func equal(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func multiply(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func negate(_ value: Swift.Int64) -> Swift.Int64
  public static func notEqual(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func remainder(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func subtract(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MapIteratorFromObject : SAPOData.ObjectBase {
  final public var key: Swift.AnyObject {
    get
  }
  final public func next() throws -> Swift.Bool
  final public var value: Swift.AnyObject? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MapIteratorFromString : SAPOData.ObjectBase {
  final public var key: Swift.String {
    get
  }
  final public func next() throws -> Swift.Bool
  final public var value: Swift.AnyObject? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class MissingEntryException : SAPOData.PanicError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.MissingEntryException
  @objc deinit
}
@_inheritsConvenienceInitializers open class MutableBoolean : SAPOData.ObjectBase {
  final public var value: Swift.Bool
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class MutableDouble : SAPOData.ObjectBase {
  final public var value: (Swift.Double)
  override public init()
  open func add(_ value: Swift.Double)
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class MutableFloat : SAPOData.ObjectBase {
  final public var value: Swift.Float
  override public init()
  open func add(_ value: Swift.Float)
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class MutableInt : SAPOData.ObjectBase {
  final public var value: (Swift.Int)
  override public init()
  open func add(_ value: Swift.Int)
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class MutableLong : SAPOData.ObjectBase {
  final public var value: Swift.Int64
  override public init()
  open func add(_ value: Swift.Int64)
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class NotUniqueException : SAPOData.PanicError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.NotUniqueException
  @objc deinit
}
open class ObjectArray : SAPOData.ObjectBase {
  @objc deinit
  public static let empty: SAPOData.ObjectArray
  public init(length: Swift.Int)
  @inline(__always) final public func item(at index: Swift.Int) -> Swift.AnyObject?
  @inline(__always) final public var length: Swift.Int {
    get
  }
  @inline(__always) final public func update(at index: Swift.Int, item value: Swift.AnyObject?)
}
@_hasMissingDesignatedInitializers public class ObjectAsAny {
  public static func castError(_ error: (any Swift.Error)?) -> Swift.AnyObject?
  @inline(__always) public static func cast(_ value: Swift.AnyObject?) -> Swift.AnyObject?
  @objc deinit
}
open class ObjectBase : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
  public init()
  open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class ObjectFactory : SAPOData.ObjectBase {
  open func createWithDecoder(decoder: any Swift.Decoder) throws -> Swift.AnyObject
  public static func with(create: @escaping () -> Swift.AnyObject, createWithDecoder: @escaping (any Swift.Decoder) throws -> Swift.AnyObject) -> SAPOData.ObjectFactory
  public static func with(create: @escaping () -> Swift.AnyObject, sparse: @escaping (SAPOData.SparseIndexMap) -> Swift.AnyObject, decode: @escaping (any Swift.Decoder) throws -> Swift.AnyObject) -> SAPOData.ObjectFactory
  override public init()
  open func create() -> Swift.AnyObject
  open func createWithSparseArray(indexMap: SAPOData.SparseIndexMap) -> Swift.AnyObject
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectFunction {
  public static func toJSON(_ value: Swift.AnyObject) -> Swift.String
  public static func toString(_ value: Swift.AnyObject) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectIsAny {
  public static func check(_ value: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectLifetime {
  public static func immortalize(_ o: Swift.AnyObject?) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectOperator {
  public static func equal(_ left: Swift.AnyObject, _ right: Swift.AnyObject) -> Swift.Bool
  public static func notEqual(_ left: Swift.AnyObject, _ right: Swift.AnyObject) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalBinary {
  public static func equal(_ left: Foundation.Data?, _ right: Foundation.Data?) -> Swift.Bool
  public static func hasValue(_ left: Foundation.Data?, _ right: Foundation.Data) -> Swift.Bool
  public static func isNull(_ value: Foundation.Data?) -> Swift.Bool
  public static func lengthWithDefault(_ value: Foundation.Data?, defaultLength: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Foundation.Data?, _ right: Foundation.Data?) -> Swift.Bool
  public static func notNull(_ value: Foundation.Data?) -> Swift.Bool
  public static func nullValue() -> Foundation.Data?
  public static func toString(_ value: Foundation.Data?) -> Swift.String
  public static func value(_ value: Foundation.Data?) -> Foundation.Data
  public static func withValue(_ value: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalBoolean {
  public static func equal(_ left: Swift.Bool?, _ right: Swift.Bool?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Bool?, _ right: Swift.Bool) -> Swift.Bool
  public static func isNull(_ value: Swift.Bool?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Bool?, _ right: Swift.Bool?) -> Swift.Bool
  public static func notNull(_ value: Swift.Bool?) -> Swift.Bool
  public static func nullValue() -> Swift.Bool?
  public static func toString(_ value: Swift.Bool?) -> Swift.String
  public static func value(_ value: Swift.Bool?) -> Swift.Bool
  public static func withValue(_ value: Swift.Bool) -> Swift.Bool?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalByte {
  public static func equal(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int?, _ right: Swift.Int) -> Swift.Bool
  public static func isNull(_ value: Swift.Int?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int?) -> Swift.Bool
  public static func nullValue() -> Swift.Int?
  public static func toString(_ value: Swift.Int?) -> Swift.String
  public static func value(_ value: Swift.Int?) -> Swift.Int
  public static func withValue(_ value: Swift.Int) -> Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalChar {
  public static func equal(_ left: Foundation.unichar?, _ right: Foundation.unichar?) -> Swift.Bool
  public static func hasValue(_ left: Foundation.unichar?, _ right: Foundation.unichar) -> Swift.Bool
  public static func isNull(_ value: Foundation.unichar?) -> Swift.Bool
  public static func notEqual(_ left: Foundation.unichar?, _ right: Foundation.unichar?) -> Swift.Bool
  public static func notNull(_ value: Foundation.unichar?) -> Swift.Bool
  public static func nullValue() -> Foundation.unichar?
  public static func toString(_ value: Foundation.unichar?) -> Swift.String
  public static func value(_ value: Foundation.unichar?) -> Foundation.unichar
  public static func withValue(_ value: Foundation.unichar) -> Foundation.unichar?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalDecimal {
  public static func equal(_ left: SAPOData.BigDecimal?, _ right: SAPOData.BigDecimal?) -> Swift.Bool
  public static func hasValue(_ left: SAPOData.BigDecimal?, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func isNull(_ value: SAPOData.BigDecimal?) -> Swift.Bool
  public static func notEqual(_ left: SAPOData.BigDecimal?, _ right: SAPOData.BigDecimal?) -> Swift.Bool
  public static func notNull(_ value: SAPOData.BigDecimal?) -> Swift.Bool
  public static func nullValue() -> SAPOData.BigDecimal?
  public static func toString(_ value: SAPOData.BigDecimal?) -> Swift.String
  public static func value(_ value: SAPOData.BigDecimal?) -> SAPOData.BigDecimal
  public static func withValue(_ value: SAPOData.BigDecimal) -> SAPOData.BigDecimal?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalDouble {
  public static func equal(_ left: Swift.Double?, _ right: Swift.Double?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Double?, _ right: Swift.Double) -> Swift.Bool
  public static func isNull(_ value: Swift.Double?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Double?, _ right: Swift.Double?) -> Swift.Bool
  public static func notNull(_ value: Swift.Double?) -> Swift.Bool
  public static func nullValue() -> Swift.Double?
  public static func toString(_ value: Swift.Double?) -> Swift.String
  public static func value(_ value: Swift.Double?) -> Swift.Double
  public static func withValue(_ value: Swift.Double) -> Swift.Double?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalFloat {
  public static func equal(_ left: Swift.Float?, _ right: Swift.Float?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Float?, _ right: Swift.Float) -> Swift.Bool
  public static func isNull(_ value: Swift.Float?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Float?, _ right: Swift.Float?) -> Swift.Bool
  public static func notNull(_ value: Swift.Float?) -> Swift.Bool
  public static func nullValue() -> Swift.Float?
  public static func toString(_ value: Swift.Float?) -> Swift.String
  public static func value(_ value: Swift.Float?) -> Swift.Float
  public static func withValue(_ value: Swift.Float) -> Swift.Float?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalInt {
  public static func equal(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int?, _ right: Swift.Int) -> Swift.Bool
  public static func isNull(_ value: Swift.Int?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int?) -> Swift.Bool
  public static func nullValue() -> Swift.Int?
  public static func toString(_ value: Swift.Int?) -> Swift.String
  public static func value(_ value: Swift.Int?) -> Swift.Int
  public static func withValue(_ value: Swift.Int) -> Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalInteger {
  public static func equal(_ left: SAPOData.BigInteger?, _ right: SAPOData.BigInteger?) -> Swift.Bool
  public static func hasValue(_ left: SAPOData.BigInteger?, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func isNull(_ value: SAPOData.BigInteger?) -> Swift.Bool
  public static func notEqual(_ left: SAPOData.BigInteger?, _ right: SAPOData.BigInteger?) -> Swift.Bool
  public static func notNull(_ value: SAPOData.BigInteger?) -> Swift.Bool
  public static func nullValue() -> SAPOData.BigInteger?
  public static func toString(_ value: SAPOData.BigInteger?) -> Swift.String
  public static func value(_ value: SAPOData.BigInteger?) -> SAPOData.BigInteger
  public static func withValue(_ value: SAPOData.BigInteger) -> SAPOData.BigInteger?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalLong {
  public static func equal(_ left: Swift.Int64?, _ right: Swift.Int64?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int64?, _ right: Swift.Int64) -> Swift.Bool
  public static func isNull(_ value: Swift.Int64?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int64?, _ right: Swift.Int64?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int64?) -> Swift.Bool
  public static func nullValue() -> Swift.Int64?
  public static func toString(_ value: Swift.Int64?) -> Swift.String
  public static func value(_ value: Swift.Int64?) -> Swift.Int64
  public static func withValue(_ value: Swift.Int64) -> Swift.Int64?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalObject {
  public static func equal(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  public static func hasValue(_ left: Swift.AnyObject?, _ right: Swift.AnyObject) -> Swift.Bool
  public static func isNull(_ value: Swift.AnyObject?) -> Swift.Bool
  public static func notEqual(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  public static func notNull(_ value: Swift.AnyObject?) -> Swift.Bool
  public static func nullValue() -> Swift.AnyObject?
  public static func toJSON(_ value: Swift.AnyObject?) -> Swift.String
  public static func toString(_ value: Swift.AnyObject?) -> Swift.String
  public static func value(_ value: Swift.AnyObject?) -> Swift.AnyObject
  public static func withValue(_ value: Swift.AnyObject) -> Swift.AnyObject?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalShort {
  public static func equal(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int?, _ right: Swift.Int) -> Swift.Bool
  public static func isNull(_ value: Swift.Int?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int?) -> Swift.Bool
  public static func nullValue() -> Swift.Int?
  public static func toString(_ value: Swift.Int?) -> Swift.String
  public static func value(_ value: Swift.Int?) -> Swift.Int
  public static func withValue(_ value: Swift.Int) -> Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalString {
  public static func equal(_ left: Swift.String?, _ right: Swift.String?) -> Swift.Bool
  public static func hasValue(_ left: Swift.String?, _ right: Swift.String) -> Swift.Bool
  public static func isNull(_ value: Swift.String?) -> Swift.Bool
  public static func lengthWithDefault(_ value: Swift.String?, defaultLength: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.String?, _ right: Swift.String?) -> Swift.Bool
  public static func notNull(_ value: Swift.String?) -> Swift.Bool
  public static func nullValue() -> Swift.String?
  public static func toString(_ value: Swift.String?) -> Swift.String
  public static func value(_ value: Swift.String?) -> Swift.String
  public static func withValue(_ value: Swift.String) -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers open class PanicError : SAPOData.ErrorBase {
  public func panic() -> Swift.AnyObject
  public func throwAny() -> Swift.AnyObject
  public func throwVoid()
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class ReadWriteMutex : SAPOData.ObjectBase {
  override public init()
  open func beginRead()
  open func beginWrite()
  open func endRead()
  open func endWrite()
  open func readLock(action: @escaping () throws -> Swift.Void) throws
  open func writeLock(action: @escaping () throws -> Swift.Void) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class ReentrantMutex : SAPOData.ObjectBase {
  override public init()
  open func lock()
  open func tryLock() -> Swift.Bool
  open func unlock()
  open func withLock(action: @escaping () throws -> Swift.Void) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ShortConstant {
  public static let minValue: (Swift.Int)
  public static let maxValue: (Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ShortFunction {
  public static func fromBytes(_ a: Swift.Int, _ b: Swift.Int) -> Swift.Int
  public static func toString(_ value: Swift.Int, radix: Swift.Int = (10 as Int)) -> Swift.String
  public static func toUnsigned(_ value: Swift.Int) -> Swift.Int
  public static func truncateIfNeeded(_ value: Swift.Int) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ShortOperator {
  public static func add(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func compare(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func divide(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func equal(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func multiply(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func negate(_ value: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func remainder(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func subtract(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  @objc deinit
}
open class SparseIndexMap : SAPOData.IntArray {
  final public var sparseLength: (Swift.Int)
  public init(sparseLength: Swift.Int, targetLength: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class StringComparer : SAPOData.Comparer {
  public static let caseSensitive: SAPOData.Comparer
  public static let caseInsensitive: SAPOData.Comparer
  override public init()
  override open func compare(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringConstant {
  public static let empty: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringEquality {
  public static let ignoreCase: SAPOData.Equality
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringFunction {
  public static func join(_ strings: Swift.String?...) -> Swift.String
  public static func `repeat`(_ value: Swift.String, count: Swift.Int) -> Swift.String
  public static func afterFirst(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func afterLast(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func beforeFirst(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func beforeLast(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func compareTo(_ value: Swift.String, other: Swift.String) -> Swift.Int
  public static func endsWith(_ value: Swift.String, suffix: Swift.String, end: Swift.Int = (2147483647 as Int)) -> Swift.Bool
  public static func equalsIgnoreCase(_ value: Swift.String, other: Swift.String) -> Swift.Bool
  public static func hashCode(_ value: Swift.String) -> Swift.Int
  public static func htmlEscape(_ value: Swift.String) -> Swift.String
  public static func includes(_ value: Swift.String, text: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Bool
  public static func includesAny(_ value: Swift.String, chars: Swift.String) -> Swift.Bool
  public static func includesChar(_ value: Swift.String, text: Foundation.unichar, start: Swift.Int = (0 as Int)) -> Swift.Bool
  public static func indexOf(_ value: Swift.String, find: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func indexOfAny(_ value: Swift.String, chars: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func indexOfChar(_ value: Swift.String, find: Foundation.unichar, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func insert(_ value: Swift.String, insert: Swift.String, index: Swift.Int) -> Swift.String
  public static func lastIndexOf(_ value: Swift.String, find: Swift.String, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  public static func lastIndexOfAny(_ value: Swift.String, chars: Swift.String, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  public static func lastIndexOfChar(_ value: Swift.String, find: Foundation.unichar, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  public static func lowerFirst(_ value: Swift.String) -> Swift.String
  public static func padLeft(_ value: Swift.String, maxLength: Swift.Int, fillStr: Swift.String = " ") -> Swift.String
  public static func padRight(_ value: Swift.String, maxLength: Swift.Int, fillStr: Swift.String = " ") -> Swift.String
  public static func percentDecode(_ value: Swift.String) -> Swift.String
  public static func percentEncode(_ value: Swift.String, path: Swift.Bool = false, query: Swift.Bool = false) -> Swift.String
  public static func percentNormal(_ value: Swift.String) -> Swift.String
  public static func prettyName(_ value: Swift.String, upperFirst: Swift.Bool) -> Swift.String
  public static func removePrefix(_ value: Swift.String, prefix: Swift.String) -> Swift.String
  public static func removeSuffix(_ value: Swift.String, suffix: Swift.String) -> Swift.String
  public static func replaceAll(_ value: Swift.String, text: Swift.String, newText: Swift.String) -> Swift.String
  public static func replaceFirst(_ value: Swift.String, text: Swift.String, newText: Swift.String) -> Swift.String
  public static func replaceLast(_ value: Swift.String, text: Swift.String, newText: Swift.String) -> Swift.String
  public static func slice(_ value: Swift.String, start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> Swift.String
  public static func startsWith(_ value: Swift.String, prefix: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Bool
  public static func substr(_ value: Swift.String, start: Swift.Int, length: Swift.Int = (2147483647 as Int)) -> Swift.String
  public static func substring(_ value: Swift.String, start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> Swift.String
  public static func toAny(_ value: Swift.String) -> Swift.AnyObject?
  public static func toBinary(_ value: Swift.String) -> Foundation.Data
  public static func toChar(_ value: Swift.String) -> Foundation.unichar
  public static func toJSON(_ value: Swift.String) -> Swift.String
  public static func toLowerCase(_ value: Swift.String) -> Swift.String
  public static func toString(_ value: Swift.String) -> Swift.String
  public static func toUpperCase(_ value: Swift.String) -> Swift.String
  public static func trim(_ value: Swift.String) -> Swift.String
  public static func trimLeft(_ value: Swift.String) -> Swift.String
  public static func trimRight(_ value: Swift.String) -> Swift.String
  public static func upperFirst(_ value: Swift.String) -> Swift.String
  public static func withPrefix(_ value: Swift.String, prefix: Swift.String) -> Swift.String
  public static func withSuffix(_ value: Swift.String, suffix: Swift.String) -> Swift.String
  public static func xmlEscape(_ value: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringOperator {
  public static func compare(_ left: Swift.String, _ right: Swift.String) -> Swift.Int
  public static func compareIgnoreCase(_ left: Swift.String, _ right: Swift.String) -> Swift.Int
  public static func equal(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func equalIgnoreCase(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func greaterThan(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func lessEqual(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func lessThan(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func notEqual(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class ThreadLocal : SAPOData.ObjectBase {
  override public init()
  open func get() -> Swift.AnyObject?
  open func set(_ value: Swift.AnyObject?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ThreadSleep {
  public static func forMicroseconds(time: Swift.Int64)
  public static func forMilliseconds(time: Swift.Int64)
  public static func forNanoseconds(time: Swift.Int64)
  public static func forSeconds(time: Swift.Int64)
  public static func forever()
  @objc deinit
}
@_inheritsConvenienceInitializers open class ThreadStart : SAPOData.ObjectBase {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class UndefinedException : SAPOData.PanicError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.UndefinedException
  @objc deinit
}
final public class UntypedList : SAPOData.ObjectBase {
  @objc deinit
  public static let empty: SAPOData.UntypedList
  public init(capacity: Swift.Int, repeatValue: Swift.AnyObject? = nil, repeatCount: Swift.Int = (0 as Int))
  final public func append(_ item: Swift.AnyObject?)
  final public func append(contentsOf list: SAPOData.UntypedList)
  final public func append(contentsOf list: SAPOData.UntypedList, start: Swift.Int, end: Swift.Int)
  final public func endRange(end: Swift.Int) -> Swift.Int
  final public func first() -> Swift.AnyObject?
  final public func indexOf(item: Swift.AnyObject?, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: Swift.AnyObject?)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.UntypedList)
  @inline(__always) final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) final public var isNotEmpty: Swift.Bool {
    get
  }
  final public func item(at index: Swift.Int) -> Swift.AnyObject?
  final public func last() -> Swift.AnyObject?
  final public func lastIndexOf(item: Swift.AnyObject?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  @inline(__always) final public var length: Swift.Int {
    get
  }
  final public func makeImmutable()
  final public func pop() -> Swift.AnyObject?
  final public func push(_ item: Swift.AnyObject?) -> Swift.Int
  final public func remove(at index: Swift.Int)
  final public func removeAll()
  final public func removeFirst()
  final public func removeLast()
  final public func removeRange(start: Swift.Int, end: Swift.Int)
  final public func reserve(capacity: Swift.Int)
  final public func reverse()
  final public func shift() -> Swift.AnyObject?
  final public func single() -> Swift.AnyObject?
  final public func slice(start: Swift.Int, end: Swift.Int) -> SAPOData.UntypedList
  final public func sort()
  final public func sortWith(comparer: SAPOData.Comparer)
  final public func startRange(start: Swift.Int) -> Swift.Int
  override final public func toString() -> Swift.String
  final public func update(at index: Swift.Int, item: Swift.AnyObject?)
  final public func updateWithFill(at index: Swift.Int, item: Swift.AnyObject?, fill: Swift.AnyObject?)
  final public func use(comparer: SAPOData.Comparer, equality: SAPOData.Equality)
}
@_inheritsConvenienceInitializers open class UntypedMap : SAPOData.ObjectBase {
  override public init()
  open func containsValue(forKey key: Swift.AnyObject) -> Swift.Bool
  open func copyKeysTo(list: SAPOData.UntypedList)
  open func copyValuesTo(list: SAPOData.UntypedList)
  @inline(__always) open var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) open var isMutable: Swift.Bool {
    get
  }
  @inline(__always) open var isNotEmpty: Swift.Bool {
    get
  }
  final public func keys() -> SAPOData.UntypedList
  open func makeImmutable()
  open func removeAll()
  open func removeValue(forKey key: Swift.AnyObject) -> Swift.Bool
  open func requiredValue(forKey key: Swift.AnyObject) -> Swift.AnyObject
  @inline(__always) open var size: Swift.Int {
    get
  }
  open func update(key: Swift.AnyObject, value: Swift.AnyObject?)
  open func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.AnyObject)
  open func value(forKey key: Swift.AnyObject) -> Swift.AnyObject?
  final public func values() -> SAPOData.UntypedList
  @objc deinit
}
final public class UntypedMapFromObject : SAPOData.UntypedMap {
  public static let empty: SAPOData.UntypedMapFromObject
  public init(capacity: Swift.Int)
  @inline(__always) override final public func containsValue(forKey key: Swift.AnyObject) -> Swift.Bool
  override final public func copyKeysTo(list: SAPOData.UntypedList)
  override final public func copyValuesTo(list: SAPOData.UntypedList)
  @inline(__always) override final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) override final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) override final public var isNotEmpty: Swift.Bool {
    get
  }
  final public func iteratorFromObject() -> SAPOData.MapIteratorFromObject
  override final public func makeImmutable()
  override final public func removeAll()
  @inline(__always) override final public func removeValue(forKey key: Swift.AnyObject) -> Swift.Bool
  override final public func requiredValue(forKey key: Swift.AnyObject) -> Swift.AnyObject
  @inline(__always) override final public var size: Swift.Int {
    get
  }
  override final public func toString() -> Swift.String
  @inline(__always) override final public func update(key: Swift.AnyObject, value: Swift.AnyObject?)
  override final public func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.AnyObject)
  @inline(__always) override final public func value(forKey key: Swift.AnyObject) -> Swift.AnyObject?
  @objc deinit
}
final public class UntypedMapFromString : SAPOData.UntypedMap {
  public static let empty: SAPOData.UntypedMapFromString
  public init(capacity: Swift.Int)
  override final public func containsValue(forKey key: Swift.AnyObject) -> Swift.Bool
  @inline(__always) final public func containsValue(forKey key: Swift.String) -> Swift.Bool
  override final public func copyKeysTo(list: SAPOData.UntypedList)
  override final public func copyValuesTo(list: SAPOData.UntypedList)
  @inline(__always) override final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) override final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) override final public var isNotEmpty: Swift.Bool {
    get
  }
  final public func iteratorFromString() -> SAPOData.MapIteratorFromString
  override final public func makeImmutable()
  override final public func removeAll()
  override final public func removeValue(forKey key: Swift.AnyObject) -> Swift.Bool
  @inline(__always) final public func removeValue(forKey key: Swift.String) -> Swift.Bool
  override final public func requiredValue(forKey key: Swift.AnyObject) -> Swift.AnyObject
  final public func requiredValue(forKey key: Swift.String) -> Swift.AnyObject
  @inline(__always) override final public var size: Swift.Int {
    get
  }
  override final public func toString() -> Swift.String
  override final public func update(key: Swift.AnyObject, value: Swift.AnyObject?)
  @inline(__always) final public func update(key: Swift.String, value: Swift.AnyObject?)
  override final public func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.AnyObject)
  final public func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.String)
  override final public func value(forKey key: Swift.AnyObject) -> Swift.AnyObject?
  @inline(__always) final public func value(forKey key: Swift.String) -> Swift.AnyObject?
  @objc deinit
}
final public class UntypedSet : SAPOData.ObjectBase {
  public static let empty: SAPOData.UntypedSet
  public init(capacity: Swift.Int)
  final public func contains(_ value: Swift.AnyObject?) -> Swift.Bool
  final public func copyValuesTo(list: SAPOData.UntypedList)
  final public func insert(_ value: Swift.AnyObject?)
  @inline(__always) final public var isEmpty: Swift.Bool {
    get
  }
  @inline(__always) final public var isMutable: Swift.Bool {
    get
  }
  @inline(__always) final public var isNotEmpty: Swift.Bool {
    get
  }
  final public func makeImmutable()
  final public func remove(_ value: Swift.AnyObject?) -> Swift.Bool
  final public func removeAll()
  @inline(__always) final public var size: Swift.Int {
    get
  }
  override final public func toString() -> Swift.String
  final public func values() -> SAPOData.UntypedList
  @objc deinit
}
public struct XSUTF16V {
  public var utf16View: Swift.String.UTF16View
  public init(_ string: Swift.String)
  public mutating func length() -> Swift.Int
  public mutating func charAt(_ index: Swift.Int) -> Foundation.unichar
}
@_inheritsConvenienceInitializers open class XmlAttribute : SAPOData.ObjectBase {
  final public var name: Swift.String
  final public var prefix: Swift.String?
  final public var localName: Swift.String
  final public var namespaceURI: Swift.String?
  final public var value: Swift.String
  override public init()
  open func andValue(_ value: Swift.String) -> SAPOData.XmlAttribute
  open var hasPrefix: Swift.Bool {
    get
  }
  override open func toString() -> Swift.String
  open class func withName(_ name: Swift.String) -> SAPOData.XmlAttribute
  open class func withQName(_ name: SAPOData.XmlName) -> SAPOData.XmlAttribute
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlAttributeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlAttribute {
    get
    set
  }
  public static let empty: SAPOData.XmlAttributeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.XmlAttribute)
  final public func append(contentsOf list: SAPOData.XmlAttributeList)
  final public func appendThis(_ item: SAPOData.XmlAttribute) -> SAPOData.XmlAttributeList
  final public func copy() -> SAPOData.XmlAttributeList
  final public func filter(_ predicate: @escaping (SAPOData.XmlAttribute) -> Swift.Bool) -> SAPOData.XmlAttributeList
  final public func first() -> SAPOData.XmlAttribute
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlAttribute>) -> SAPOData.XmlAttributeList
  final public func includes(item: SAPOData.XmlAttribute) -> Swift.Bool
  final public func indexOf(item: SAPOData.XmlAttribute, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.XmlAttribute)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlAttributeList)
  final public func item(at index: Swift.Int) -> SAPOData.XmlAttribute
  final public func last() -> SAPOData.XmlAttribute
  final public func lastIndexOf(item: SAPOData.XmlAttribute, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlAttribute>>
  open class func of(_ items: SAPOData.XmlAttribute...) -> SAPOData.XmlAttributeList
  open func reversed() -> SAPOData.XmlAttributeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlAttributeList
  final public func single() -> SAPOData.XmlAttribute
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlAttributeList
  final public func sort(by increasing: @escaping (SAPOData.XmlAttribute, SAPOData.XmlAttribute) -> Swift.Bool)
  final public func sorted() -> SAPOData.XmlAttributeList
  final public func sorted(by increasing: @escaping (SAPOData.XmlAttribute, SAPOData.XmlAttribute) -> Swift.Bool) -> SAPOData.XmlAttributeList
  open func toArray() -> Swift.Array<SAPOData.XmlAttribute>
  final public func update(at index: Swift.Int, item: SAPOData.XmlAttribute)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlAttribute>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlAttribute>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlComment : SAPOData.XmlNode {
  final public var text: Swift.String
  override public init()
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open class func withText(_ text: Swift.String) -> SAPOData.XmlComment
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlCommentList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlComment {
    get
    set
  }
  public static let empty: SAPOData.XmlCommentList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.XmlComment)
  final public func append(contentsOf list: SAPOData.XmlCommentList)
  final public func appendThis(_ item: SAPOData.XmlComment) -> SAPOData.XmlCommentList
  final public func copy() -> SAPOData.XmlCommentList
  final public func filter(_ predicate: @escaping (SAPOData.XmlComment) -> Swift.Bool) -> SAPOData.XmlCommentList
  final public func first() -> SAPOData.XmlComment
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlComment>) -> SAPOData.XmlCommentList
  final public func includes(item: SAPOData.XmlComment) -> Swift.Bool
  final public func indexOf(item: SAPOData.XmlComment, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.XmlComment)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlCommentList)
  final public func item(at index: Swift.Int) -> SAPOData.XmlComment
  final public func last() -> SAPOData.XmlComment
  final public func lastIndexOf(item: SAPOData.XmlComment, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlComment>>
  open class func of(_ items: SAPOData.XmlComment...) -> SAPOData.XmlCommentList
  open func reversed() -> SAPOData.XmlCommentList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlCommentList
  final public func single() -> SAPOData.XmlComment
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlCommentList
  final public func sort(by increasing: @escaping (SAPOData.XmlComment, SAPOData.XmlComment) -> Swift.Bool)
  final public func sorted() -> SAPOData.XmlCommentList
  final public func sorted(by increasing: @escaping (SAPOData.XmlComment, SAPOData.XmlComment) -> Swift.Bool) -> SAPOData.XmlCommentList
  open func toArray() -> Swift.Array<SAPOData.XmlComment>
  final public func update(at index: Swift.Int, item: SAPOData.XmlComment)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlComment>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlComment>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlCompression : SAPOData.ObjectBase {
  override public init()
  open class func compress(document: SAPOData.XmlDocument, options: SAPOData.XmlCompression.Options = XmlCompression.Options()) throws
  @_inheritsConvenienceInitializers open class Options : SAPOData.ObjectBase {
    final public var dropComments: Swift.Bool
    final public var dropMixed: Swift.Bool
    override public init()
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlDocument : SAPOData.ObjectBase {
  final public var declaration: Swift.String?
  final public var wasDecompressed: Swift.Bool
  final public var processingInstructions: SAPOData.XmlProcessingInstructionList
  override public init()
  open func appendTo(buffer: SAPOData.CharBuffer, indent: Swift.Int = (-1 as Int))
  open class func parse(xml: Swift.String) throws -> SAPOData.XmlDocument
  open class func parseMixed(xml: Swift.String, mixed: Swift.Bool) throws -> SAPOData.XmlDocument
  open func resolveNamespaces() throws
  final public var rootElement: SAPOData.XmlElement {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlDuration : SAPOData.ObjectBase {
  override public init()
  open var dayTime: SAPOData.DayTimeDuration {
    get
  }
  open var days: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.XmlDuration?, _ right: SAPOData.XmlDuration?) -> Swift.Bool
  open var hours: Swift.Int {
    get
  }
  open var minutes: Swift.Int {
    get
  }
  open var months: Swift.Int {
    get
  }
  open var nanos: Swift.Int {
    get
  }
  open class func notEqual(_ left: SAPOData.XmlDuration?, _ right: SAPOData.XmlDuration?) -> Swift.Bool
  open class func of(sign: Swift.Int, years: Swift.Int, months: Swift.Int, days: Swift.Int, hours: Swift.Int, minutes: Swift.Int, seconds: Swift.Int, nanos: Swift.Int) -> SAPOData.XmlDuration
  open class func parse(_ text: Swift.String) -> SAPOData.XmlDuration?
  open var seconds: Swift.Int {
    get
  }
  open var sign: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open func toTime() -> SAPOData.LocalTime?
  open var yearMonth: SAPOData.YearMonthDuration {
    get
  }
  open var years: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlElement : SAPOData.XmlNode {
  final public var name: Swift.String
  final public var prefix: Swift.String?
  final public var localName: Swift.String
  final public var namespaceURI: Swift.String?
  final public var sourceFile: Swift.String?
  final public var lineNumber: (Swift.Int)
  override public init()
  open func addAttribute(name: Swift.String, value: Swift.String) -> SAPOData.XmlElement
  open func addAttributeWithQName(_ name: SAPOData.XmlName, value: Swift.String) -> SAPOData.XmlElement
  open func addChild(_ child: SAPOData.XmlNode) -> SAPOData.XmlElement
  open func addComment(text: Swift.String) -> SAPOData.XmlElement
  open func addElement(child: SAPOData.XmlElement) -> SAPOData.XmlElement
  open func addElements(_ elements: SAPOData.XmlElementList) -> SAPOData.XmlElement
  open func addText(_ text: Swift.String) -> SAPOData.XmlElement
  open func appendTo(buffer: SAPOData.CharBuffer, indent: Swift.Int = (-1 as Int))
  open func attribute(name: Swift.String) -> Swift.String?
  open var attributes: SAPOData.XmlAttributeList {
    get
    set(value)
  }
  open var childNodes: SAPOData.XmlNodeList {
    get
    set(value)
  }
  open var comments: SAPOData.XmlCommentList {
    get
  }
  open func dropComments() -> SAPOData.XmlElement
  open func element(name: Swift.String) -> SAPOData.XmlElement?
  open var elements: SAPOData.XmlElementList {
    get
  }
  open func elementsNamed(name: Swift.String) -> SAPOData.XmlElementList
  open func hasAttribute(name: Swift.String, value: Swift.String? = nil) -> Swift.Bool
  open var hasPrefix: Swift.Bool {
    get
  }
  open class func parse(xml: Swift.String) throws -> SAPOData.XmlElement
  open class func parseMixed(xml: Swift.String, mixed: Swift.Bool = true) throws -> SAPOData.XmlElement
  open func removeAttribute(name: Swift.String)
  open func requiredAttribute(name: Swift.String) throws -> Swift.String
  open func requiredElement(name: Swift.String) throws -> SAPOData.XmlElement
  open func resolveNamespaces() throws
  open func setAttribute(name: Swift.String, value: Swift.String) -> SAPOData.XmlElement
  open func setAttributeWithQName(_ name: SAPOData.XmlName, value: Swift.String) -> SAPOData.XmlElement
  open var text: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open class func withName(_ name: Swift.String) -> SAPOData.XmlElement
  open class func withQName(_ name: SAPOData.XmlName) -> SAPOData.XmlElement
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlElementList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlElement {
    get
    set
  }
  public static let empty: SAPOData.XmlElementList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.XmlElement)
  final public func append(contentsOf list: SAPOData.XmlElementList)
  final public func appendThis(_ item: SAPOData.XmlElement) -> SAPOData.XmlElementList
  final public func copy() -> SAPOData.XmlElementList
  final public func filter(_ predicate: @escaping (SAPOData.XmlElement) -> Swift.Bool) -> SAPOData.XmlElementList
  final public func first() -> SAPOData.XmlElement
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlElement>) -> SAPOData.XmlElementList
  final public func includes(item: SAPOData.XmlElement) -> Swift.Bool
  final public func indexOf(item: SAPOData.XmlElement, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.XmlElement)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlElementList)
  final public func item(at index: Swift.Int) -> SAPOData.XmlElement
  final public func last() -> SAPOData.XmlElement
  final public func lastIndexOf(item: SAPOData.XmlElement, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlElement>>
  open class func of(_ items: SAPOData.XmlElement...) -> SAPOData.XmlElementList
  open func reversed() -> SAPOData.XmlElementList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlElementList
  final public func single() -> SAPOData.XmlElement
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlElementList
  final public func sort(by increasing: @escaping (SAPOData.XmlElement, SAPOData.XmlElement) -> Swift.Bool)
  final public func sorted() -> SAPOData.XmlElementList
  final public func sorted(by increasing: @escaping (SAPOData.XmlElement, SAPOData.XmlElement) -> Swift.Bool) -> SAPOData.XmlElementList
  open func toArray() -> Swift.Array<SAPOData.XmlElement>
  final public func update(at index: Swift.Int, item: SAPOData.XmlElement)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElement>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElement>>
  @objc deinit
}
open class XmlElementMap : SAPOData.MapBase {
  public static let empty: SAPOData.XmlElementMap
  public init(capacity: Swift.Int = (16 as Int))
  open class func concurrent() -> SAPOData.XmlElementMap
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func copy() -> SAPOData.XmlElementMap
  open func entries() -> SAPOData.XmlElementMap.EntryList
  open func keys() -> SAPOData.StringList
  open func merge(contentsOf from: SAPOData.XmlElementMap)
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.XmlElement
  open func sortedEntries() throws -> SAPOData.XmlElementMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.XmlElementList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.XmlElement)
  open func updateThis(key: Swift.String, value: SAPOData.XmlElement) -> SAPOData.XmlElementMap
  open func updateValue(_ value: SAPOData.XmlElement, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.XmlElement?
  open func values() -> SAPOData.XmlElementList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    @inline(__always) final public var key: Swift.String {
      get
      set(value)
    }
    final public var value: SAPOData.XmlElement {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.XmlElementMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.XmlElementMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    final public func append(_ item: SAPOData.XmlElementMap.Entry)
    final public func append(contentsOf list: SAPOData.XmlElementMap.EntryList)
    final public func appendThis(_ item: SAPOData.XmlElementMap.Entry) -> SAPOData.XmlElementMap.EntryList
    final public func copy() -> SAPOData.XmlElementMap.EntryList
    final public func filter(_ predicate: @escaping (SAPOData.XmlElementMap.Entry) -> Swift.Bool) -> SAPOData.XmlElementMap.EntryList
    final public func first() -> SAPOData.XmlElementMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.XmlElementMap.Entry>) -> SAPOData.XmlElementMap.EntryList
    final public func includes(item: SAPOData.XmlElementMap.Entry) -> Swift.Bool
    final public func indexOf(item: SAPOData.XmlElementMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    final public func insert(at index: Swift.Int, item: SAPOData.XmlElementMap.Entry)
    final public func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlElementMap.EntryList)
    final public func item(at index: Swift.Int) -> SAPOData.XmlElementMap.Entry
    final public func last() -> SAPOData.XmlElementMap.Entry
    final public func lastIndexOf(item: SAPOData.XmlElementMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlElementMap.Entry>>
    open class func of(_ items: SAPOData.XmlElementMap.Entry...) -> SAPOData.XmlElementMap.EntryList
    open func reversed() -> SAPOData.XmlElementMap.EntryList
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlElementMap.EntryList
    final public func single() -> SAPOData.XmlElementMap.Entry
    final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlElementMap.EntryList
    final public func sort(by increasing: @escaping (SAPOData.XmlElementMap.Entry, SAPOData.XmlElementMap.Entry) -> Swift.Bool)
    final public func sorted() -> SAPOData.XmlElementMap.EntryList
    final public func sorted(by increasing: @escaping (SAPOData.XmlElementMap.Entry, SAPOData.XmlElementMap.Entry) -> Swift.Bool) -> SAPOData.XmlElementMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.XmlElementMap.Entry>
    final public func update(at index: Swift.Int, item: SAPOData.XmlElementMap.Entry)
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElementMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElementMap.Entry>>
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlError : SAPOData.DataFormatError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.XmlError
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlName : SAPOData.ObjectBase {
  override public init()
  open var fullName: Swift.String {
    get
    set(value)
  }
  open var localName: Swift.String {
    get
    set(value)
  }
  open class func parse(name: Swift.String) throws -> SAPOData.XmlName
  open var prefix: Swift.String? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlNameList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlName {
    get
    set
  }
  public static let empty: SAPOData.XmlNameList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.XmlName)
  final public func append(contentsOf list: SAPOData.XmlNameList)
  final public func appendThis(_ item: SAPOData.XmlName) -> SAPOData.XmlNameList
  final public func copy() -> SAPOData.XmlNameList
  final public func filter(_ predicate: @escaping (SAPOData.XmlName) -> Swift.Bool) -> SAPOData.XmlNameList
  final public func first() -> SAPOData.XmlName
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlName>) -> SAPOData.XmlNameList
  final public func includes(item: SAPOData.XmlName) -> Swift.Bool
  final public func indexOf(item: SAPOData.XmlName, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.XmlName)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlNameList)
  final public func item(at index: Swift.Int) -> SAPOData.XmlName
  final public func last() -> SAPOData.XmlName
  final public func lastIndexOf(item: SAPOData.XmlName, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlName>>
  open class func of(_ items: SAPOData.XmlName...) -> SAPOData.XmlNameList
  open func reversed() -> SAPOData.XmlNameList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlNameList
  final public func single() -> SAPOData.XmlName
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlNameList
  final public func sort(by increasing: @escaping (SAPOData.XmlName, SAPOData.XmlName) -> Swift.Bool)
  final public func sorted() -> SAPOData.XmlNameList
  final public func sorted(by increasing: @escaping (SAPOData.XmlName, SAPOData.XmlName) -> Swift.Bool) -> SAPOData.XmlNameList
  open func toArray() -> Swift.Array<SAPOData.XmlName>
  final public func update(at index: Swift.Int, item: SAPOData.XmlName)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlName>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlName>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlNode : SAPOData.ObjectBase {
  public static let typeComment: (Swift.Int)
  public static let typeElement: (Swift.Int)
  public static let typeText: (Swift.Int)
  public static let typeProcessingInstruction: (Swift.Int)
  override public init()
  @inline(__always) open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlNodeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlNode {
    get
    set
  }
  public static let empty: SAPOData.XmlNodeList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.XmlNode)
  final public func append(contentsOf list: SAPOData.XmlNodeList)
  final public func appendThis(_ item: SAPOData.XmlNode) -> SAPOData.XmlNodeList
  final public func copy() -> SAPOData.XmlNodeList
  final public func filter(_ predicate: @escaping (SAPOData.XmlNode) -> Swift.Bool) -> SAPOData.XmlNodeList
  final public func first() -> SAPOData.XmlNode
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlNode>) -> SAPOData.XmlNodeList
  final public func includes(item: SAPOData.XmlNode) -> Swift.Bool
  final public func indexOf(item: SAPOData.XmlNode, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.XmlNode)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlNodeList)
  final public func item(at index: Swift.Int) -> SAPOData.XmlNode
  final public func last() -> SAPOData.XmlNode
  final public func lastIndexOf(item: SAPOData.XmlNode, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlNode>>
  open class func of(_ items: SAPOData.XmlNode...) -> SAPOData.XmlNodeList
  open func reversed() -> SAPOData.XmlNodeList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlNodeList
  final public func single() -> SAPOData.XmlNode
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlNodeList
  final public func sort(by increasing: @escaping (SAPOData.XmlNode, SAPOData.XmlNode) -> Swift.Bool)
  final public func sorted() -> SAPOData.XmlNodeList
  final public func sorted(by increasing: @escaping (SAPOData.XmlNode, SAPOData.XmlNode) -> Swift.Bool) -> SAPOData.XmlNodeList
  open func toArray() -> Swift.Array<SAPOData.XmlNode>
  final public func update(at index: Swift.Int, item: SAPOData.XmlNode)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlNode>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlNode>>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class XmlParser : SAPOData.ObjectBase {
  final public var declaration: Swift.String?
  open func nextChild(element: SAPOData.XmlElement, parseNested: Swift.Bool) throws -> SAPOData.XmlNode?
  open func nextChildElement(_ element: SAPOData.XmlElement, parseNested: Swift.Bool) throws -> SAPOData.XmlElement?
  open func nextElement() throws -> SAPOData.XmlElement
  open class func parseDocument(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlDocument
  open class func parseElement(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlElement
  open func parseElement() throws -> SAPOData.XmlElement
  open func readChildren(element: SAPOData.XmlElement) throws
  final public var rootElement: SAPOData.XmlElement {
    get
    set(value)
  }
  open class func startDocument(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlParser
  open class func startElement(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlParser
  @_inheritsConvenienceInitializers open class Options : SAPOData.ObjectBase {
    final public var decompress: Swift.Bool
    final public var noDuplicateCheck: Swift.Bool
    final public var noNameValidation: Swift.Bool
    override public init()
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class XmlPretty {
  public static func printDocument(_ document: SAPOData.XmlDocument, indent: Swift.Int = (0 as Int)) -> Swift.String
  public static func printElement(_ element: SAPOData.XmlElement, indent: Swift.Int = (0 as Int)) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlPrettyText : SAPOData.XmlText {
  override public init()
  override open var isPretty: Swift.Bool {
    get
  }
  open class func shiftLeft(text: Swift.String) -> Swift.String
  open class func shiftRight(text: Swift.String, indent: Swift.Int) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlProcessingInstruction : SAPOData.XmlNode {
  final public var target: Swift.String
  final public var content: Swift.String
  override public init()
  open func appendTo(buffer: SAPOData.CharBuffer, indent: Swift.Int = (-1 as Int))
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlProcessingInstructionList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlProcessingInstruction {
    get
    set
  }
  public static let empty: SAPOData.XmlProcessingInstructionList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.XmlProcessingInstruction)
  final public func append(contentsOf list: SAPOData.XmlProcessingInstructionList)
  final public func appendThis(_ item: SAPOData.XmlProcessingInstruction) -> SAPOData.XmlProcessingInstructionList
  final public func copy() -> SAPOData.XmlProcessingInstructionList
  final public func filter(_ predicate: @escaping (SAPOData.XmlProcessingInstruction) -> Swift.Bool) -> SAPOData.XmlProcessingInstructionList
  final public func first() -> SAPOData.XmlProcessingInstruction
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlProcessingInstruction>) -> SAPOData.XmlProcessingInstructionList
  final public func includes(item: SAPOData.XmlProcessingInstruction) -> Swift.Bool
  final public func indexOf(item: SAPOData.XmlProcessingInstruction, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.XmlProcessingInstruction)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlProcessingInstructionList)
  final public func item(at index: Swift.Int) -> SAPOData.XmlProcessingInstruction
  final public func last() -> SAPOData.XmlProcessingInstruction
  final public func lastIndexOf(item: SAPOData.XmlProcessingInstruction, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlProcessingInstruction>>
  open class func of(_ items: SAPOData.XmlProcessingInstruction...) -> SAPOData.XmlProcessingInstructionList
  open func reversed() -> SAPOData.XmlProcessingInstructionList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlProcessingInstructionList
  final public func single() -> SAPOData.XmlProcessingInstruction
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlProcessingInstructionList
  final public func sort(by increasing: @escaping (SAPOData.XmlProcessingInstruction, SAPOData.XmlProcessingInstruction) -> Swift.Bool)
  final public func sorted() -> SAPOData.XmlProcessingInstructionList
  final public func sorted(by increasing: @escaping (SAPOData.XmlProcessingInstruction, SAPOData.XmlProcessingInstruction) -> Swift.Bool) -> SAPOData.XmlProcessingInstructionList
  open func toArray() -> Swift.Array<SAPOData.XmlProcessingInstruction>
  final public func update(at index: Swift.Int, item: SAPOData.XmlProcessingInstruction)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlProcessingInstruction>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlProcessingInstruction>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlText : SAPOData.XmlNode {
  final public var text: Swift.String
  override public init()
  open var isPretty: Swift.Bool {
    get
  }
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open class func withText(_ text: Swift.String) -> SAPOData.XmlText
  @objc deinit
}
@available(*, deprecated, renamed: "LegacyAnyDataService")
public typealias AnyDataService = SAPOData.LegacyAnyDataService
public typealias BaseDataService = SAPOData.DataService
@_inheritsConvenienceInitializers open class ChangeSet : SAPOData.ObjectBase {
  override public init()
  open func action(at index: Swift.Int) -> SAPOData.DataQuery
  open func actionResult(for call: SAPOData.DataQuery, at index: Swift.Int = Int(Int32.min)) -> SAPOData.QueryResult
  open func addAction(_ action: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func addActionResult(call: SAPOData.DataQuery, result: SAPOData.QueryResult, index: Swift.Int = Int(Int32.min))
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func entity(at index: Swift.Int) -> SAPOData.EntityValue
  @inline(__always) final public var error: SAPOData.DataServiceError? {
    get
    set(value)
  }
  open func headers(at index: Swift.Int) -> SAPOData.HTTPHeaders
  open func invokeAction(method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) -> SAPOData.DataQuery
  open func isAction(at index: Swift.Int) -> Swift.Bool
  open func isEntity(at index: Swift.Int) -> Swift.Bool
  open func isLink(at index: Swift.Int) -> Swift.Bool
  open func link(at index: Swift.Int) -> SAPOData.ChangedLink
  open func options(at index: Swift.Int) -> SAPOData.RequestOptions
  open func replaceHeaders(at index: Swift.Int, headers: SAPOData.HTTPHeaders)
  open func replaceOptions(at index: Swift.Int, options: SAPOData.RequestOptions)
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open var size: Swift.Int {
    get
  }
  @inline(__always) final public var status: Swift.Int {
    get
    set(value)
  }
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  @objc deinit
}
public protocol ClientRegistrationProvider : AnyObject {
  func isClientRegistered() throws -> Swift.Bool
  func registerClient(_ client: SAPOData.EntityValue?) throws
  func unregisterClient(deleteFromServer: Swift.Bool) throws
}
open class CloudSyncProvider : SAPOData.ObjectBase, SAPOData.DataSyncProvider, SAPOData.ClientRegistrationProvider {
  final public var onlineSetup: Swift.Bool
  public init(onlineProvider: SAPOData.OnlineODataProvider, offlineStore: SAPOData.SQLDatabaseProvider? = nil)
  @inline(__always) final public var autoInitialDownload: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var autoRefreshEntities: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var autoRefreshInterval: SAPOData.DayTimeDuration {
    get
    set(value)
  }
  @inline(__always) final public var autoRefreshMetadata: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var autoRegisterClient: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var autoSaveEstimates: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var backgroundWaitSeconds: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var batchEntityDownloads: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var batchEntityUploads: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var batchStreamDownloads: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var batchStreamUploads: Swift.Bool {
    get
    set(value)
  }
  open func cancelDownload() throws
  open func cancelPendingRequests(_ requests: SAPOData.PendingRequestList?) throws
  open func cancelUpload() throws
  open func changedEntitySets() throws -> SAPOData.EntitySetList
  open func clear() throws
  @inline(__always) final public var clientMetadataFile: Swift.String? {
    get
    set(value)
  }
  open func close() throws
  @inline(__always) final public var combineLocalDeletes: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var combineLocalUpdates: Swift.Bool {
    get
    set(value)
  }
  open func createDownloadQuery(name: Swift.String, query: SAPOData.DataQuery, streams: Swift.Bool) throws
  open func createDynamicIndex(_ entitySet: Swift.String, _ item: Swift.String, _ items: Swift.String...)
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createIndex(_ entitySet: SAPOData.EntitySet, _ item: SAPOData.PropertyPath, _ items: SAPOData.PropertyPath...)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @inline(__always) final public var currentUser: Swift.String? {
    get
    set(value)
  }
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteDownloadQuery(name: Swift.String) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func download(groups: SAPOData.StringList, options: SAPOData.SyncOptions) throws
  open func downloadGroup(_ group: Swift.String) -> SAPOData.DownloadGroup
  @inline(__always) final public var downloadInBackground: Swift.Bool {
    get
    set(value)
  }
  open func downloadInGroup(_ group: Swift.String, _ entitySets: SAPOData.EntitySet...)
  open func downloadInPhase(_ phase: Swift.Int, _ entitySets: SAPOData.EntitySet...)
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadPhase(_ phase: Swift.Int) -> SAPOData.DownloadPhase
  open func downloadQueries(from: SAPOData.EntitySet? = nil) throws -> SAPOData.DownloadQueryList
  open func downloadQueriesCanOverlap(_ entitySets: SAPOData.EntitySet...)
  open func downloadQuery(name: Swift.String) throws -> SAPOData.DownloadQuery?
  @inline(__always) final public var downloadQueueCapacity: Swift.Int {
    get
    set(value)
  }
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadWithoutDeltaLinks(_ entitySets: SAPOData.EntitySet...)
  @inline(__always) final public var emulateBindOperations: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var emulateLinkOperations: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var enableStatementBatching: Swift.Bool {
    get
    set(value)
  }
  open var encryptionKey: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var entityDownloadThreads: Swift.Int {
    get
    set(value)
  }
  open func eventHistory(matching query: SAPOData.DataQuery?) throws -> SAPOData.SyncEventList
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  open func failedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> SAPOData.PendingRequestList
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  @inline(__always) final public var forceDownloadOnUserSwitch: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var forceUploadOnUserSwitch: Swift.Bool {
    get
    set(value)
  }
  open func hasFailedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> Swift.Bool
  open func hasInitialData() throws -> Swift.Bool
  open var hasMetadata: Swift.Bool {
    get
  }
  open func hasMetadataChanges() throws -> Swift.Bool
  open func hasPendingDownload() throws -> Swift.Bool
  open func hasPendingUpload() throws -> Swift.Bool
  open func hasQueuedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> Swift.Bool
  open func isClientRegistered() throws -> Swift.Bool
  open func lastDownloadTime() throws -> SAPOData.GlobalDateTime?
  open func lastUploadTime() throws -> SAPOData.GlobalDateTime?
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func loadTimeEstimates(file: Swift.String, mustExist: Swift.Bool = false) throws
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  @inline(__always) final public var metadataListener: (any SAPOData.MetadataListener)? {
    get
    set(value)
  }
  open func noDefaultEntityDownload(_ entitySets: SAPOData.EntitySet...)
  open func noDefaultStreamDownload(_ entitySets: SAPOData.EntitySet...)
  open var offlineStore: SAPOData.SQLDatabaseProvider {
    get
  }
  open var onlineProvider: SAPOData.OnlineODataProvider {
    get
  }
  open func open() throws
  @inline(__always) final public var persistDownloadedEntities: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var persistDownloadedStreams: Swift.Bool {
    get
    set(value)
  }
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @inline(__always) final public var preferCompactResponses: Swift.Bool {
    get
    set(value)
  }
  open var prettyTracing: Swift.Bool {
    get
    set(value)
  }
  open func previousUser() throws -> Swift.String?
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @inline(__always) final public var progressListener: (any SAPOData.ProgressListener)? {
    get
    set(value)
  }
  open func queuedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> SAPOData.PendingRequestList
  open func registerClient(_ client: SAPOData.EntityValue?) throws
  open func saveTimeEstimates(file: Swift.String) throws
  @inline(__always) final public var sendRepeatableRequests: Swift.Bool {
    get
    set(value)
  }
  open var serviceName: Swift.String {
    get
  }
  open func setDownloadMode(phase: Swift.Int, mode: SAPOData.DownloadMode)
  @inline(__always) final public var streamDownloadThreads: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var throwUploadFailures: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var timeEstimatesFile: Swift.String? {
    get
    set(value)
  }
  open var traceRequests: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var traceUploadFailures: Swift.Bool {
    get
    set(value)
  }
  open var traceWithData: Swift.Bool {
    get
    set(value)
  }
  open func undoPendingChanges(for entities: SAPOData.EntityValueList) throws
  open func unloadMetadata() throws
  open func unregisterClient(deleteFromServer: Swift.Bool) throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func upload(groups: SAPOData.StringList, options: SAPOData.SyncOptions) throws
  open func uploadDatabaseFile(encryptionKey: Swift.String?, note: Swift.String?, options: SAPOData.SyncOptions) throws
  @inline(__always) final public var uploadInBackground: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var uploadIterationSize: Swift.Int {
    get
    set(value)
  }
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @inline(__always) final public var uploadWorkerThreads: Swift.Int {
    get
    set(value)
  }
  open func waitForCompletion(sessionIdentifier: Swift.String, completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
open class DataService : SAPOData.ObjectBase {
  public var actionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var functionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var completionQueue: Foundation.OperationQueue {
    get
    set
  }
  open func asyncAction(_ task: @escaping () -> Swift.Void)
  open func asyncFunction(_ task: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "actionQueue")
  public var backgroundQueueForAction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "functionQueue")
  public var backgroundQueueForFunction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "asyncAction")
  open func addBackgroundOperationForAction(_ operation: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "asyncFunction")
  open func addBackgroundOperationForFunction(_ operation: @escaping () -> Swift.Void)
  public static let logLevelError: (Swift.Int)
  public static let logLevelWarn: (Swift.Int)
  public static let logLevelInfo: (Swift.Int)
  public static let logLevelDebug: (Swift.Int)
  public static let logLevelTrace: (Swift.Int)
  public init(provider: any SAPOData.DataServiceProvider)
  open func activateDraft(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.EntityValue
  open func activateDraft(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Result<SAPOData.EntityValue, any Swift.Error>) -> Swift.Void)
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func checkIfCancelled(_ token: SAPOData.CancelToken?) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.ByteStream
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.DataValue?
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<SAPOData.DataValue?, any Swift.Error>) -> Swift.Void)
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.QueryResult
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<SAPOData.QueryResult, any Swift.Error>) -> Swift.Void)
  open func fetchMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.CSDLDocument
  open func fetchMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<SAPOData.CSDLDocument, any Swift.Error>) -> Swift.Void)
  open var hasMetadata: Swift.Bool {
    get
  }
  open func isClientRegistered() throws -> Swift.Bool
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func loadMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func loadMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func makeDraftCopy(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.EntityValue
  open func makeDraftCopy(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Result<SAPOData.EntityValue, any Swift.Error>) -> Swift.Void)
  open var metadata: SAPOData.CSDLDocument {
    get
  }
  open var metadataLock: SAPOData.MetadataLock {
    get
  }
  open var name: Swift.String {
    get
  }
  open func pingServer(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func pingServer(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open var provider: any SAPOData.DataServiceProvider {
    get
  }
  open func refreshMetadata() throws
  open func refreshMetadata(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func registerClient(_ client: SAPOData.EntityValue? = nil) throws
  open func registerClient(_ client: SAPOData.EntityValue? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func unloadMetadata() throws
  open func unloadMetadata(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func unregisterClient(deleteFromServer: Swift.Bool = false) throws
  open func unregisterClient(deleteFromServer: Swift.Bool = false, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
@available(swift 5.5)
open class DataServiceAsync : SAPOData.ObjectBase {
  public var actionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var functionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var completionQueue: Foundation.OperationQueue {
    get
    set
  }
  open func asyncAction(_ task: @escaping () -> Swift.Void)
  open func asyncFunction(_ task: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "actionQueue")
  public var backgroundQueueForAction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "functionQueue")
  public var backgroundQueueForFunction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "asyncAction")
  open func addBackgroundOperationForAction(_ operation: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "asyncFunction")
  open func addBackgroundOperationForFunction(_ operation: @escaping () -> Swift.Void)
  public init(provider: any SAPOData.DataServiceProvider)
  #if compiler(>=5.3) && $AsyncAwait
  open func activateDraft(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) async throws -> SAPOData.EntityValue
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  open func checkIfCancelled(_ token: SAPOData.CancelToken?) throws
  #if compiler(>=5.3) && $AsyncAwait
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  #if compiler(>=5.3) && $AsyncAwait
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws -> Foundation.Data
  #endif
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  #if compiler(>=5.3) && $AsyncAwait
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws -> SAPOData.DataValue?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws -> SAPOData.QueryResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func fetchMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws -> SAPOData.CSDLDocument
  #endif
  open var hasMetadata: Swift.Bool {
    get
  }
  open func isClientRegistered() throws -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func loadMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func makeDraftCopy(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) async throws -> SAPOData.EntityValue
  #endif
  open var metadata: SAPOData.CSDLDocument {
    get
  }
  open var metadataLock: SAPOData.MetadataLock {
    get
  }
  open var name: Swift.String {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  open func pingServer(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  open var provider: any SAPOData.DataServiceProvider {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  open func refreshMetadata() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func registerClient(_ client: SAPOData.EntityValue? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func unloadMetadata() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func unregisterClient(deleteFromServer: Swift.Bool = false) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  @objc deinit
}
public protocol DataServiceProvider : AnyObject {
  func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  var hasMetadata: Swift.Bool { get }
  func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  var metadata: SAPOData.CSDLDocument { get set }
  func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  var serviceName: Swift.String { get }
  func unloadMetadata() throws
  func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
}
public protocol DataSyncProvider : SAPOData.DataServiceProvider {
  func cancelDownload() throws
  func cancelPendingRequests(_ requests: SAPOData.PendingRequestList?) throws
  func cancelUpload() throws
  func clear() throws
  func close() throws
  func createDownloadQuery(name: Swift.String, query: SAPOData.DataQuery, streams: Swift.Bool) throws
  func deleteDownloadQuery(name: Swift.String) throws
  func download(groups: SAPOData.StringList, options: SAPOData.SyncOptions) throws
  func downloadGroup(_ group: Swift.String) -> SAPOData.DownloadGroup
  func downloadQueries(from: SAPOData.EntitySet?) throws -> SAPOData.DownloadQueryList
  func downloadQuery(name: Swift.String) throws -> SAPOData.DownloadQuery?
  func eventHistory(matching query: SAPOData.DataQuery?) throws -> SAPOData.SyncEventList
  func failedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> SAPOData.PendingRequestList
  func hasFailedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> Swift.Bool
  func hasInitialData() throws -> Swift.Bool
  func hasPendingDownload() throws -> Swift.Bool
  func hasPendingUpload() throws -> Swift.Bool
  func hasQueuedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> Swift.Bool
  func lastDownloadTime() throws -> SAPOData.GlobalDateTime?
  func lastUploadTime() throws -> SAPOData.GlobalDateTime?
  var onlineProvider: SAPOData.OnlineODataProvider { get }
  var onlineSetup: Swift.Bool { get set }
  func open() throws
  func previousUser() throws -> Swift.String?
  func queuedRequests(matching query: SAPOData.DataQuery?, headers: SAPOData.HTTPHeaders?, options: SAPOData.RequestOptions?) throws -> SAPOData.PendingRequestList
  func undoPendingChanges(for entities: SAPOData.EntityValueList) throws
  func upload(groups: SAPOData.StringList, options: SAPOData.SyncOptions) throws
  func uploadDatabaseFile(encryptionKey: Swift.String?, note: Swift.String?, options: SAPOData.SyncOptions) throws
}
open class DownloadGroup : SAPOData.ObjectBase {
  public init(name: Swift.String)
  open func add(_ entities: SAPOData.EntitySet...) throws
  open func addGroup(name: Swift.String) throws
  open func addGroups(_ groups: Swift.String...) throws
  open func addQueries(_ queries: Swift.String...) throws
  open func addQuery(name: Swift.String) throws
  @inline(__always) final public var entities: SAPOData.StringSet {
    get
  }
  @inline(__always) final public var groups: SAPOData.StringSet {
    get
  }
  open func includes(_ entitySet: SAPOData.EntitySet) throws -> Swift.Bool
  open func includesGroup(name: Swift.String) throws -> Swift.Bool
  open func includesQuery(name: Swift.String) throws -> Swift.Bool
  open var name: Swift.String {
    get
  }
  @inline(__always) final public var queries: SAPOData.StringSet {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
open class DownloadPhase : SAPOData.DownloadGroup {
  final public var mode: SAPOData.DownloadMode
  public init(number: Swift.Int)
  open var number: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DownloadQuery : SAPOData.ObjectBase {
  final public var name: Swift.String
  final public var streams: Swift.Bool
  override public init()
  final public var query: SAPOData.DataQuery {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DownloadQueryList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DownloadQuery {
    get
    set
  }
  public static let empty: SAPOData.DownloadQueryList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.DownloadQuery)
  final public func append(contentsOf list: SAPOData.DownloadQueryList)
  final public func appendThis(_ item: SAPOData.DownloadQuery) -> SAPOData.DownloadQueryList
  final public func copy() -> SAPOData.DownloadQueryList
  final public func filter(_ predicate: @escaping (SAPOData.DownloadQuery) -> Swift.Bool) -> SAPOData.DownloadQueryList
  final public func first() -> SAPOData.DownloadQuery
  open class func fromArray(_ array: Swift.Array<SAPOData.DownloadQuery>) -> SAPOData.DownloadQueryList
  final public func includes(item: SAPOData.DownloadQuery) -> Swift.Bool
  final public func indexOf(item: SAPOData.DownloadQuery, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.DownloadQuery)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.DownloadQueryList)
  final public func item(at index: Swift.Int) -> SAPOData.DownloadQuery
  final public func last() -> SAPOData.DownloadQuery
  final public func lastIndexOf(item: SAPOData.DownloadQuery, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func log(level: Swift.Int) throws
  open func logDebug() throws
  open func logInfo() throws
  open func logTrace() throws
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DownloadQuery>>
  open class func of(_ items: SAPOData.DownloadQuery...) -> SAPOData.DownloadQueryList
  open func reversed() -> SAPOData.DownloadQueryList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DownloadQueryList
  final public func single() -> SAPOData.DownloadQuery
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DownloadQueryList
  final public func sort(by increasing: @escaping (SAPOData.DownloadQuery, SAPOData.DownloadQuery) -> Swift.Bool)
  final public func sorted() -> SAPOData.DownloadQueryList
  final public func sorted(by increasing: @escaping (SAPOData.DownloadQuery, SAPOData.DownloadQuery) -> Swift.Bool) -> SAPOData.DownloadQueryList
  open func toArray() -> Swift.Array<SAPOData.DownloadQuery>
  final public func update(at index: Swift.Int, item: SAPOData.DownloadQuery)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DownloadQuery>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DownloadQuery>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class FromJSON : SAPOData.DataQuery {
  final public var text: Swift.String
  override public init()
  open class func entity(_ text: Swift.String) -> SAPOData.DataQuery
  open class func entityKey(_ text: Swift.String) -> SAPOData.DataQuery
  open class func entityList(_ text: Swift.String) -> SAPOData.DataQuery
  @available(swift, deprecated: 4.0, renamed: "entityList")
  open class func entitySet(_ text: Swift.String) -> SAPOData.DataQuery
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonEntityProvider : SAPOData.ObjectBase, SAPOData.DataServiceProvider {
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var serviceName: Swift.String {
    get
  }
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open class func withMetadata(_ metadata: SAPOData.CSDLDocument) throws -> SAPOData.JsonEntityProvider
  open class func withProvider(_ provider: any SAPOData.DataServiceProvider) throws -> SAPOData.JsonEntityProvider
  @objc deinit
}
open class LegacyAnyDataService : SAPOData.ObjectBase {
  public var actionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var functionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var completionQueue: Foundation.OperationQueue {
    get
    set
  }
  open func asyncAction(_ task: @escaping () -> Swift.Void)
  open func asyncFunction(_ task: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "actionQueue")
  public var backgroundQueueForAction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "functionQueue")
  public var backgroundQueueForFunction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "asyncAction")
  open func addBackgroundOperationForAction(_ operation: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "asyncFunction")
  open func addBackgroundOperationForFunction(_ operation: @escaping () -> Swift.Void)
  public init(provider: any SAPOData.DataServiceProvider)
  open func activateDraft(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.EntityValue
  open func activateDraft(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.EntityValue?, (any Swift.Error)?) -> Swift.Void)
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func checkIfCancelled(_ token: SAPOData.CancelToken?) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.ByteStream
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.DataValue?
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (SAPOData.DataValue?, (any Swift.Error)?) -> Swift.Void)
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.QueryResult
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (SAPOData.QueryResult?, (any Swift.Error)?) -> Swift.Void)
  open func fetchMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.CSDLDocument
  open func fetchMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (SAPOData.CSDLDocument?, (any Swift.Error)?) -> Swift.Void)
  open var hasMetadata: Swift.Bool {
    get
  }
  open func isClientRegistered() throws -> Swift.Bool
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func loadMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func loadMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func makeDraftCopy(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.EntityValue
  open func makeDraftCopy(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.EntityValue?, (any Swift.Error)?) -> Swift.Void)
  open var metadata: SAPOData.CSDLDocument {
    get
  }
  open var metadataLock: SAPOData.MetadataLock {
    get
  }
  open var name: Swift.String {
    get
  }
  open func pingServer(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func pingServer(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open var provider: any SAPOData.DataServiceProvider {
    get
  }
  open func refreshMetadata() throws
  open func refreshMetadata(completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func registerClient(_ client: SAPOData.EntityValue? = nil) throws
  open func registerClient(_ client: SAPOData.EntityValue? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func unloadMetadata() throws
  open func unloadMetadata(completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func unregisterClient(deleteFromServer: Swift.Bool = false) throws
  open func unregisterClient(deleteFromServer: Swift.Bool = false, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
open class LegacyDataService<Provider> where Provider : SAPOData.DataServiceProvider {
  public var actionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var functionQueue: Foundation.OperationQueue {
    get
    set
  }
  public var completionQueue: Foundation.OperationQueue {
    get
    set
  }
  open func asyncAction(_ task: @escaping () -> Swift.Void)
  open func asyncFunction(_ task: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "actionQueue")
  public var backgroundQueueForAction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "functionQueue")
  public var backgroundQueueForFunction: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 5.5, renamed: "asyncAction")
  open func addBackgroundOperationForAction(_ operation: @escaping () -> Swift.Void)
  @available(swift, deprecated: 5.5, renamed: "asyncFunction")
  open func addBackgroundOperationForFunction(_ operation: @escaping () -> Swift.Void)
  public init(provider: Provider)
  public var provider: Provider {
    get
  }
  open func activateDraft(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.EntityValue
  open func activateDraft(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.EntityValue?, (any Swift.Error)?) -> Swift.Void)
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func checkIfCancelled(_ token: SAPOData.CancelToken?) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.ByteStream
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.DataValue?
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (SAPOData.DataValue?, (any Swift.Error)?) -> Swift.Void)
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.QueryResult
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (SAPOData.QueryResult?, (any Swift.Error)?) -> Swift.Void)
  open func fetchMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.CSDLDocument
  open func fetchMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (SAPOData.CSDLDocument?, (any Swift.Error)?) -> Swift.Void)
  open var hasMetadata: Swift.Bool {
    get
  }
  open func isClientRegistered() throws -> Swift.Bool
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func loadMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func loadMetadata(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func makeDraftCopy(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.EntityValue
  open func makeDraftCopy(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.EntityValue?, (any Swift.Error)?) -> Swift.Void)
  open var metadata: SAPOData.CSDLDocument {
    get
  }
  open var metadataLock: SAPOData.MetadataLock {
    get
  }
  open var name: Swift.String {
    get
  }
  open func pingServer(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func pingServer(headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func refreshMetadata() throws
  open func refreshMetadata(completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func registerClient(_ client: SAPOData.EntityValue? = nil) throws
  open func registerClient(_ client: SAPOData.EntityValue? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func unloadMetadata() throws
  open func unloadMetadata(completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func unregisterClient(deleteFromServer: Swift.Bool = false) throws
  open func unregisterClient(deleteFromServer: Swift.Bool = false, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
extension SAPOData.LegacyDataService where Provider : SAPOData.OnlineODataProvider {
  public var httpCookies: SAPOData.HTTPCookies {
    get
  }
  public var httpHeaders: SAPOData.HTTPHeaders {
    get
  }
  public var sessionCookies: SAPOData.HTTPCookies {
    get
  }
  public var sessionHeaders: SAPOData.HTTPHeaders {
    get
  }
  public var sharedCookies: SAPOData.HTTPCookies {
    get
  }
  public var sharedHeaders: SAPOData.HTTPHeaders {
    get
  }
  public var networkOptions: SAPOData.NetworkOptions {
    get
  }
  public var prettyTracing: Swift.Bool {
    get
    set
  }
  public var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  public var traceRequests: Swift.Bool {
    get
    set
  }
  public var traceWithData: Swift.Bool {
    get
    set
  }
  public func acquireToken() throws
}
public protocol MetadataListener : AnyObject {
  func onMetadataChange() throws
}
open class MetadataOnlyProvider : SAPOData.ObjectBase, SAPOData.DataServiceProvider {
  public init(name: Swift.String)
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open class func newIfNull(provider: (any SAPOData.DataServiceProvider)?, name: Swift.String) throws -> any SAPOData.DataServiceProvider
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var serviceName: Swift.String {
    get
  }
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class NetworkOptions : SAPOData.ObjectBase {
  final public var httpHandler: SAPOData.HTTPHandler?
  final public var compressRequests: Swift.Bool
  final public var compressResponses: Swift.Bool
  final public var streamDownloads: Swift.Bool
  final public var streamUploads: Swift.Bool
  final public var allowTunneling: Swift.Bool
  final public var tunneledMethods: SAPOData.StringList
  final public var tunnelingHeader: Swift.String
  override public init()
  @inline(__always) final public var gzipAcceptable: Swift.Bool {
    get
    set(value)
  }
  @objc deinit
}
open class OfflineDataService : SAPOData.DataService {
  public init(provider: any SAPOData.DataSyncProvider)
  open func cancelDownload() throws
  open func cancelDownload(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func cancelPendingRequests(_ requests: SAPOData.PendingRequestList? = nil) throws
  open func cancelPendingRequests(_ requests: SAPOData.PendingRequestList? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func cancelUpload() throws
  open func cancelUpload(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func clear() throws
  open func clear(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func close() throws
  open func close(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func createDownloadQuery(name: Swift.String, query: SAPOData.DataQuery, streams: Swift.Bool = false) throws
  open func createDownloadQuery(name: Swift.String, query: SAPOData.DataQuery, streams: Swift.Bool = false, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func deleteDownloadQuery(name: Swift.String) throws
  open func deleteDownloadQuery(name: Swift.String, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func download(groups: SAPOData.StringList? = nil, options: SAPOData.SyncOptions? = nil) throws
  open func download(groups: SAPOData.StringList? = nil, options: SAPOData.SyncOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func downloadGroup(_ group: Swift.String) -> SAPOData.DownloadGroup
  open func downloadInGroup(_ group: Swift.String, _ entitySets: SAPOData.EntitySet...)
  open func downloadQueries(from: SAPOData.EntitySet? = nil) throws -> SAPOData.DownloadQueryList
  open func downloadQueries(from: SAPOData.EntitySet? = nil, completionHandler: @escaping (Swift.Result<SAPOData.DownloadQueryList, any Swift.Error>) -> Swift.Void)
  open func downloadQuery(name: Swift.String) throws -> SAPOData.DownloadQuery?
  open func downloadQuery(name: Swift.String, completionHandler: @escaping (Swift.Result<SAPOData.DownloadQuery?, any Swift.Error>) -> Swift.Void)
  open func eventHistory(matching query: SAPOData.DataQuery?) throws -> SAPOData.SyncEventList
  open func eventHistory(matching query: SAPOData.DataQuery?, completionHandler: @escaping (Swift.Result<SAPOData.SyncEventList, any Swift.Error>) -> Swift.Void)
  open func failedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.PendingRequestList
  open func failedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<SAPOData.PendingRequestList, any Swift.Error>) -> Swift.Void)
  open func hasFailedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> Swift.Bool
  open func hasInitialData() throws -> Swift.Bool
  open func hasPendingDownload() throws -> Swift.Bool
  open func hasPendingUpload() throws -> Swift.Bool
  open func hasQueuedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> Swift.Bool
  open func lastDownloadTime() throws -> SAPOData.GlobalDateTime?
  open func lastUploadTime() throws -> SAPOData.GlobalDateTime?
  open var onlineProvider: SAPOData.OnlineODataProvider {
    get
  }
  open func open() throws
  open func open(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func previousUser() throws -> Swift.String?
  open func queuedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.PendingRequestList
  open func queuedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<SAPOData.PendingRequestList, any Swift.Error>) -> Swift.Void)
  open var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  open var syncProvider: any SAPOData.DataSyncProvider {
    get
  }
  open func undoPendingChanges(for entities: any SAPOData.EntityValueOrList) throws
  open func undoPendingChanges(for entities: any SAPOData.EntityValueOrList, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func upload(groups: SAPOData.StringList? = nil, options: SAPOData.SyncOptions? = nil) throws
  open func upload(groups: SAPOData.StringList? = nil, options: SAPOData.SyncOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func uploadDatabaseFile(encryptionKey: Swift.String? = nil, note: Swift.String? = nil, options: SAPOData.SyncOptions? = nil) throws
  open func uploadDatabaseFile(encryptionKey: Swift.String? = nil, note: Swift.String? = nil, options: SAPOData.SyncOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
@available(swift 5.5)
open class OfflineDataServiceAsync : SAPOData.DataServiceAsync {
  public init(provider: any SAPOData.DataSyncProvider)
  #if compiler(>=5.3) && $AsyncAwait
  open func cancelDownload() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func cancelPendingRequests(_ requests: SAPOData.PendingRequestList? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func cancelUpload() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func clear() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func close() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func createDownloadQuery(name: Swift.String, query: SAPOData.DataQuery, streams: Swift.Bool = false) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func deleteDownloadQuery(name: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func download(groups: SAPOData.StringList? = nil, options: SAPOData.SyncOptions? = nil) async throws
  #endif
  open func downloadGroup(_ group: Swift.String) -> SAPOData.DownloadGroup
  open func downloadInGroup(_ group: Swift.String, _ entitySets: SAPOData.EntitySet...)
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadQueries(from: SAPOData.EntitySet? = nil) async throws -> SAPOData.DownloadQueryList
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func downloadQuery(name: Swift.String) async throws -> SAPOData.DownloadQuery?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func eventHistory(matching query: SAPOData.DataQuery?) async throws -> SAPOData.SyncEventList
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func failedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws -> SAPOData.PendingRequestList
  #endif
  open func hasFailedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> Swift.Bool
  open func hasInitialData() throws -> Swift.Bool
  open func hasPendingDownload() throws -> Swift.Bool
  open func hasPendingUpload() throws -> Swift.Bool
  open func hasQueuedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> Swift.Bool
  open func lastDownloadTime() throws -> SAPOData.GlobalDateTime?
  open func lastUploadTime() throws -> SAPOData.GlobalDateTime?
  open var onlineProvider: SAPOData.OnlineODataProvider {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  open func open() async throws
  #endif
  open func previousUser() throws -> Swift.String?
  #if compiler(>=5.3) && $AsyncAwait
  open func queuedRequests(matching query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws -> SAPOData.PendingRequestList
  #endif
  open var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  open var syncProvider: any SAPOData.DataSyncProvider {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  open func undoPendingChanges(for entities: any SAPOData.EntityValueOrList) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func upload(groups: SAPOData.StringList? = nil, options: SAPOData.SyncOptions? = nil) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func uploadDatabaseFile(encryptionKey: Swift.String? = nil, note: Swift.String? = nil, options: SAPOData.SyncOptions? = nil) async throws
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OfflineInternal {
  public static func createSyncEvent(id: Swift.Int64, type: Swift.String, time: SAPOData.GlobalDateTime, details: Swift.String?) -> SAPOData.SyncEvent
  public static func downloadQueryID(query: SAPOData.DownloadQuery) -> Swift.Int
  public static func dynamicRequest(_ request: SAPOData.PendingRequest) -> SAPOData.EntityValue
  public static func enableCloudSyncProvider()
  public static func enableMainThreadSync()
  public static func newConcurrentStringSetWithRetainedInsertionOrder() -> SAPOData.StringSet
  public static func newPendingRequest(provider: SAPOData.CloudSyncProvider) -> SAPOData.PendingRequest
  public static func offlineParameters(provider: SAPOData.CloudSyncProvider) -> Swift.AnyObject
  public static func offlineStore(provider: SAPOData.CloudSyncProvider) -> SAPOData.SQLDatabaseProvider
  public static func refreshCanDoAnything(provider: SAPOData.CloudSyncProvider)
  public static func setBackwardsCompatible(provider: SAPOData.CloudSyncProvider, compatibility: SAPOData.OfflineInternal.BC)
  public static func setCachedValues(request: SAPOData.PendingRequest)
  public static func setOfflineParameters(provider: SAPOData.CloudSyncProvider, parameters: Swift.AnyObject)
  public static func setRequestText(request: SAPOData.PendingRequest, text: Swift.String?)
  public static func statusString(request: SAPOData.PendingRequest) -> Swift.String
  @_inheritsConvenienceInitializers open class BC : SAPOData.ObjectBase {
    override public init()
    open func deleteErrorArchive(entity: SAPOData.EntityValue) throws
    open func deleteRequestQueue(entity: SAPOData.EntityValue) throws
    open func errorArchiveResult(query: SAPOData.DataQuery) throws -> SAPOData.QueryResult
    open func eventLogResult(query: SAPOData.DataQuery) throws -> SAPOData.QueryResult
    open func isErrorArchive(entitySet: SAPOData.EntitySet) -> Swift.Bool
    open func isEventLog(entitySet: SAPOData.EntitySet) -> Swift.Bool
    open func isRequestQueue(entitySet: SAPOData.EntitySet) -> Swift.Bool
    open func loadCompatibility(property: SAPOData.Property, into: SAPOData.EntityValue) throws
    open func openCompatibility()
    open func requestQueueResult(query: SAPOData.DataQuery) throws -> SAPOData.QueryResult
    open func setHeadersAndCookies()
    @objc deinit
  }
  @objc deinit
}
open class OnlineDataService : SAPOData.DataService {
  public init(provider: SAPOData.OnlineODataProvider)
  open func acquireToken() throws
  open func acquireToken(completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func deleteRepeatableRequest(requestID: SAPOData.GuidValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteRepeatableRequest(requestID: SAPOData.GuidValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open func deleteRepeatableRequests(requestIDs: SAPOData.GuidValueList? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws
  open func deleteRepeatableRequests(requestIDs: SAPOData.GuidValueList? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil, completionHandler: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  open var onlineProvider: SAPOData.OnlineODataProvider {
    get
  }
  open var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  @objc deinit
}
@available(swift 5.5)
open class OnlineDataServiceAsync : SAPOData.DataServiceAsync {
  public init(provider: SAPOData.OnlineODataProvider)
  #if compiler(>=5.3) && $AsyncAwait
  open func acquireToken() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func deleteRepeatableRequest(requestID: SAPOData.GuidValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  open func deleteRepeatableRequests(requestIDs: SAPOData.GuidValueList? = nil, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) async throws
  #endif
  open var onlineProvider: SAPOData.OnlineODataProvider {
    get
  }
  open var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  @objc deinit
}
open class OnlineODataProvider : SAPOData.ObjectBase, SAPOData.DataServiceProvider, SAPOData.ClientRegistrationProvider {
  convenience public init(serviceRoot: Foundation.URL, sapURLSession: SAPFoundation.SAPURLSession = SAPURLSession())
  convenience public init(serviceName: Swift.String, serviceRoot: Foundation.URL, sapURLSession: SAPFoundation.SAPURLSession = SAPURLSession())
  public var sapURLSession: SAPFoundation.SAPURLSession? {
    get
    set
  }
  public init(serviceName: Swift.String, serviceRoot: Swift.String, httpHandler: SAPOData.HTTPHandler? = nil)
  open func acquireToken() throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func dataMethod(name: Swift.String) -> SAPOData.DataMethod
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteRepeatableRequest(requestID: SAPOData.GuidValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteRepeatableRequests(requestIDs: SAPOData.GuidValueList?, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deltaStream(query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.DeltaStream
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func entityContext(entitySet: SAPOData.EntitySet, derivedType: SAPOData.StructureType? = nil, format: Swift.Int = (0 as Int), version: Swift.Int = (0 as Int)) -> SAPOData.DataContext
  open func entitySet(name: Swift.String) -> SAPOData.EntitySet
  open func entityStream(query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.EntityStream
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open var httpCookies: SAPOData.HTTPCookies {
    get
  }
  open var httpHeaders: SAPOData.HTTPHeaders {
    get
  }
  open func isClientRegistered() throws -> Swift.Bool
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func login(username: Swift.String, password: Swift.String)
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  @inline(__always) final public var networkOptions: SAPOData.NetworkOptions {
    get
  }
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @inline(__always) final public var prettyTracing: Swift.Bool {
    get
    set(value)
  }
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func queryContext(version: Swift.Int = (0 as Int)) -> SAPOData.DataContext
  open func registerClient(_ client: SAPOData.EntityValue?) throws
  open var serviceName: Swift.String {
    get
  }
  @inline(__always) final public var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  open var serviceRoot: Swift.String {
    get
    set(value)
  }
  open var sessionCookies: SAPOData.HTTPCookies {
    get
  }
  open var sessionHeaders: SAPOData.HTTPHeaders {
    get
  }
  open var sharedCookies: SAPOData.HTTPCookies {
    get
  }
  open var sharedHeaders: SAPOData.HTTPHeaders {
    get
  }
  @inline(__always) final public var traceRequests: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var traceWithData: Swift.Bool {
    get
    set(value)
  }
  open func unloadMetadata() throws
  open func unregisterClient(deleteFromServer: Swift.Bool) throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class OperationProgress : SAPOData.ObjectBase {
  final public var phaseName: Swift.String
  final public var phaseNumber: (Swift.Int)
  final public var currentStep: Swift.String?
  final public var lastCompleted: Swift.String?
  final public var completedSteps: (Swift.Int)
  final public var totalSteps: (Swift.Int)
  final public var totalCreates: Swift.Int64
  final public var totalUpdates: Swift.Int64
  final public var totalDeletes: Swift.Int64
  final public var fractionComplete: (Swift.Double)
  final public var estimatedTimeRemaining: SAPOData.DayTimeDuration?
  override public init()
  open func copy() throws -> SAPOData.OperationProgress
  open var operationPhase: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PathResolver {
  public static func resolveChildPaths(metadata: SAPOData.CSDLDocument, parent: SAPOData.StructureBase, dataContext: SAPOData.DataContext, parentPath: Swift.String?)
  public static func resolvePaths(metadata: SAPOData.CSDLDocument, dataContext: SAPOData.DataContext, value: SAPOData.DataValue?, path: Swift.String? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers open class PendingRequest : SAPOData.ObjectBase {
  public static let changeSet: SAPOData.Property
  public static let customTag: SAPOData.Property
  public static let firstSent: SAPOData.Property
  public static let httpMethod: SAPOData.Property
  public static let httpStatus: SAPOData.Property
  public static let requestID: SAPOData.Property
  public static let requestURL: SAPOData.Property
  public static let uploadGroup: SAPOData.Property
  override public init()
  open func affectedEntity(fixRequest: Swift.Bool = false) throws -> SAPOData.EntityValue?
  open func cancel() throws
  open var changeSet: Swift.String? {
    get
  }
  open var customTag: Swift.String? {
    get
  }
  open func dependentRequests() throws -> SAPOData.PendingRequestList
  open var entitySet: SAPOData.EntitySet? {
    get
  }
  open var entityType: SAPOData.EntityType? {
    get
  }
  open func errorResponse() throws -> SAPOData.ErrorResponse?
  open var firstSent: SAPOData.GlobalDateTime? {
    get
  }
  open var hasError: Swift.Bool {
    get
  }
  open var httpHeaders: SAPOData.HTTPHeaders {
    get
  }
  open var httpMethod: Swift.String {
    get
  }
  open var httpStatus: Swift.Int? {
    get
  }
  open func latestDownload(fixRequest: Swift.Bool = false) throws -> SAPOData.EntityValue?
  open var method: SAPOData.RequestMethod {
    get
  }
  open func originalEntity(fixRequest: Swift.Bool = false) throws -> SAPOData.EntityValue?
  open func requestData() throws -> Foundation.Data?
  open var requestID: Swift.Int64 {
    get
  }
  open func requestText() throws -> Swift.String?
  open var requestType: Swift.String? {
    get
  }
  open var requestURL: Swift.String {
    get
  }
  open func responseData() throws -> Foundation.Data?
  open func responseText() throws -> Swift.String?
  open var responseType: Swift.String? {
    get
  }
  open var status: SAPOData.RequestStatus {
    get
  }
  override open func toString() -> Swift.String
  open func toStringWithDetails(fetchDetails: Swift.Bool, includeHeaders: Swift.Bool = true, includeContent: Swift.Bool = true, hideCredentials: Swift.Bool = true) -> Swift.String
  open var uploadGroup: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class PendingRequestList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PendingRequest {
    get
    set
  }
  public static let empty: SAPOData.PendingRequestList
  final public var includeHeaders: Swift.Bool
  final public var includeContent: Swift.Bool
  final public var hideCredentials: Swift.Bool
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.PendingRequest)
  final public func append(contentsOf list: SAPOData.PendingRequestList)
  final public func appendThis(_ item: SAPOData.PendingRequest) -> SAPOData.PendingRequestList
  final public func copy() -> SAPOData.PendingRequestList
  final public func filter(_ predicate: @escaping (SAPOData.PendingRequest) -> Swift.Bool) -> SAPOData.PendingRequestList
  final public func first() -> SAPOData.PendingRequest
  open class func fromArray(_ array: Swift.Array<SAPOData.PendingRequest>) -> SAPOData.PendingRequestList
  final public func includes(item: SAPOData.PendingRequest) -> Swift.Bool
  final public func indexOf(item: SAPOData.PendingRequest, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.PendingRequest)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.PendingRequestList)
  final public func item(at index: Swift.Int) -> SAPOData.PendingRequest
  final public func last() -> SAPOData.PendingRequest
  final public func lastIndexOf(item: SAPOData.PendingRequest, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func log(level: Swift.Int) throws
  open func logDebug() throws
  open func logError() throws
  open func logInfo() throws
  open func logTrace() throws
  open func logWarn() throws
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PendingRequest>>
  open class func of(_ items: SAPOData.PendingRequest...) -> SAPOData.PendingRequestList
  open func reversed() -> SAPOData.PendingRequestList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PendingRequestList
  final public func single() -> SAPOData.PendingRequest
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PendingRequestList
  final public func sort(by increasing: @escaping (SAPOData.PendingRequest, SAPOData.PendingRequest) -> Swift.Bool)
  final public func sorted() -> SAPOData.PendingRequestList
  final public func sorted(by increasing: @escaping (SAPOData.PendingRequest, SAPOData.PendingRequest) -> Swift.Bool) -> SAPOData.PendingRequestList
  open func toArray() -> Swift.Array<SAPOData.PendingRequest>
  final public func update(at index: Swift.Int, item: SAPOData.PendingRequest)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PendingRequest>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PendingRequest>>
  @objc deinit
}
public protocol ProgressListener : AnyObject {
  func onProgress(_ progress: SAPOData.OperationProgress) throws
}
@_hasMissingDesignatedInitializers public class ProviderInternal {
  public static func deepUpdatePrepare(root: SAPOData.EntityValue) throws
  public static func providerDebugJsonParseTime(provider: SAPOData.OnlineODataProvider) throws -> Swift.Int64
  public static func providerDebugJsonValueTime(provider: SAPOData.OnlineODataProvider) throws -> Swift.Int64
  public static func resetProviderDebugJsonParseTime(provider: SAPOData.OnlineODataProvider) throws
  public static func resetProviderDebugJsonValueTime(provider: SAPOData.OnlineODataProvider) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProxyInternal {
  public static func refreshMetadata(service: Swift.AnyObject, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?) throws
  public static func refreshMetadata<Provider>(generic: SAPOData.LegacyDataService<Provider>, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?) throws where Provider : SAPOData.DataServiceProvider
  public static func refreshMetadata<Provider>(generic: SAPOData.LegacyDataService<Provider>, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?, mergeAction: @escaping () -> Swift.Void) throws where Provider : SAPOData.DataServiceProvider
  public static func refreshMetadataWithLock(service: Swift.AnyObject, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?) throws
  public static func refreshMetadataWithLock<Provider>(generic: SAPOData.LegacyDataService<Provider>, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?) throws where Provider : SAPOData.DataServiceProvider
  public static func refreshMetadataWithLock<Provider>(generic: SAPOData.LegacyDataService<Provider>, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?, mergeAction: @escaping () -> Swift.Void) throws where Provider : SAPOData.DataServiceProvider
  public static func checkVersion(metadata: SAPOData.CSDLDocument)
  public static func enableOnlineMode(service: SAPOData.OfflineDataService)
  public static func enableOnlineMode(service: SAPOData.OfflineDataServiceAsync)
  public static func executeQuery(service: SAPOData.DataServiceAsync, query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) throws -> SAPOData.QueryResult
  public static func isOnlineSetupActive(provider: any SAPOData.DataSyncProvider) -> Swift.Bool
  public static func noRefreshMetadata()
  public static func onlineSetupFinished(provider: any SAPOData.DataSyncProvider)
  public static func onlineSetupStarting(provider: any SAPOData.DataSyncProvider)
  public static func refreshMetadata(service: Swift.AnyObject, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?, mergeAction: @escaping () -> Swift.Void) throws
  public static func refreshMetadataWithLock(service: Swift.AnyObject, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?, mergeAction: @escaping () -> Swift.Void) throws
  public static func setCsdlFetcher(provider: any SAPOData.DataServiceProvider, fetcher: SAPOData.CSDLFetcher?)
  public static func setCsdlOptions(provider: any SAPOData.DataServiceProvider, options: Swift.Int, include: SAPOData.XmlElementList = XmlElementList.empty)
  public static func setMergeAction(provider: any SAPOData.DataServiceProvider, action: @escaping () -> Swift.Void)
  public static func switchMetadata(provider: any SAPOData.DataServiceProvider, oldMetadata: SAPOData.CSDLDocument, newMetadata: SAPOData.CSDLDocument, mergeAction: @escaping () -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers open class RequestBatch : SAPOData.ObjectBase {
  final public var continueOnError: Swift.Bool
  override public init()
  open func action(at index: Swift.Int) -> SAPOData.DataQuery
  open func actionResult(for call: SAPOData.DataQuery, at index: Swift.Int = Int(Int32.min)) -> SAPOData.QueryResult
  open func addAction(call: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func addChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func addFunction(call: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func addQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil)
  open func addQueryResult(query: SAPOData.DataQuery, result: SAPOData.QueryResult, index: Swift.Int = Int(Int32.min))
  open func changeSet(at index: Swift.Int) -> SAPOData.ChangeSet
  open func checkActionResult(for call: SAPOData.DataQuery, at index: Swift.Int = Int(Int32.min))
  open func dataQuery(at index: Swift.Int) -> SAPOData.DataQuery
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) -> SAPOData.DataQuery
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) -> SAPOData.DataQuery
  @inline(__always) final public var error: SAPOData.DataServiceError? {
    get
    set(value)
  }
  open func function(at index: Swift.Int) -> SAPOData.DataQuery
  open func functionResult(for call: SAPOData.DataQuery, at index: Swift.Int = Int(Int32.min)) -> SAPOData.QueryResult
  open func headers(at index: Swift.Int) -> SAPOData.HTTPHeaders
  open func invokeFunction(method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders? = nil, options: SAPOData.RequestOptions? = nil) -> SAPOData.DataQuery
  open func isAction(at index: Swift.Int) -> Swift.Bool
  open func isChangeSet(at index: Swift.Int) -> Swift.Bool
  open func isDataQuery(at index: Swift.Int) -> Swift.Bool
  open func isFunction(at index: Swift.Int) -> Swift.Bool
  open func options(at index: Swift.Int) -> SAPOData.RequestOptions
  open func queryResult(for query: SAPOData.DataQuery, index: Swift.Int = Int(Int32.min)) -> SAPOData.QueryResult
  open func replaceHeaders(at index: Swift.Int, headers: SAPOData.HTTPHeaders)
  open func replaceOptions(at index: Swift.Int, options: SAPOData.RequestOptions)
  open var size: Swift.Int {
    get
  }
  @inline(__always) final public var status: Swift.Int {
    get
    set(value)
  }
  @objc deinit
}
public enum RequestMethod : Swift.Int {
  case unknown
  case createEntity
  case createLink
  case createMedia
  case deleteEntity
  case deleteLink
  case deleteStream
  case updateEntity
  case updateLink
  case uploadMedia
  case uploadStream
  case invokeAction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RequestStatus : Swift.Int {
  case failed
  case sent
  case unsent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers open class SQLDatabaseError : SAPOData.DataStorageError {
  override public init()
  open class func stackTrace() -> SAPOData.SQLDatabaseError
  open class func withCause(_ cause: (any Swift.Error)?) -> SAPOData.SQLDatabaseError
  open class func withCauseAndMessage(cause: (any Swift.Error)?, message: Swift.String?) -> SAPOData.SQLDatabaseError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.SQLDatabaseError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SQLDatabaseInternal {
  public static func changeSchemaSQL(provider: SAPOData.SQLDatabaseProvider, name: Swift.String) throws -> Swift.String
  public static func columnType(provider: SAPOData.SQLDatabaseProvider, property: SAPOData.Property) throws -> Swift.String
  public static func createTablesSQL(provider: SAPOData.SQLDatabaseProvider) throws -> SAPOData.StringList
  public static func literalFalse(provider: SAPOData.SQLDatabaseProvider) throws -> Swift.String
  public static func literalTrue(provider: SAPOData.SQLDatabaseProvider) throws -> Swift.String
  public static func noConnection(provider: SAPOData.SQLDatabaseProvider) throws
  public static func quote(provider: SAPOData.SQLDatabaseProvider, name: Swift.String) throws -> Swift.String
  public static func unquote(provider: SAPOData.SQLDatabaseProvider, name: Swift.String) throws -> Swift.String
  @objc deinit
}
open class SQLDatabaseProvider : SAPOData.ObjectBase, SAPOData.DataServiceProvider {
  final public var encryptionKey: Swift.String?
  final public var autoGenerateKeys: Swift.Bool
  final public var autoBindEntities: Swift.Bool
  final public var autoUnbindEntities: Swift.Bool
  final public var autoCreateParents: Swift.Bool
  final public var autoCreateChildren: Swift.Bool
  final public var autoDeleteChildren: Swift.Bool
  final public var autoExpandItems: Swift.Bool
  final public var selectAfterCreate: Swift.Bool
  final public var selectAfterUpdate: Swift.Bool
  final public var enableKeyTracking: Swift.Bool
  final public var enableRowVersioning: Swift.Bool
  final public var maintainVersionColumns: Swift.Bool
  final public var flattenComplexProperties: Swift.Bool
  final public var generateForeignKeyConstraints: Swift.Bool
  final public var generateUniqueConstraints: Swift.Bool
  final public var statementBatchSize: Swift.Int
  final public var statementCacheSize: Swift.Int
  final public var canModifySchema: Swift.Bool
  final public var isCacheDatabase: Swift.Bool
  final public var isMetricProvider: Swift.Bool
  final public var useDatabaseTextSearch: Swift.Bool
  final public var useClientProvidedKeys: Swift.Bool
  public init(serviceName: Swift.String, databaseURL: Swift.String? = nil)
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func beginTransaction() throws
  open func bindEntities(entity: SAPOData.EntityValue, bindingProperty: SAPOData.Property? = nil, afterCreate: Swift.Bool = false, afterUpdate: Swift.Bool = false) throws
  open func bindEntitiesAfterCreate(entity: SAPOData.EntityValue, bindingProperty: SAPOData.Property? = nil) throws
  open func bindEntitiesAfterUpdate(entity: SAPOData.EntityValue, bindingProperty: SAPOData.Property? = nil) throws
  open func closeConnection() throws
  open func commit() throws
  open func createChildren(entity: SAPOData.EntityValue, childProperty: SAPOData.Property? = nil) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createEntityReturningError(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> (any Swift.Error)?
  open func createIndex(_ entitySet: SAPOData.EntitySet, _ item: SAPOData.PropertyPath, _ items: SAPOData.PropertyPath...)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createLinkUsingForeignKeys(source: SAPOData.EntityValue, sourceProperty: SAPOData.Property, target: SAPOData.EntityValue) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createParents(entity: SAPOData.EntityValue, parentProperty: SAPOData.Property? = nil) throws
  open func createSchema() throws
  open func createSchemaWithRetryLoop() throws
  open func currentLDT() throws -> SAPOData.GlobalDateTime
  open func currentUTC() throws -> SAPOData.GlobalDateTime
  open var debugConnections: Swift.Bool {
    get
    set(value)
  }
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteChildren(entity: SAPOData.EntityValue, childProperty: SAPOData.Property? = nil) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteEntityReturningError(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> (any Swift.Error)?
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteLinkUsingForeignKeys(source: SAPOData.EntityValue, sourceProperty: SAPOData.Property, target: SAPOData.EntityValue) throws
  open func deleteSchema() throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.ByteStream
  open func executeBatch() throws
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.QueryResult
  open func expandItem(entity: SAPOData.EntityValue, item: SAPOData.ExpandItem) throws
  open func expandItems(query: SAPOData.DataQuery, result: SAPOData.DataValue?) throws
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open func inTransaction() throws -> Swift.Bool
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil) throws
  @inline(__always) final public var logExceptions: Swift.Bool {
    get
    set(value)
  }
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open func openConnection() throws
  open func openSchema() throws
  open func openSchemaWithRetryLoop() throws
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func prepareData(work: @escaping () throws -> Swift.Void) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func rollback() throws
  open func schemaExists() throws -> Swift.Bool
  open func selectEntity(_ entity: SAPOData.EntityValue) throws -> SAPOData.EntityValue
  open var serviceName: Swift.String {
    get
  }
  open func setInitialDataLoader(_ loader: @escaping () -> Swift.Void)
  @inline(__always) final public var storageOptions: SAPOData.StorageOptions {
    get
  }
  open func storedProcedure(name: Swift.String) -> SAPOData.DataMethod
  open var traceConnections: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var traceRequests: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var traceRollbacks: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var traceWithData: Swift.Bool {
    get
    set(value)
  }
  open func transaction(work: @escaping () throws -> Swift.Void) throws
  open func unbindEntities(entity: SAPOData.EntityValue, bindingProperty: SAPOData.Property? = nil) throws
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func updateEntityReturningError(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> (any Swift.Error)?
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func updateLinkUsingForeignKeys(source: SAPOData.EntityValue, sourceProperty: SAPOData.Property, target: SAPOData.EntityValue) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SQLInternal {
  public static func injectException(provider: SAPOData.SQLDatabaseProvider, method: Swift.String, error: SAPOData.DataError)
  @objc deinit
}
@_inheritsConvenienceInitializers open class ServiceOptions : SAPOData.ObjectBase {
  override public init()
  @inline(__always) final public var avoidInPaths: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var batchEntityOperations: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var batchExecuteMethods: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var batchExecuteQueries: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var batchLinkOperations: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var batchStreamOperations: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var cacheMetadata: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var checkQueries: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var checkResults: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var checkVersion: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var clientInstanceID: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var createReturnsContent: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var csdlFetcher: SAPOData.CSDLFetcher? {
    get
    set(value)
  }
  @inline(__always) final public var csdlOptions: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var dataFormat: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var dataVersion: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var databaseOnly: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var deepUpdateDelta: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var deleteWithEntityTag: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var entityListWrapper: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var entityValueWrapper: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var fixMissingEmptyLists: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var fixMissingNullValues: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var ieee754Compatible: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var includeElements: SAPOData.XmlElementList {
    get
    set(value)
  }
  @inline(__always) final public var includeReferences: SAPOData.XmlElementList {
    get
    set(value)
  }
  @inline(__always) final public var includeSchemas: SAPOData.DataSchemaList {
    get
    set(value)
  }
  @inline(__always) final public var keyAsSegment: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var loadIfCreateStatus: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var loadIfUpdateStatus: Swift.Int {
    get
    set(value)
  }
  @inline(__always) final public var logErrors: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var logWarnings: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var metadataFile: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var metadataText: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var metadataURL: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var patchAfterCreateMedia: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var patchMethod: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var pingAccept: Swift.String {
    get
    set(value)
  }
  @inline(__always) final public var pingMethod: Swift.String {
    get
    set(value)
  }
  @inline(__always) final public var pingResource: Swift.String {
    get
    set(value)
  }
  @inline(__always) final public var registrationFile: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var repeatabilityClientID: SAPOData.GuidValue? {
    get
    set(value)
  }
  @inline(__always) final public var requiresToken: Swift.String? {
    get
    set(value)
  }
  @inline(__always) final public var requiresType: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var sendOriginalRepeatability: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var sendStandardRepeatability: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsAlias: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsBatch: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsBatchForRepeatabilityDeletion: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsBind: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsDeleteWithClientID: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsDeleteWithRequestID: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsDelta: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsLink: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsNext: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsPatch: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsRepeatability: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var supportsUnbind: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var updateReturnsContent: Swift.Bool {
    get
    set(value)
  }
  @inline(__always) final public var updateWithEntityTag: Swift.Bool {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StorageOptions : SAPOData.ObjectBase {
  public static let storeBooleanAsSqlBoolean: (Swift.Int)
  public static let STORE_BOOLEAN_AS_NUMBER_1_0: (Swift.Int)
  public static let storeBooleanAsStringYN: (Swift.Int)
  final public var isEmbedded: Swift.Bool
  final public var databaseName: Swift.String?
  final public var databaseFile: Swift.String?
  final public var databaseType: Swift.String?
  final public var quotedIdentifiers: Swift.Bool
  final public var schemaName: Swift.String?
  final public var schemaVersion: Swift.String?
  final public var tablePrefix: Swift.String?
  final public var tableSuffix: Swift.String?
  final public var columnPrefix: Swift.String?
  final public var backendETagColumn: Swift.String
  final public var backendETagLength: (Swift.Int)
  final public var clientIDColumn: Swift.String
  final public var isDeletedColumn: Swift.String
  final public var lastModifiedColumn: Swift.String
  final public var offlineKeyColumn: Swift.String
  final public var offlineStateColumn: Swift.String
  final public var rowVersionColumn: Swift.String
  final public var createTables: Swift.Bool
  final public var offlineLinks: Swift.Bool
  final public var databaseURL: Swift.String?
  final public var databaseUsername: Swift.String?
  final public var databasePassword: Swift.String?
  final public var driverClass: Swift.String?
  final public var driverLibrary: Swift.String?
  final public var poolConnections: Swift.Bool
  final public var complexLength: (Swift.Int)
  final public var defaultLength: (Swift.Int)
  final public var defaultPrecision: (Swift.Int)
  final public var variableScale: (Swift.Int)
  final public var durationPrecision: (Swift.Int)
  final public var durationScale: (Swift.Int)
  final public var longestNonLOB: (Swift.Int)
  final public var storeBooleanAsType: (Swift.Int)
  final public var storeBackendEtag: Swift.Bool
  final public var storeMediaEtag: Swift.Bool
  final public var storeMediaType: Swift.Bool
  final public var mediaEtagColumnSuffix: Swift.String
  final public var mediaTypeColumnSuffix: Swift.String
  final public var internalClobColumn: Swift.String
  final public var internalDataColumn: Swift.String
  final public var internalDataLength: (Swift.Int)
  final public var storeInternalData: Swift.Bool
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class SyncEvent : SAPOData.ObjectBase {
  public static let eventID: SAPOData.Property
  public static let type: SAPOData.Property
  public static let time: SAPOData.Property
  public static let details: SAPOData.Property
  override public init()
  open var details: Swift.String? {
    get
  }
  open var eventID: Swift.Int64 {
    get
  }
  open var time: SAPOData.GlobalDateTime {
    get
  }
  open var type: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SyncEventList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SyncEvent {
    get
    set
  }
  public static let empty: SAPOData.SyncEventList
  override public init(capacity: Swift.Int = (4 as Int))
  final public func append(_ item: SAPOData.SyncEvent)
  final public func append(contentsOf list: SAPOData.SyncEventList)
  final public func appendThis(_ item: SAPOData.SyncEvent) -> SAPOData.SyncEventList
  final public func copy() -> SAPOData.SyncEventList
  final public func filter(_ predicate: @escaping (SAPOData.SyncEvent) -> Swift.Bool) -> SAPOData.SyncEventList
  final public func first() -> SAPOData.SyncEvent
  open class func fromArray(_ array: Swift.Array<SAPOData.SyncEvent>) -> SAPOData.SyncEventList
  final public func includes(item: SAPOData.SyncEvent) -> Swift.Bool
  final public func indexOf(item: SAPOData.SyncEvent, start: Swift.Int = (0 as Int)) -> Swift.Int
  final public func insert(at index: Swift.Int, item: SAPOData.SyncEvent)
  final public func insert(at index: Swift.Int, contentsOf list: SAPOData.SyncEventList)
  final public func item(at index: Swift.Int) -> SAPOData.SyncEvent
  final public func last() -> SAPOData.SyncEvent
  final public func lastIndexOf(item: SAPOData.SyncEvent, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SyncEvent>>
  open class func of(_ items: SAPOData.SyncEvent...) -> SAPOData.SyncEventList
  open func reversed() -> SAPOData.SyncEventList
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SyncEventList
  final public func single() -> SAPOData.SyncEvent
  final public func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SyncEventList
  final public func sort(by increasing: @escaping (SAPOData.SyncEvent, SAPOData.SyncEvent) -> Swift.Bool)
  final public func sorted() -> SAPOData.SyncEventList
  final public func sorted(by increasing: @escaping (SAPOData.SyncEvent, SAPOData.SyncEvent) -> Swift.Bool) -> SAPOData.SyncEventList
  open func toArray() -> Swift.Array<SAPOData.SyncEvent>
  final public func update(at index: Swift.Int, item: SAPOData.SyncEvent)
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SyncEvent>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SyncEvent>>
  @objc deinit
}
@_inheritsConvenienceInitializers open class SyncOptions : SAPOData.ObjectBase {
  public static let none: SAPOData.SyncOptions
  override public init()
  open var cancelToken: SAPOData.CancelToken? {
    get
    set(value)
  }
  open func cancelable(_ token: SAPOData.CancelToken) -> SAPOData.SyncOptions
  open func copy() -> SAPOData.SyncOptions
  open func listen(_ listener: any SAPOData.ProgressListener) -> SAPOData.SyncOptions
  open var progressListener: (any SAPOData.ProgressListener)? {
    get
    set(value)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ToJSON {
  public static func complexList<C>(value: Swift.Array<C>) -> Swift.String where C : SAPOData.ComplexValue
  public static func complexList<C>(value: Swift.Array<C>, options: Swift.Int = (0 as Int)) -> Swift.String where C : SAPOData.ComplexValue
  public static func entityList<E>(value: Swift.Array<E>) -> Swift.String where E : SAPOData.EntityValue
  public static func entityList<E>(value: Swift.Array<E>, options: Swift.Int = (0 as Int)) -> Swift.String where E : SAPOData.EntityValue
  public static func complex(_ value: SAPOData.ComplexValue, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func complexList(_ value: SAPOData.ComplexValueList, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func dataURI(_ value: Swift.AnyObject?) -> Swift.String
  public static func entity(_ value: SAPOData.EntityValue, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func entityKey(_ value: SAPOData.EntityValue, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func entityList(_ value: SAPOData.EntityValueList, options: Swift.Int = (0 as Int)) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class UploadError : SAPOData.DataError {
  final public var failureCount: (Swift.Int)
  final public var notSentCount: (Swift.Int)
  final public var successCount: (Swift.Int)
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.UploadError
  @objc deinit
}
extension SAPOData.DownloadMode : Swift.Equatable {}
extension SAPOData.DownloadMode : Swift.Hashable {}
extension SAPOData.DownloadMode : Swift.RawRepresentable {}
extension SAPOData.SortOrder : Swift.Equatable {}
extension SAPOData.SortOrder : Swift.Hashable {}
extension SAPOData.SortOrder : Swift.RawRepresentable {}
extension SAPOData.UpdateMode : Swift.Equatable {}
extension SAPOData.UpdateMode : Swift.Hashable {}
extension SAPOData.UpdateMode : Swift.RawRepresentable {}
extension SAPOData.RequestMethod : Swift.Equatable {}
extension SAPOData.RequestMethod : Swift.Hashable {}
extension SAPOData.RequestMethod : Swift.RawRepresentable {}
extension SAPOData.RequestStatus : Swift.Equatable {}
extension SAPOData.RequestStatus : Swift.Hashable {}
extension SAPOData.RequestStatus : Swift.RawRepresentable {}
