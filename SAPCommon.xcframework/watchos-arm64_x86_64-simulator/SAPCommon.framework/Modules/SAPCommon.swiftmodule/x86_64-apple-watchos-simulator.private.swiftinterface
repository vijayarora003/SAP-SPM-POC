// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-watchos9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SAPCommon
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Darwin
import Foundation
import Security
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_hasMissingDesignatedInitializers public class KeychainStorage : SAPCommon.DataStoring {
  final public let name: Swift.String
  public var cipher: any SAPCommon.Ciphering {
    get
  }
  final public let accessGroup: Swift.String
  public class func createStore(name: Swift.String, cipher: (any SAPCommon.Ciphering)? = nil, accessGroup: Swift.String = "") throws -> SAPCommon.KeychainStorage
  public class func openStore(name: Swift.String, cipher: (any SAPCommon.Ciphering)? = nil, accessGroup: Swift.String = "") throws -> SAPCommon.KeychainStorage
  public class func storeExists(name: Swift.String, accessGroup: Swift.String = "") throws -> Swift.Bool
  public class func removeStore(name: Swift.String, accessGroup: Swift.String = "") throws
  public func put(data: Foundation.Data, for key: Swift.String) throws
  public func data(for key: Swift.String) throws -> Foundation.Data?
  public func removeData(for key: Swift.String) throws
  public func removeAllData() throws
  public func keys() throws -> Swift.Set<Swift.String>
  public func changeCipher(to newCipher: any SAPCommon.Ciphering) throws
  @objc deinit
}
open class FileLogHandler : SAPCommon.LogHandler {
  public var logLevel: SAPCommon.LogLevel
  final public let formatter: any SAPCommon.LogFormatter
  public static let defaultMaxFileSize: Swift.UInt64
  @available(*, deprecated, renamed: "defaultMaxFileNum")
  public static let defaultMaxBackups: Swift.Int
  public static let defaultMaxFileNum: Swift.Int
  public var maxFileSize: Swift.UInt64
  public var maxFileNum: Swift.Int
  open var isLogRedirected: Swift.Bool {
    get
  }
  open class var synchronizationQueue: Dispatch.DispatchQueue {
    get
  }
  public init(fileURL: Foundation.URL, maxFileSize: Swift.UInt64 = defaultMaxFileSize, maxFileNum: Swift.Int = defaultMaxFileNum, formatter: any SAPCommon.LogFormatter = FileLogFormatter()) throws
  @available(*, deprecated, renamed: "init(fileURL:maxFileSize:maxFileNum:formatter:)")
  public init(fileURL: Foundation.URL, maxFileSize: Swift.UInt64, maxBackups: Swift.Int, formatter: any SAPCommon.LogFormatter = FileLogFormatter()) throws
  @objc deinit
  open func close()
  open func logFiles() -> [Foundation.URL]
  open func deleteLogFiles() throws
  open func publish(_ record: SAPCommon.LogRecord)
  open func setLogRedirection(to newValue: Swift.Bool) throws
  public func getLogFileUrl(forBackupNumber backupNumber: Swift.Int = 0) -> Foundation.URL?
}
@_inheritsConvenienceInitializers open class OSLogConsoleFormatter : SAPCommon.ConsoleLogFormatter {
  override open func format(_ record: SAPCommon.LogRecord) -> Swift.String
  override public init()
  @objc deinit
}
public enum KeychainStorageError : Swift.Error {
  case failedToRead(osstatus: Darwin.OSStatus)
  case failedToSave(osstatus: Darwin.OSStatus)
  case failedToRemove(osstatus: Darwin.OSStatus)
  case storeAlreadyExists
  case storeDoesntExist
  case storeNameIsntUTF8Encoded
}
extension SAPCommon.KeychainStorageError : SAPCommon.SAPError {
  public var description: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
open class ConsoleLogFormatter : SAPCommon.LogFormatter {
  public init()
  open var head: Swift.String {
    get
  }
  open func format(_ record: SAPCommon.LogRecord) -> Swift.String
  open func formatDate(_ date: Foundation.Date) -> Swift.String
  @objc deinit
}
public struct SAPcpmsLogSettings {
  public let logUploadEnabled: Swift.Bool
  public let entryExpiry: Swift.Int
  public let logLevel: Swift.String
  public let maxFileNum: Swift.Int
  public let maxFileSize: Swift.Int
  public init(logUploadEnabled: Swift.Bool = true, entryExpiry: Swift.Int = 0, logLevel: Swift.String, maxFileNum: Swift.Int = 0, maxFileSize: Swift.Int = 5)
}
public enum LogLevel : Swift.UInt, Swift.Comparable, Swift.CustomStringConvertible {
  case off
  case error
  case warn
  case info
  case debug
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public func == (lhs: SAPCommon.LogLevel, rhs: SAPCommon.LogLevel) -> Swift.Bool
public func < (lhs: SAPCommon.LogLevel, rhs: SAPCommon.LogLevel) -> Swift.Bool
public class NoCipher : SAPCommon.Ciphering {
  public init()
  public func encrypt(data: Foundation.Data) throws -> Foundation.Data
  public func decrypt(data: Foundation.Data) throws -> Foundation.Data
  @objc deinit
}
open class ConsoleLogHandler : SAPCommon.LogHandler {
  public var logLevel: SAPCommon.LogLevel
  final public let formatter: any SAPCommon.LogFormatter
  open class var synchronizationQueue: Dispatch.DispatchQueue {
    get
  }
  public init(formatter: any SAPCommon.LogFormatter = ConsoleLogFormatter())
  open func publish(_ record: SAPCommon.LogRecord)
  @objc deinit
}
public enum LoggingError : Swift.Error {
  case frameworkNotInitialized
  case logFileCouldNotBeCreated(error: any Swift.Error)
}
extension SAPCommon.LoggingError : SAPCommon.SAPError {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
public protocol LogHandler : AnyObject {
  var logLevel: SAPCommon.LogLevel { get set }
  func publish(_ record: SAPCommon.LogRecord)
}
@_hasMissingDesignatedInitializers public class Logger : Swift.Hashable, Swift.Equatable, Swift.CustomStringConvertible {
  public static let synchronizationQueue: Dispatch.DispatchQueue
  public var useParentHandlers: Swift.Bool
  public static let root: SAPCommon.Logger
  public var parent: SAPCommon.Logger? {
    get
  }
  public var logLevel: SAPCommon.LogLevel? {
    get
    set
  }
  public class func shared(named name: Swift.String) -> SAPCommon.Logger
  public func add(handler: any SAPCommon.LogHandler)
  public func remove(handler: any SAPCommon.LogHandler)
  public func removeHandlers()
  public func log(_ message: Swift.String, error: (any Swift.Error)? = nil, level: SAPCommon.LogLevel = .debug, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, correlationId: Swift.String? = nil)
  public func error(_ message: Swift.String, error: (any Swift.Error)? = nil, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, correlationId: Swift.String? = nil)
  public func warn(_ message: Swift.String, error: (any Swift.Error)? = nil, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, correlationId: Swift.String? = nil)
  public func info(_ message: Swift.String, error: (any Swift.Error)? = nil, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, correlationId: Swift.String? = nil)
  public func debug(_ message: Swift.String, error: (any Swift.Error)? = nil, fileName: Swift.String = #file, functionName: Swift.String = #function, lineNumber: Swift.Int = #line, correlationId: Swift.String? = nil)
  public var isErrorEnabled: Swift.Bool {
    get
  }
  public var isWarnEnabled: Swift.Bool {
    get
  }
  public var isInfoEnabled: Swift.Bool {
    get
  }
  public var isDebugEnabled: Swift.Bool {
    get
  }
  public func dumpHierarchy()
  public static func == (lhs: SAPCommon.Logger, rhs: SAPCommon.Logger) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
}
public protocol SAPError : Foundation.LocalizedError, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
}
extension SAPCommon.SAPError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public var helpAnchor: Swift.String? {
    get
  }
}
public protocol Ciphering {
  func encrypt(data: Foundation.Data) throws -> Foundation.Data
  func decrypt(data: Foundation.Data) throws -> Foundation.Data
}
public struct LogRecord {
  public let loggerName: Swift.String
  public let logLevel: SAPCommon.LogLevel
  public let date: Foundation.Date
  public let logMessage: Swift.String
  public let function: Swift.String
  public let file: Swift.String
  public let line: Swift.Int
  public let error: (any Swift.Error)?
  public let thread: Swift.String
  public let correlationId: Swift.String?
  public init(loggerName: Swift.String, logLevel: SAPCommon.LogLevel, date: Foundation.Date, logMessage: Swift.String, function: Swift.String, file: Swift.String, line: Swift.Int, error: (any Swift.Error)?, thread: Swift.String, correlationId: Swift.String? = nil)
}
@_inheritsConvenienceInitializers open class FileLogFormatter : SAPCommon.ConsoleLogFormatter {
  override open var head: Swift.String {
    get
  }
  override open func format(_ record: SAPCommon.LogRecord) -> Swift.String
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class OSLogConsoleHandler : SAPCommon.ConsoleLogHandler {
  public var osLogMessageType: Swift.StaticString
  override public init(formatter: any SAPCommon.LogFormatter = OSLogConsoleFormatter())
  override open func publish(_ record: SAPCommon.LogRecord)
  @objc deinit
}
public protocol DataStoring {
  func put(data: Foundation.Data, for key: Swift.String) throws
  func data(for key: Swift.String) throws -> Foundation.Data?
  func removeData(for key: Swift.String) throws
  func keys() throws -> Swift.Set<Swift.String>
}
public protocol LogFormatter : AnyObject {
  var head: Swift.String { get }
  func format(_ record: SAPCommon.LogRecord) -> Swift.String
  func formatDate(_ date: Foundation.Date) -> Swift.String
}
extension SAPCommon.LogLevel : Swift.Hashable {}
extension SAPCommon.LogLevel : Swift.RawRepresentable {}
